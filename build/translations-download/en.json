{
    "common": {
        "action": {
            "close": "Close",
            "connect": "Connect",
            "disable": "Disable",
            "disconnect": "Disconnect",
            "enable": "Enable",
            "open": "Open",
            "pause": "Pause",
            "reload": "Reload",
            "restart": "Restart",
            "start": "Start",
            "stop": "Stop",
            "toggle": "Toggle",
            "turn_off": "Turn off",
            "turn_on": "Turn on"
        },
        "config_flow": {
            "abort": {
                "already_configured_account": "Account is already configured",
                "already_configured_device": "Device is already configured",
                "already_configured_location": "Location is already configured",
                "already_configured_service": "Service is already configured",
                "already_in_progress": "Configuration flow is already in progress",
                "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                "no_devices_found": "No devices found on the network",
                "oauth2_authorize_url_timeout": "Timeout generating authorize URL.",
                "oauth2_error": "Received invalid token data.",
                "oauth2_missing_configuration": "The component is not configured. Please follow the documentation.",
                "oauth2_missing_credentials": "The integration requires application credentials.",
                "oauth2_no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                "oauth2_timeout": "Timeout resolving OAuth token.",
                "oauth2_user_rejected_authorize": "Account linking rejected: {error}",
                "reauth_successful": "Re-authentication was successful",
                "single_instance_allowed": "Already configured. Only a single configuration possible.",
                "unknown_authorize_url_generation": "Unknown error generating an authorize URL.",
                "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
            },
            "create_entry": {
                "authenticated": "Successfully authenticated"
            },
            "data": {
                "access_token": "Access Token",
                "api_key": "API Key",
                "api_token": "API Token",
                "device": "Device",
                "elevation": "Elevation",
                "email": "Email",
                "host": "Host",
                "ip": "IP Address",
                "latitude": "Latitude",
                "location": "Location",
                "longitude": "Longitude",
                "mode": "Mode",
                "name": "Name",
                "password": "Password",
                "path": "Path",
                "pin": "PIN Code",
                "port": "Port",
                "ssl": "Uses an SSL certificate",
                "url": "URL",
                "usb_path": "USB Device Path",
                "username": "Username",
                "verify_ssl": "Verify SSL certificate"
            },
            "description": {
                "confirm_setup": "Do you want to start setup?"
            },
            "error": {
                "cannot_connect": "Failed to connect",
                "invalid_access_token": "Invalid access token",
                "invalid_api_key": "Invalid API key",
                "invalid_auth": "Invalid authentication",
                "invalid_host": "Invalid hostname or IP address",
                "timeout_connect": "Timeout establishing connection",
                "unknown": "Unexpected error"
            },
            "title": {
                "oauth2_pick_implementation": "Pick Authentication Method",
                "reauth": "Reauthenticate Integration",
                "via_hassio_addon": "{name} via Home Assistant add-on"
            }
        },
        "device_automation": {
            "action_type": {
                "toggle": "Toggle {entity_name}",
                "turn_off": "Turn off {entity_name}",
                "turn_on": "Turn on {entity_name}"
            },
            "condition_type": {
                "is_off": "{entity_name} is off",
                "is_on": "{entity_name} is on"
            },
            "trigger_type": {
                "changed_states": "{entity_name} turned on or off",
                "turned_off": "{entity_name} turned off",
                "turned_on": "{entity_name} turned on"
            }
        },
        "generic": {
            "model": "Model",
            "ui_managed": "Managed via UI"
        },
        "issues": {
            "platform_integration_no_support_description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
            "platform_integration_no_support_title": "Platform support not supported"
        },
        "state": {
            "active": "Active",
            "closed": "Closed",
            "connected": "Connected",
            "disabled": "Disabled",
            "disconnected": "Disconnected",
            "enabled": "Enabled",
            "home": "Home",
            "idle": "Idle",
            "locked": "Locked",
            "no": "No",
            "not_home": "Away",
            "off": "Off",
            "on": "On",
            "open": "Open",
            "paused": "Paused",
            "standby": "Standby",
            "unlocked": "Unlocked",
            "yes": "Yes"
        },
        "time": {
            "friday": "Friday",
            "monday": "Monday",
            "saturday": "Saturday",
            "sunday": "Sunday",
            "thursday": "Thursday",
            "tuesday": "Tuesday",
            "wednesday": "Wednesday"
        }
    },
    "component": {
        "abode": {
            "config": {
                "abort": {
                    "reauth_successful": "Re-authentication was successful",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_mfa_code": "Invalid MFA code"
                },
                "step": {
                    "mfa": {
                        "data": {
                            "mfa_code": "MFA code (6-digits)"
                        },
                        "title": "Enter your MFA code for Abode"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        },
                        "title": "Fill in your Abode login information"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        },
                        "title": "Fill in your Abode login information"
                    }
                }
            },
            "services": {
                "capture_image": {
                    "description": "Request a new image capture from a camera device.",
                    "fields": {
                        "entity_id": {
                            "description": "Entity id of the camera to request an image.",
                            "name": "Entity"
                        }
                    },
                    "name": "Capture image"
                },
                "change_setting": {
                    "description": "Change an Abode system setting.",
                    "fields": {
                        "setting": {
                            "description": "Setting to change.",
                            "name": "Setting"
                        },
                        "value": {
                            "description": "Value of the setting.",
                            "name": "Value"
                        }
                    },
                    "name": "Change setting"
                },
                "trigger_automation": {
                    "description": "Trigger an Abode automation.",
                    "fields": {
                        "entity_id": {
                            "description": "Entity id of the automation to trigger.",
                            "name": "Entity"
                        }
                    },
                    "name": "Trigger automation"
                }
            }
        },
        "accuweather": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "create_entry": {
                    "default": "Some sensors are not enabled by default. You can enable them in the entity registry after the integration configuration.\nWeather forecast is not enabled by default. You can enable it in the integration options."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key",
                    "requests_exceeded": "The allowed number of requests to Accuweather API has been exceeded. You have to wait or change API Key."
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_quality": {
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy"
                        }
                    },
                    "air_quality_0d": {
                        "name": "Air quality today",
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy"
                        }
                    },
                    "air_quality_1d": {
                        "name": "Air quality day 1",
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy"
                        }
                    },
                    "air_quality_2d": {
                        "name": "Air quality day 2",
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy"
                        }
                    },
                    "air_quality_3d": {
                        "name": "Air quality day 3",
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy"
                        }
                    },
                    "air_quality_4d": {
                        "name": "Air quality day 4",
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy"
                        }
                    },
                    "apparent_temperature": {
                        "name": "Apparent temperature"
                    },
                    "cloud_ceiling": {
                        "name": "Cloud ceiling"
                    },
                    "cloud_cover": {
                        "name": "Cloud cover"
                    },
                    "cloud_cover_day_0d": {
                        "name": "Cloud cover today"
                    },
                    "cloud_cover_day_1d": {
                        "name": "Cloud cover day 1"
                    },
                    "cloud_cover_day_2d": {
                        "name": "Cloud cover day 2"
                    },
                    "cloud_cover_day_3d": {
                        "name": "Cloud cover day 3"
                    },
                    "cloud_cover_day_4d": {
                        "name": "Cloud cover day 4"
                    },
                    "cloud_cover_night_0d": {
                        "name": "Cloud cover tonight"
                    },
                    "cloud_cover_night_1d": {
                        "name": "Cloud cover night 1"
                    },
                    "cloud_cover_night_2d": {
                        "name": "Cloud cover night 2"
                    },
                    "cloud_cover_night_3d": {
                        "name": "Cloud cover night 3"
                    },
                    "cloud_cover_night_4d": {
                        "name": "Cloud cover night 4"
                    },
                    "condition_day_0d": {
                        "name": "Condition today"
                    },
                    "condition_day_1d": {
                        "name": "Condition day 1"
                    },
                    "condition_day_2d": {
                        "name": "Condition day 2"
                    },
                    "condition_day_3d": {
                        "name": "Condition day 3"
                    },
                    "condition_day_4d": {
                        "name": "Condition day 4"
                    },
                    "condition_night_0d": {
                        "name": "Condition tonight"
                    },
                    "condition_night_1d": {
                        "name": "Condition night 1"
                    },
                    "condition_night_2d": {
                        "name": "Condition night 2"
                    },
                    "condition_night_3d": {
                        "name": "Condition night 3"
                    },
                    "condition_night_4d": {
                        "name": "Condition night 4"
                    },
                    "dew_point": {
                        "name": "Dew point"
                    },
                    "grass_pollen": {
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "grass_pollen_0d": {
                        "name": "Grass pollen today",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "grass_pollen_1d": {
                        "name": "Grass pollen day 1",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "grass_pollen_2d": {
                        "name": "Grass pollen day 2",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "grass_pollen_3d": {
                        "name": "Grass pollen day 3",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "grass_pollen_4d": {
                        "name": "Grass pollen day 4",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "hours_of_sun_0d": {
                        "name": "Hours of sun today"
                    },
                    "hours_of_sun_1d": {
                        "name": "Hours of sun day 1"
                    },
                    "hours_of_sun_2d": {
                        "name": "Hours of sun day 2"
                    },
                    "hours_of_sun_3d": {
                        "name": "Hours of sun day 3"
                    },
                    "hours_of_sun_4d": {
                        "name": "Hours of sun day 4"
                    },
                    "mold_pollen": {
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "mold_pollen_0d": {
                        "name": "Mold pollen today",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "mold_pollen_1d": {
                        "name": "Mold pollen day 1",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "mold_pollen_2d": {
                        "name": "Mold pollen day 2",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "mold_pollen_3d": {
                        "name": "Mold pollen day 3",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "mold_pollen_4d": {
                        "name": "Mold pollen day 4",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "precipitation": {
                        "name": "Precipitation"
                    },
                    "pressure_tendency": {
                        "name": "Pressure tendency",
                        "state": {
                            "falling": "Falling",
                            "rising": "Rising",
                            "steady": "Steady"
                        }
                    },
                    "ragweed_pollen": {
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "ragweed_pollen_0d": {
                        "name": "Ragweed pollen today",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "ragweed_pollen_1d": {
                        "name": "Ragweed pollen day 1",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "ragweed_pollen_2d": {
                        "name": "Ragweed pollen day 2",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "ragweed_pollen_3d": {
                        "name": "Ragweed pollen day 3",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "ragweed_pollen_4d": {
                        "name": "Ragweed pollen day 4",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "realfeel_temperature": {
                        "name": "RealFeel temperature"
                    },
                    "realfeel_temperature_max_0d": {
                        "name": "RealFeel temperature max today"
                    },
                    "realfeel_temperature_max_1d": {
                        "name": "RealFeel temperature max day 1"
                    },
                    "realfeel_temperature_max_2d": {
                        "name": "RealFeel temperature max day 2"
                    },
                    "realfeel_temperature_max_3d": {
                        "name": "RealFeel temperature max day 3"
                    },
                    "realfeel_temperature_max_4d": {
                        "name": "RealFeel temperature max day 4"
                    },
                    "realfeel_temperature_min_0d": {
                        "name": "RealFeel temperature min today"
                    },
                    "realfeel_temperature_min_1d": {
                        "name": "RealFeel temperature min day 1"
                    },
                    "realfeel_temperature_min_2d": {
                        "name": "RealFeel temperature min day 2"
                    },
                    "realfeel_temperature_min_3d": {
                        "name": "RealFeel temperature min day 3"
                    },
                    "realfeel_temperature_min_4d": {
                        "name": "RealFeel temperature min day 4"
                    },
                    "realfeel_temperature_shade": {
                        "name": "RealFeel temperature shade"
                    },
                    "realfeel_temperature_shade_max_0d": {
                        "name": "RealFeel temperature shade max today"
                    },
                    "realfeel_temperature_shade_max_1d": {
                        "name": "RealFeel temperature shade max day 1"
                    },
                    "realfeel_temperature_shade_max_2d": {
                        "name": "RealFeel temperature shade max day 2"
                    },
                    "realfeel_temperature_shade_max_3d": {
                        "name": "RealFeel temperature shade max day 3"
                    },
                    "realfeel_temperature_shade_max_4d": {
                        "name": "RealFeel temperature shade max day 4"
                    },
                    "realfeel_temperature_shade_min_0d": {
                        "name": "RealFeel temperature shade min today"
                    },
                    "realfeel_temperature_shade_min_1d": {
                        "name": "RealFeel temperature shade min day 1"
                    },
                    "realfeel_temperature_shade_min_2d": {
                        "name": "RealFeel temperature shade min day 2"
                    },
                    "realfeel_temperature_shade_min_3d": {
                        "name": "RealFeel temperature shade min day 3"
                    },
                    "realfeel_temperature_shade_min_4d": {
                        "name": "RealFeel temperature shade min day 4"
                    },
                    "solar_irradiance_day_0d": {
                        "name": "Solar irradiance today"
                    },
                    "solar_irradiance_day_1d": {
                        "name": "Solar irradiance day 1"
                    },
                    "solar_irradiance_day_2d": {
                        "name": "Solar irradiance day 2"
                    },
                    "solar_irradiance_day_3d": {
                        "name": "Solar irradiance day 3"
                    },
                    "solar_irradiance_day_4d": {
                        "name": "Solar irradiance day 4"
                    },
                    "solar_irradiance_night_0d": {
                        "name": "Solar irradiance tonight"
                    },
                    "solar_irradiance_night_1d": {
                        "name": "Solar irradiance night 1"
                    },
                    "solar_irradiance_night_2d": {
                        "name": "Solar irradiance night 2"
                    },
                    "solar_irradiance_night_3d": {
                        "name": "Solar irradiance night 3"
                    },
                    "solar_irradiance_night_4d": {
                        "name": "Solar irradiance night 4"
                    },
                    "thunderstorm_probability_day_0d": {
                        "name": "Thunderstorm probability today"
                    },
                    "thunderstorm_probability_day_1d": {
                        "name": "Thunderstorm probability day 1"
                    },
                    "thunderstorm_probability_day_2d": {
                        "name": "Thunderstorm probability day 2"
                    },
                    "thunderstorm_probability_day_3d": {
                        "name": "Thunderstorm probability day 3"
                    },
                    "thunderstorm_probability_day_4d": {
                        "name": "Thunderstorm probability day 4"
                    },
                    "thunderstorm_probability_night_0d": {
                        "name": "Thunderstorm probability tonight"
                    },
                    "thunderstorm_probability_night_1d": {
                        "name": "Thunderstorm probability night 1"
                    },
                    "thunderstorm_probability_night_2d": {
                        "name": "Thunderstorm probability night 2"
                    },
                    "thunderstorm_probability_night_3d": {
                        "name": "Thunderstorm probability night 3"
                    },
                    "thunderstorm_probability_night_4d": {
                        "name": "Thunderstorm probability night 4"
                    },
                    "tree_pollen": {
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "tree_pollen_0d": {
                        "name": "Tree pollen today",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "tree_pollen_1d": {
                        "name": "Tree pollen day 1",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "tree_pollen_2d": {
                        "name": "Tree pollen day 2",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "tree_pollen_3d": {
                        "name": "Tree pollen day 3",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "tree_pollen_4d": {
                        "name": "Tree pollen day 4",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "uv_index": {
                        "name": "UV index",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "uv_index_0d": {
                        "name": "UV index today",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "uv_index_1d": {
                        "name": "UV index day 1",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "uv_index_2d": {
                        "name": "UV index day 2",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "uv_index_3d": {
                        "name": "UV index day 3",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "uv_index_4d": {
                        "name": "UV index day 4",
                        "state_attributes": {
                            "level": {
                                "name": "Level",
                                "state": {
                                    "good": "Good",
                                    "hazardous": "Hazardous",
                                    "high": "High",
                                    "low": "Low",
                                    "moderate": "Moderate",
                                    "unhealthy": "Unhealthy"
                                }
                            }
                        }
                    },
                    "wet_bulb_temperature": {
                        "name": "Wet bulb temperature"
                    },
                    "wind_chill_temperature": {
                        "name": "Wind chill temperature"
                    },
                    "wind_gust_speed": {
                        "name": "Wind gust speed"
                    },
                    "wind_gust_speed_day_0d": {
                        "name": "Wind gust speed today"
                    },
                    "wind_gust_speed_day_1d": {
                        "name": "Wind gust speed day 1"
                    },
                    "wind_gust_speed_day_2d": {
                        "name": "Wind gust speed day 2"
                    },
                    "wind_gust_speed_day_3d": {
                        "name": "Wind gust speed day 3"
                    },
                    "wind_gust_speed_day_4d": {
                        "name": "Wind gust speed day 4"
                    },
                    "wind_gust_speed_night_0d": {
                        "name": "Wind gust speed tonight"
                    },
                    "wind_gust_speed_night_1d": {
                        "name": "Wind gust speed night 1"
                    },
                    "wind_gust_speed_night_2d": {
                        "name": "Wind gust speed night 2"
                    },
                    "wind_gust_speed_night_3d": {
                        "name": "Wind gust speed night 3"
                    },
                    "wind_gust_speed_night_4d": {
                        "name": "Wind gust speed night 4"
                    },
                    "wind_speed": {
                        "name": "Wind speed"
                    },
                    "wind_speed_day_0d": {
                        "name": "Wind speed today"
                    },
                    "wind_speed_day_1d": {
                        "name": "Wind speed day 1"
                    },
                    "wind_speed_day_2d": {
                        "name": "Wind speed day 2"
                    },
                    "wind_speed_day_3d": {
                        "name": "Wind speed day 3"
                    },
                    "wind_speed_day_4d": {
                        "name": "Wind speed day 4"
                    },
                    "wind_speed_night_0d": {
                        "name": "Wind speed tonight"
                    },
                    "wind_speed_night_1d": {
                        "name": "Wind speed night 1"
                    },
                    "wind_speed_night_2d": {
                        "name": "Wind speed night 2"
                    },
                    "wind_speed_night_3d": {
                        "name": "Wind speed night 3"
                    },
                    "wind_speed_night_4d": {
                        "name": "Wind speed night 4"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "forecast": "Weather forecast"
                        },
                        "description": "Due to the limitations of the free version of the AccuWeather API key, when you enable weather forecast, data updates will be performed every 80 minutes instead of every 40 minutes."
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "accuweather__pressure_tendency": {
                            "falling": "Falling",
                            "rising": "Rising",
                            "steady": "Steady"
                        }
                    }
                }
            },
            "system_health": {
                "info": {
                    "can_reach_server": "Reach AccuWeather server",
                    "remaining_requests": "Remaining allowed requests"
                }
            }
        },
        "acmeda": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network"
                },
                "step": {
                    "user": {
                        "data": {
                            "id": "Host ID"
                        },
                        "title": "Pick a hub to add"
                    }
                }
            }
        },
        "adax": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "heater_not_available": "Heater not available. Try to reset the heater by pressing + and OK for some seconds.",
                    "heater_not_found": "Heater not found. Try to move the heater closer to Home Assistant computer.",
                    "invalid_auth": "Invalid authentication"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "cloud": {
                        "data": {
                            "account_id": "Account ID",
                            "password": "Password"
                        }
                    },
                    "local": {
                        "data": {
                            "wifi_pswd": "Wi-Fi Password",
                            "wifi_ssid": "Wi-Fi SSID"
                        },
                        "description": "Reset the heater by pressing + and OK until display shows 'Reset'. Then press and hold OK button on the heater until the blue led starts blinking before pressing Submit. Configuring heater might take some minutes."
                    },
                    "user": {
                        "data": {
                            "connection_type": "Select connection type"
                        },
                        "description": "Select connection type. Local requires heaters with bluetooth"
                    }
                }
            }
        },
        "adguard": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "existing_instance_updated": "Updated existing configuration."
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to configure Home Assistant to connect to the AdGuard Home provided by the add-on: {addon}?",
                        "title": "AdGuard Home via Home Assistant add-on"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Set up your AdGuard Home instance to allow monitoring and control."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "average_processing_speed": {
                        "name": "Average processing speed"
                    },
                    "dns_queries": {
                        "name": "DNS queries"
                    },
                    "dns_queries_blocked": {
                        "name": "DNS queries blocked"
                    },
                    "dns_queries_blocked_ratio": {
                        "name": "DNS queries blocked ratio"
                    },
                    "parental_control_blocked": {
                        "name": "Parental control blocked"
                    },
                    "rules_count": {
                        "name": "Rules count"
                    },
                    "safe_browsing_blocked": {
                        "name": "Safe browsing blocked"
                    },
                    "safe_searches_enforced": {
                        "name": "Safe searches enforced"
                    }
                },
                "switch": {
                    "filtering": {
                        "name": "Filtering"
                    },
                    "parental": {
                        "name": "Parental control"
                    },
                    "protection": {
                        "name": "Protection"
                    },
                    "query_log": {
                        "name": "Query log"
                    },
                    "safe_browsing": {
                        "name": "Safe browsing"
                    },
                    "safe_search": {
                        "name": "Safe search"
                    }
                }
            },
            "services": {
                "add_url": {
                    "description": "Add a new filter subscription to AdGuard Home.",
                    "fields": {
                        "name": {
                            "description": "The name of the filter subscription.",
                            "name": "Name"
                        },
                        "url": {
                            "description": "The filter URL to subscribe to, containing the filter rules.",
                            "name": "URL"
                        }
                    },
                    "name": "Add URL"
                },
                "disable_url": {
                    "description": "Disables a filter subscription in AdGuard Home.",
                    "fields": {
                        "url": {
                            "description": "The filter subscription URL to disable.",
                            "name": "URL"
                        }
                    },
                    "name": "Disable URL"
                },
                "enable_url": {
                    "description": "Enables a filter subscription in AdGuard Home.",
                    "fields": {
                        "url": {
                            "description": "The filter subscription URL to enable.",
                            "name": "URL"
                        }
                    },
                    "name": "Enable URL"
                },
                "refresh": {
                    "description": "Refresh all filter subscriptions in AdGuard Home.",
                    "fields": {
                        "force": {
                            "description": "Force update (bypasses AdGuard Home throttling). \"true\" to force, or \"false\" to omit for a regular refresh.",
                            "name": "Force"
                        }
                    },
                    "name": "Refresh"
                },
                "remove_url": {
                    "description": "Removes a filter subscription from AdGuard Home.",
                    "fields": {
                        "url": {
                            "description": "The filter subscription URL to remove.",
                            "name": "URL"
                        }
                    },
                    "name": "Remove URL"
                }
            }
        },
        "ads": {
            "services": {
                "write_data_by_name": {
                    "description": "Write a value to the connected ADS device.",
                    "fields": {
                        "adstype": {
                            "description": "The data type of the variable to write to.",
                            "name": "ADS type"
                        },
                        "adsvar": {
                            "description": "The name of the variable to write to.",
                            "name": "ADS variable"
                        },
                        "value": {
                            "description": "The value to write to the variable.",
                            "name": "Value"
                        }
                    },
                    "name": "Write data by name"
                }
            }
        },
        "advantage_air": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address",
                            "port": "Port"
                        },
                        "description": "Connect to the API of your Advantage Air wall mounted tablet.",
                        "title": "Connect"
                    }
                }
            },
            "services": {
                "set_time_to": {
                    "description": "Controls timers to turn the system on or off after a set number of minutes.",
                    "fields": {
                        "minutes": {
                            "description": "Minutes until action.",
                            "name": "Minutes"
                        }
                    },
                    "name": "Set time to"
                }
            }
        },
        "aemet": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name of the integration"
                        },
                        "description": "To generate API key go to https:\/\/opendata.aemet.es\/centrodedescargas\/altaUsuario"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "station_updates": "Gather data from AEMET weather stations"
                        }
                    }
                }
            }
        },
        "aftership": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml_import_issue_already_configured": {
                    "description": "Configuring {integration_title} using YAML is being removed but the YAML configuration was already imported.\n\nRemove the YAML configuration and restart Home Assistant.",
                    "title": "The {integration_title} YAML configuration import failed"
                },
                "deprecated_yaml_import_issue_cannot_connect": {
                    "description": "Configuring {integration_title} using YAML is being removed but there was an connection error importing your YAML configuration.\n\nEnsure connection to {integration_title} works and restart Home Assistant to try again or remove the {integration_title} YAML configuration from your configuration.yaml file and continue to [set up the integration]({url}) manually.",
                    "title": "The {integration_title} YAML configuration import failed"
                }
            },
            "services": {
                "add_tracking": {
                    "description": "Adds a new tracking number to Aftership.",
                    "fields": {
                        "slug": {
                            "description": "Slug (carrier) of the new tracking.",
                            "name": "Slug"
                        },
                        "title": {
                            "description": "A custom title for the new tracking.",
                            "name": "Title"
                        },
                        "tracking_number": {
                            "description": "Tracking number for the new tracking.",
                            "name": "Tracking number"
                        }
                    },
                    "name": "Add tracking"
                },
                "remove_tracking": {
                    "description": "Removes a tracking number from Aftership.",
                    "fields": {
                        "slug": {
                            "description": "Slug (carrier) of the tracking to remove.",
                            "name": "Slug"
                        },
                        "tracking_number": {
                            "description": "Tracking number of the tracking to remove.",
                            "name": "Tracking number"
                        }
                    },
                    "name": "Remove tracking"
                }
            }
        },
        "agent_dvr": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Set up Agent DVR"
                    }
                }
            },
            "services": {
                "disable_alerts": {
                    "description": "Disables alerts.",
                    "name": "Disable alerts"
                },
                "enable_alerts": {
                    "description": "Enables alerts.",
                    "name": "Enable alerts"
                },
                "snapshot": {
                    "description": "Takes a photo.",
                    "name": "Snapshot"
                },
                "start_recording": {
                    "description": "Enables continuous recording.",
                    "name": "Start recording"
                },
                "stop_recording": {
                    "description": "Disables continuous recording.",
                    "name": "Stop recording"
                }
            }
        },
        "airly": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured",
                    "wrong_location": "No Airly measuring stations in this area."
                },
                "error": {
                    "invalid_api_key": "Invalid API key",
                    "wrong_location": "No Airly measuring stations in this area."
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name"
                        },
                        "description": "To generate API key go to https:\/\/developer.airly.eu\/register"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "caqi": {
                        "name": "Common air quality index"
                    },
                    "co": {
                        "name": "Carbon monoxide"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "no2": {
                        "name": "Nitrogen dioxide"
                    },
                    "o3": {
                        "name": "Ozone"
                    },
                    "pm10": {
                        "name": "PM10"
                    },
                    "pm1": {
                        "name": "PM1"
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "pressure": {
                        "name": "Pressure"
                    },
                    "so2": {
                        "name": "Sulphur dioxide"
                    },
                    "temperature": {
                        "name": "Temperature"
                    }
                }
            },
            "system_health": {
                "info": {
                    "can_reach_server": "Reach Airly server",
                    "requests_per_day": "Allowed requests per day",
                    "requests_remaining": "Remaining allowed requests"
                }
            }
        },
        "airnow": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_location": "No results found for that location, try changing the location or station radius.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "radius": "Station Radius (miles; optional)"
                        },
                        "description": "To generate API key go to https:\/\/docs.airnowapi.org\/account\/request\/"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "aqi": {
                        "name": "Air quality index"
                    },
                    "o3": {
                        "name": "Ozone"
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "station": {
                        "name": "PM2.5 reporting station",
                        "state_attributes": {
                            "lat": {
                                "name": "Latitude"
                            },
                            "long": {
                                "name": "Longitude"
                            }
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "radius": "Station Radius (miles)"
                        }
                    }
                }
            }
        },
        "airq": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_input": "Invalid hostname or IP address"
                },
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address",
                            "password": "Password"
                        },
                        "description": "Provide the IP address or mDNS of the device and its password",
                        "title": "Identify the device"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "absolute_humidity": {
                        "name": "Absolute humidity"
                    },
                    "acetaldehyde": {
                        "name": "Acetaldehyde"
                    },
                    "ammonia": {
                        "name": "Ammonia"
                    },
                    "arsine": {
                        "name": "Arsine"
                    },
                    "bromine": {
                        "name": "Bromine"
                    },
                    "carbon_dioxide": {
                        "name": "Carbon dioxide"
                    },
                    "carbon_disulfide": {
                        "name": "Carbon disulfide"
                    },
                    "carbon_monoxide": {
                        "name": "Carbon monoxide"
                    },
                    "chlorine": {
                        "name": "Chlorine"
                    },
                    "chlorine_dioxide": {
                        "name": "Chlorine dioxide"
                    },
                    "dew_point": {
                        "name": "Dew point"
                    },
                    "ethanol": {
                        "name": "Ethanol"
                    },
                    "ethylene": {
                        "name": "Ethylene"
                    },
                    "fluorine": {
                        "name": "Fluorine"
                    },
                    "formaldehyde": {
                        "name": "Formaldehyde"
                    },
                    "health_index": {
                        "name": "Health Index"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "hydrochloric_acid": {
                        "name": "Hydrochloric acid"
                    },
                    "hydrogen": {
                        "name": "Hydrogen"
                    },
                    "hydrogen_cyanide": {
                        "name": "Hydrogen cyanide"
                    },
                    "hydrogen_fluoride": {
                        "name": "Hydrogen fluoride"
                    },
                    "hydrogen_peroxide": {
                        "name": "Hydrogen peroxide"
                    },
                    "hydrogen_phosphide": {
                        "name": "Hydrogen Phosphide"
                    },
                    "hydrogen_sulfide": {
                        "name": "Hydrogen sulfide"
                    },
                    "industrial_volatile_organic_compounds": {
                        "name": "VOCs (Industrial)"
                    },
                    "maximum_noise": {
                        "name": "Noise (Maximum)"
                    },
                    "methane": {
                        "name": "Methane"
                    },
                    "methanethiol": {
                        "name": "Methanethiol"
                    },
                    "nitrogen_dioxide": {
                        "name": "Nitrogen dioxide"
                    },
                    "nitrogen_monoxide": {
                        "name": "Nitrogen monoxide"
                    },
                    "nitrous_oxide": {
                        "name": "Nitrous oxide"
                    },
                    "noise": {
                        "name": "Noise"
                    },
                    "organic_acid": {
                        "name": "Organic acid"
                    },
                    "oxygen": {
                        "name": "Oxygen"
                    },
                    "ozone": {
                        "name": "Ozone"
                    },
                    "performance_index": {
                        "name": "Performance Index"
                    },
                    "pm10": {
                        "name": "PM10"
                    },
                    "pm1": {
                        "name": "PM1"
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "pressure": {
                        "name": "Pressure"
                    },
                    "propane": {
                        "name": "Propane"
                    },
                    "radon": {
                        "name": "Radon"
                    },
                    "refigerant": {
                        "name": "Refrigerant"
                    },
                    "relative_pressure": {
                        "name": "Relative pressure"
                    },
                    "silicon_hydride": {
                        "name": "Silicon Hydride"
                    },
                    "sulphur_dioxide": {
                        "name": "Sulphur dioxide"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "virus_index": {
                        "name": "Virus Index"
                    },
                    "volatile_organic_compounds": {
                        "name": "VOCs"
                    }
                }
            }
        },
        "airthings": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "description": "Login at {url} to find your credentials",
                            "id": "ID",
                            "secret": "Secret"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "light": {
                        "name": "Light"
                    },
                    "mold": {
                        "name": "Mold"
                    },
                    "radon": {
                        "name": "Radon"
                    },
                    "virus_risk": {
                        "name": "Virus Risk"
                    }
                }
            }
        },
        "airthings_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "radon_1day_avg": {
                        "name": "Radon 1-day average"
                    },
                    "radon_1day_level": {
                        "name": "Radon 1-day level"
                    },
                    "radon_longterm_avg": {
                        "name": "Radon longterm average"
                    },
                    "radon_longterm_level": {
                        "name": "Radon longterm level"
                    }
                }
            }
        },
        "airtouch4": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_units": "Could not find any AirTouch 4 Groups."
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "title": "Set up your AirTouch 4 connection details."
                    }
                }
            }
        },
        "airvisual": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "general_error": "Unexpected error",
                    "invalid_api_key": "Invalid API key",
                    "location_not_found": "Location not found"
                },
                "step": {
                    "geography_by_coords": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "description": "Use the AirVisual cloud API to monitor a latitude\/longitude.",
                        "title": "Configure a Geography"
                    },
                    "geography_by_name": {
                        "data": {
                            "api_key": "API Key",
                            "city": "City",
                            "country": "Country",
                            "state": "State"
                        },
                        "description": "Use the AirVisual cloud API to monitor a city\/state\/country.",
                        "title": "Configure a Geography"
                    },
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "title": "Re-authenticate AirVisual"
                    },
                    "user": {
                        "description": "Pick what type of AirVisual data you want to monitor.",
                        "title": "Configure AirVisual"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "pollutant_label": {
                        "state": {
                            "co": "Carbon Monoxide",
                            "n2": "Nitrogen Dioxide",
                            "o3": "Ozone",
                            "p1": "PM10",
                            "p2": "PM2.5",
                            "s2": "Sulfur Dioxide"
                        }
                    },
                    "pollutant_level": {
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy",
                            "unhealthy_sensitive": "Unhealthy for sensitive groups",
                            "very_unhealthy": "Very unhealthy"
                        }
                    }
                }
            },
            "issues": {
                "airvisual_pro_migration": {
                    "description": "AirVisual Pro units are now their own Home Assistant integration (as opposed to be included with the original AirVisual integration that uses the AirVisual cloud API). The Pro device located at `{ip_address}` has automatically been migrated.\n\nAs part of that migration, the Pro's device ID has changed from `{old_device_id}` to `{new_device_id}`. Please update these automations to use the new device ID: {device_automations_string}.",
                    "title": "{ip_address} is now part of the AirVisual Pro integration"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "show_on_map": "Show monitored geography on the map"
                        },
                        "title": "Configure AirVisual"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "airvisual__pollutant_label": {
                            "co": "Carbon Monoxide",
                            "n2": "Nitrogen Dioxide",
                            "o3": "Ozone",
                            "p1": "PM10",
                            "p2": "PM2.5",
                            "s2": "Sulfur Dioxide"
                        },
                        "airvisual__pollutant_level": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy",
                            "unhealthy_sensitive": "Unhealthy for sensitive groups",
                            "very_unhealthy": "Very unhealthy"
                        }
                    }
                }
            }
        },
        "airvisual_pro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password can be retrieved from the AirVisual Pro's UI."
                    },
                    "user": {
                        "data": {
                            "ip_address": "Host",
                            "password": "Password"
                        },
                        "description": "The password can be retrieved from the AirVisual Pro's UI."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "outdoor_air_quality_index": {
                        "name": "Outdoor air quality index"
                    },
                    "pm01": {
                        "name": "PM0.1"
                    }
                }
            }
        },
        "airzone": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_system_id": "Invalid Airzone System ID"
                },
                "step": {
                    "discovered_connection": {
                        "data": {
                            "host": "Host",
                            "id": "System ID",
                            "port": "Port"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "id": "System ID",
                            "port": "Port"
                        }
                    }
                }
            },
            "entity": {
                "select": {
                    "grille_angles": {
                        "state": {
                            "40deg": "40°",
                            "45deg": "45°",
                            "50deg": "50°",
                            "90deg": "90°"
                        }
                    },
                    "sleep_times": {
                        "state": {
                            "30m": "30 minutes",
                            "60m": "60 minutes",
                            "90m": "90 minutes",
                            "off": "Off"
                        }
                    }
                }
            }
        },
        "airzone_cloud": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "id": "Installation",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "aladdin_connect": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The Aladdin Connect integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "ble_strength": {
                        "name": "BLE Strength"
                    },
                    "wifi_strength": {
                        "name": "Wi-Fi RSSI"
                    }
                }
            }
        },
        "alarm_control_panel": {
            "device_automation": {
                "action_type": {
                    "arm_away": "Arm {entity_name} away",
                    "arm_home": "Arm {entity_name} home",
                    "arm_night": "Arm {entity_name} night",
                    "arm_vacation": "Arm {entity_name} vacation",
                    "disarm": "Disarm {entity_name}",
                    "trigger": "Trigger {entity_name}"
                },
                "condition_type": {
                    "is_armed_away": "{entity_name} is armed away",
                    "is_armed_home": "{entity_name} is armed home",
                    "is_armed_night": "{entity_name} is armed night",
                    "is_armed_vacation": "{entity_name} is armed vacation",
                    "is_disarmed": "{entity_name} is disarmed",
                    "is_triggered": "{entity_name} is triggered"
                },
                "trigger_type": {
                    "armed_away": "{entity_name} armed away",
                    "armed_home": "{entity_name} armed home",
                    "armed_night": "{entity_name} armed night",
                    "armed_vacation": "{entity_name} armed vacation",
                    "disarmed": "{entity_name} disarmed",
                    "triggered": "{entity_name} triggered"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Alarm control panel",
                    "state": {
                        "armed": "Armed",
                        "armed_away": "Armed away",
                        "armed_custom_bypass": "Armed custom bypass",
                        "armed_home": "Armed home",
                        "armed_night": "Armed night",
                        "armed_vacation": "Armed vacation",
                        "arming": "Arming",
                        "disarmed": "Disarmed",
                        "disarming": "Disarming",
                        "pending": "Pending",
                        "triggered": "Triggered"
                    },
                    "state_attributes": {
                        "changed_by": {
                            "name": "Changed by"
                        },
                        "code_arm_required": {
                            "name": "Code for arming",
                            "state": {
                                "false": "Not required",
                                "true": "Required"
                            }
                        },
                        "code_format": {
                            "name": "Code format",
                            "state": {
                                "number": "Number",
                                "text": "Text"
                            }
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "alarm_arm_away": {
                    "description": "Sets the alarm to: _armed, no one home_.",
                    "fields": {
                        "code": {
                            "description": "Code to arm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Arm away"
                },
                "alarm_arm_custom_bypass": {
                    "description": "Arms the alarm while allowing to bypass a custom area.",
                    "fields": {
                        "code": {
                            "description": "Code to arm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Arm with custom bypass"
                },
                "alarm_arm_home": {
                    "description": "Sets the alarm to: _armed, but someone is home_.",
                    "fields": {
                        "code": {
                            "description": "Code to arm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Arm home"
                },
                "alarm_arm_night": {
                    "description": "Sets the alarm to: _armed for the night_.",
                    "fields": {
                        "code": {
                            "description": "Code to arm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Arm night"
                },
                "alarm_arm_vacation": {
                    "description": "Sets the alarm to: _armed for vacation_.",
                    "fields": {
                        "code": {
                            "description": "Code to arm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Arm vacation"
                },
                "alarm_disarm": {
                    "description": "Disarms the alarm.",
                    "fields": {
                        "code": {
                            "description": "Code to disarm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Disarm"
                },
                "alarm_trigger": {
                    "description": "Enables an external alarm trigger.",
                    "fields": {
                        "code": {
                            "description": "Code to arm the alarm.",
                            "name": "Code"
                        }
                    },
                    "name": "Trigger"
                }
            },
            "title": "Alarm control panel"
        },
        "alarmdecoder": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "create_entry": {
                    "default": "Successfully connected to AlarmDecoder."
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "protocol": {
                        "data": {
                            "device_baudrate": "Device Baud Rate",
                            "device_path": "Device Path",
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Configure connection settings"
                    },
                    "user": {
                        "data": {
                            "protocol": "Protocol"
                        },
                        "title": "Choose AlarmDecoder Protocol"
                    }
                }
            },
            "options": {
                "error": {
                    "int": "The field below must be an integer.",
                    "loop_range": "RF Loop must be an integer between 1 and 4.",
                    "loop_rfid": "RF Loop cannot be used without RF Serial.",
                    "relay_inclusive": "Relay Address and Relay Channel are codependent and must be included together."
                },
                "step": {
                    "arm_settings": {
                        "data": {
                            "alt_night_mode": "Alternative Night Mode",
                            "auto_bypass": "Auto Bypass on Arm",
                            "code_arm_required": "Code Required for Arming"
                        },
                        "title": "Configure AlarmDecoder"
                    },
                    "init": {
                        "data": {
                            "edit_select": "Edit"
                        },
                        "description": "What would you like to edit?",
                        "title": "Configure AlarmDecoder"
                    },
                    "zone_details": {
                        "data": {
                            "zone_loop": "RF Loop",
                            "zone_name": "Zone Name",
                            "zone_relayaddr": "Relay Address",
                            "zone_relaychan": "Relay Channel",
                            "zone_rfid": "RF Serial",
                            "zone_type": "Zone Type"
                        },
                        "description": "Enter details for zone {zone_number}. To delete zone {zone_number}, leave Zone Name blank.",
                        "title": "Configure AlarmDecoder"
                    },
                    "zone_select": {
                        "data": {
                            "zone_number": "Zone Number"
                        },
                        "description": "Enter the zone number you'd like to to add, edit, or remove.",
                        "title": "Configure AlarmDecoder"
                    }
                }
            },
            "services": {
                "alarm_keypress": {
                    "description": "Sends custom keypresses to the alarm.",
                    "fields": {
                        "keypress": {
                            "description": "String to send to the alarm panel.",
                            "name": "Key press"
                        }
                    },
                    "name": "Key press"
                },
                "alarm_toggle_chime": {
                    "description": "Sends the alarm the toggle chime command.",
                    "fields": {
                        "code": {
                            "description": "Code to toggle the alarm control panel chime with.",
                            "name": "Code"
                        }
                    },
                    "name": "Toggle chime"
                }
            }
        },
        "alert": {
            "entity_component": {
                "_": {
                    "name": "Alert",
                    "state": {
                        "idle": "Idle",
                        "off": "Acknowledged",
                        "on": "Active"
                    }
                }
            },
            "services": {
                "toggle": {
                    "description": "Toggles alert's notifications.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Silences alert's notifications.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Resets alert's notifications.",
                    "name": "Turn on"
                }
            },
            "title": "Alert"
        },
        "almond": {
            "config": {
                "abort": {
                    "cannot_connect": "Failed to connect",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to configure Home Assistant to connect to Almond provided by the add-on: {addon}?",
                        "title": "Almond via Home Assistant add-on"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            }
        },
        "amberelectric": {
            "config": {
                "error": {
                    "invalid_api_token": "Invalid API key",
                    "no_site": "No site provided",
                    "unknown_error": "Unexpected error"
                },
                "step": {
                    "site": {
                        "data": {
                            "site_name": "Site Name",
                            "site_nmi": "Site NMI"
                        },
                        "description": "Select the NMI of the site you would like to add"
                    },
                    "user": {
                        "data": {
                            "api_token": "API Token",
                            "site_id": "Site ID"
                        },
                        "description": "Go to {api_url} to generate an API key"
                    }
                }
            }
        },
        "ambiclimate": {
            "config": {
                "abort": {
                    "access_token": "Unknown error generating an access token.",
                    "already_configured": "Account is already configured",
                    "missing_configuration": "The component is not configured. Please follow the documentation."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "error": {
                    "follow_link": "Please follow the link and authenticate before pressing Submit",
                    "no_token": "Not authenticated with Ambiclimate"
                },
                "step": {
                    "auth": {
                        "description": "Please follow this [link]({authorization_url}) and **Allow** access to your Ambiclimate account, then come back and press **Submit** below.\n(Make sure the specified callback URL is {cb_url})",
                        "title": "Authenticate Ambiclimate"
                    }
                }
            },
            "services": {
                "send_comfort_feedback": {
                    "description": "Sends feedback for comfort mode.",
                    "fields": {
                        "name": {
                            "description": "String with device name.",
                            "name": "Device name"
                        },
                        "value": {
                            "description": "Send any of the following comfort values: too_hot, too_warm, bit_warm, comfortable, bit_cold, too_cold, freezing\n.",
                            "name": "Comfort value"
                        }
                    },
                    "name": "Send comfort feedback"
                },
                "set_comfort_mode": {
                    "description": "Enables comfort mode on your AC.",
                    "fields": {
                        "name": {
                            "description": "String with device name.",
                            "name": "Device name"
                        }
                    },
                    "name": "Set comfort mode"
                },
                "set_temperature_mode": {
                    "description": "Enables temperature mode on your AC.",
                    "fields": {
                        "name": {
                            "description": "String with device name.",
                            "name": "Device name"
                        },
                        "value": {
                            "description": "Target value in celsius.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set temperature mode"
                }
            }
        },
        "ambient_station": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "invalid_key": "Invalid API key",
                    "no_devices": "No devices found in account"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "app_key": "Application Key"
                        },
                        "title": "Fill in your information"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "battery_10": {
                        "name": "Battery 10"
                    },
                    "battery_1": {
                        "name": "Battery 1"
                    },
                    "battery_2": {
                        "name": "Battery 2"
                    },
                    "battery_3": {
                        "name": "Battery 3"
                    },
                    "battery_4": {
                        "name": "Battery 4"
                    },
                    "battery_5": {
                        "name": "Battery 5"
                    },
                    "battery_6": {
                        "name": "Battery 6"
                    },
                    "battery_7": {
                        "name": "Battery 7"
                    },
                    "battery_8": {
                        "name": "Battery 8"
                    },
                    "battery_9": {
                        "name": "Battery 9"
                    },
                    "co2_battery": {
                        "name": "Carbon dioxide battery"
                    },
                    "interior_battery": {
                        "name": "Interior battery"
                    },
                    "leak_detector_1": {
                        "name": "Leak detector 1"
                    },
                    "leak_detector_2": {
                        "name": "Leak detector 2"
                    },
                    "leak_detector_3": {
                        "name": "Leak detector 3"
                    },
                    "leak_detector_4": {
                        "name": "Leak detector 4"
                    },
                    "leak_detector_battery_1": {
                        "name": "Leak detector battery 1"
                    },
                    "leak_detector_battery_2": {
                        "name": "Leak detector battery 2"
                    },
                    "leak_detector_battery_3": {
                        "name": "Leak detector battery 3"
                    },
                    "leak_detector_battery_4": {
                        "name": "Leak detector battery 4"
                    },
                    "lightning_detector_battery": {
                        "name": "Lightning detector battery"
                    },
                    "pm25_battery": {
                        "name": "PM25 battery"
                    },
                    "pm25_indoor_battery": {
                        "name": "PM25 indoor battery"
                    },
                    "relay_10": {
                        "name": "Relay 10"
                    },
                    "relay_1": {
                        "name": "Relay 1"
                    },
                    "relay_2": {
                        "name": "Relay 2"
                    },
                    "relay_3": {
                        "name": "Relay 3"
                    },
                    "relay_4": {
                        "name": "Relay 4"
                    },
                    "relay_5": {
                        "name": "Relay 5"
                    },
                    "relay_6": {
                        "name": "Relay 6"
                    },
                    "relay_7": {
                        "name": "Relay 7"
                    },
                    "relay_8": {
                        "name": "Relay 8"
                    },
                    "relay_9": {
                        "name": "Relay 9"
                    },
                    "soil_monitor_battery_10": {
                        "name": "Soil monitor battery 10"
                    },
                    "soil_monitor_battery_1": {
                        "name": "Soil monitor battery 1"
                    },
                    "soil_monitor_battery_2": {
                        "name": "Soil monitor battery 2"
                    },
                    "soil_monitor_battery_3": {
                        "name": "Soil monitor battery 3"
                    },
                    "soil_monitor_battery_4": {
                        "name": "Soil monitor battery 4"
                    },
                    "soil_monitor_battery_5": {
                        "name": "Soil monitor battery 5"
                    },
                    "soil_monitor_battery_6": {
                        "name": "Soil monitor battery 6"
                    },
                    "soil_monitor_battery_7": {
                        "name": "Soil monitor battery 7"
                    },
                    "soil_monitor_battery_8": {
                        "name": "Soil monitor battery 8"
                    },
                    "soil_monitor_battery_9": {
                        "name": "Soil monitor battery 9"
                    }
                },
                "sensor": {
                    "24_hour_rain": {
                        "name": "Rain 24 hours"
                    },
                    "absolute_pressure": {
                        "name": "Absolute pressure"
                    },
                    "daily_rain": {
                        "name": "Daily rain"
                    },
                    "dew_point": {
                        "name": "Dew point"
                    },
                    "event_rain": {
                        "name": "Event rain"
                    },
                    "feels_like": {
                        "name": "Feels like"
                    },
                    "humidity_10": {
                        "name": "Humidity 10"
                    },
                    "humidity_1": {
                        "name": "Humidity 1"
                    },
                    "humidity_2": {
                        "name": "Humidity 2"
                    },
                    "humidity_3": {
                        "name": "Humidity 3"
                    },
                    "humidity_4": {
                        "name": "Humidity 4"
                    },
                    "humidity_5": {
                        "name": "Humidity 5"
                    },
                    "humidity_6": {
                        "name": "Humidity 6"
                    },
                    "humidity_7": {
                        "name": "Humidity 7"
                    },
                    "humidity_8": {
                        "name": "Humidity 8"
                    },
                    "humidity_9": {
                        "name": "Humidity 9"
                    },
                    "humidity_indoor": {
                        "name": "Humidity indoor"
                    },
                    "inside_temperature": {
                        "name": "Inside temperature"
                    },
                    "last_rain": {
                        "name": "Last rain"
                    },
                    "lifetime_rain": {
                        "name": "Lifetime rain"
                    },
                    "lightning_strikes_per_day": {
                        "name": "Lightning strikes per day"
                    },
                    "lightning_strikes_per_hour": {
                        "name": "Lightning strikes per hour"
                    },
                    "max_gust": {
                        "name": "Max gust"
                    },
                    "monthly_rain": {
                        "name": "Monthly rain"
                    },
                    "pm25_24h_average": {
                        "name": "PM2.5 24 hour average"
                    },
                    "pm25_aqi": {
                        "name": "PM2.5 AQI"
                    },
                    "pm25_aqi_24h_average": {
                        "name": "PM2.5 AQI 24 hour average"
                    },
                    "pm25_indoor": {
                        "name": "PM2.5 indoor"
                    },
                    "pm25_indoor_24h_average": {
                        "name": "PM2.5 indoor 24 hour average"
                    },
                    "pm25_indoor_aqi": {
                        "name": "PM2.5 indoor AQI"
                    },
                    "pm25_indoor_aqi_24h_average": {
                        "name": "PM2.5 indoor AQI"
                    },
                    "relative_pressure": {
                        "name": "Relative pressure"
                    },
                    "soil_humidity_10": {
                        "name": "Soil humidity 10"
                    },
                    "soil_humidity_1": {
                        "name": "Soil humidity 1"
                    },
                    "soil_humidity_2": {
                        "name": "Soil humidity 2"
                    },
                    "soil_humidity_3": {
                        "name": "Soil humidity 3"
                    },
                    "soil_humidity_4": {
                        "name": "Soil humidity 4"
                    },
                    "soil_humidity_5": {
                        "name": "Soil humidity 5"
                    },
                    "soil_humidity_6": {
                        "name": "Soil humidity 6"
                    },
                    "soil_humidity_7": {
                        "name": "Soil humidity 7"
                    },
                    "soil_humidity_8": {
                        "name": "Soil humidity 8"
                    },
                    "soil_humidity_9": {
                        "name": "Soil humidity 9"
                    },
                    "soil_temperature_10": {
                        "name": "Soil temperature 10"
                    },
                    "soil_temperature_1": {
                        "name": "Soil temperature 1"
                    },
                    "soil_temperature_2": {
                        "name": "Soil temperature 2"
                    },
                    "soil_temperature_3": {
                        "name": "Soil temperature 3"
                    },
                    "soil_temperature_4": {
                        "name": "Soil temperature 4"
                    },
                    "soil_temperature_5": {
                        "name": "Soil temperature 5"
                    },
                    "soil_temperature_6": {
                        "name": "Soil temperature 6"
                    },
                    "soil_temperature_7": {
                        "name": "Soil temperature 7"
                    },
                    "soil_temperature_8": {
                        "name": "Soil temperature 8"
                    },
                    "soil_temperature_9": {
                        "name": "Soil temperature 9"
                    },
                    "temperature_10": {
                        "name": "Temperature 10"
                    },
                    "temperature_1": {
                        "name": "Temperature 1"
                    },
                    "temperature_2": {
                        "name": "Temperature 2"
                    },
                    "temperature_3": {
                        "name": "Temperature 3"
                    },
                    "temperature_4": {
                        "name": "Temperature 4"
                    },
                    "temperature_5": {
                        "name": "Temperature 5"
                    },
                    "temperature_6": {
                        "name": "Temperature 6"
                    },
                    "temperature_7": {
                        "name": "Temperature 7"
                    },
                    "temperature_8": {
                        "name": "Temperature 8"
                    },
                    "temperature_9": {
                        "name": "Temperature 9"
                    },
                    "uv_index": {
                        "name": "UV index"
                    },
                    "weekly_rain": {
                        "name": "Weekly rain"
                    },
                    "wind_average_10m": {
                        "name": "Wind average 10 minutes"
                    },
                    "wind_average_2m": {
                        "name": "Wind average 2 minutes"
                    },
                    "wind_direction": {
                        "name": "Wind direction"
                    },
                    "wind_direction_average_10m": {
                        "name": "Wind direction average 10 minutes"
                    },
                    "wind_direction_average_2m": {
                        "name": "Wind direction average 2 minutes"
                    },
                    "wind_gust": {
                        "name": "Wind gust"
                    },
                    "wind_gust_direction": {
                        "name": "Wind gust direction"
                    },
                    "yearly_rain": {
                        "name": "Yearly rain"
                    }
                }
            }
        },
        "amcrest": {
            "services": {
                "disable_audio": {
                    "description": "Disables audio stream.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Disable audio"
                },
                "disable_motion_recording": {
                    "description": "Disable recording a clip to camera storage when motion is detected.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Disables motion recording"
                },
                "disable_recording": {
                    "description": "Disables continuous recording to camera storage.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Disable recording"
                },
                "enable_audio": {
                    "description": "Enables audio stream.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Enable audio"
                },
                "enable_motion_recording": {
                    "description": "Enables recording a clip to camera storage when motion is detected.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Enables motion recording"
                },
                "enable_recording": {
                    "description": "Enables continuous recording to camera storage.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Enable recording"
                },
                "goto_preset": {
                    "description": "Moves camera to PTZ preset.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        },
                        "preset": {
                            "description": "Preset number.",
                            "name": "Preset"
                        }
                    },
                    "name": "Go to preset"
                },
                "ptz_control": {
                    "description": "Moves (pan\/tilt) and\/or zoom a PTZ camera.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        },
                        "movement": {
                            "description": "Direction to move the camera.",
                            "name": "Movement"
                        },
                        "travel_time": {
                            "description": "Travel time in fractional seconds: from 0 to 1.",
                            "name": "Travel time"
                        }
                    },
                    "name": "PTZ control"
                },
                "set_color_bw": {
                    "description": "Sets camera color mode.",
                    "fields": {
                        "color_bw": {
                            "description": "Color mode.",
                            "name": "Color"
                        },
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Set color"
                },
                "start_tour": {
                    "description": "Starts camera's PTZ tour function.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Start tour"
                },
                "stop_tour": {
                    "description": "Stops camera's PTZ tour function.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the cameras, or 'all' for all cameras.",
                            "name": "Entity"
                        }
                    },
                    "name": "Stop tour"
                }
            }
        },
        "android_ip_webcam": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Android IP Webcam using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Android IP Webcam YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Android IP Webcam YAML configuration is being removed"
                }
            }
        },
        "androidtv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "invalid_unique_id": "Impossible to determine a valid unique id for the device"
                },
                "error": {
                    "adbkey_not_file": "ADB key file not found",
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "key_and_server": "Only provide ADB Key or ADB Server",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "adb_server_ip": "IP address of the ADB server (leave empty to not use)",
                            "adb_server_port": "Port of the ADB server",
                            "adbkey": "Path to your ADB key file (leave empty to auto generate)",
                            "device_class": "The type of device",
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            },
            "options": {
                "error": {
                    "invalid_det_rules": "Invalid state detection rules"
                },
                "step": {
                    "apps": {
                        "data": {
                            "app_delete": "Check to delete this application",
                            "app_id": "Application ID",
                            "app_name": "Application Name"
                        },
                        "description": "Configure application id {app_id}",
                        "title": "Configure Android Apps"
                    },
                    "init": {
                        "data": {
                            "apps": "Configure applications list",
                            "exclude_unnamed_apps": "Exclude apps with unknown name from the sources list",
                            "get_sources": "Retrieve the running apps as the list of sources",
                            "screencap": "Use screen capture for album art",
                            "state_detection_rules": "Configure state detection rules",
                            "turn_off_command": "ADB shell turn off command (leave empty for default)",
                            "turn_on_command": "ADB shell turn on command (leave empty for default)"
                        }
                    },
                    "rules": {
                        "data": {
                            "rule_delete": "Check to delete this rule",
                            "rule_id": "Application ID",
                            "rule_values": "List of state detection rules (see documentation)"
                        },
                        "description": "Configure detection rule for application id {rule_id}",
                        "title": "Configure Android state detection rules"
                    }
                }
            },
            "services": {
                "adb_command": {
                    "description": "Sends an ADB command to an Android \/ Fire TV device.",
                    "fields": {
                        "command": {
                            "description": "Either a key command or an ADB shell command.",
                            "name": "Command"
                        }
                    },
                    "name": "ADB command"
                },
                "download": {
                    "description": "Downloads a file from your Android \/ Fire TV device to your Home Assistant instance.",
                    "fields": {
                        "device_path": {
                            "description": "The filepath on the Android \/ Fire TV device.",
                            "name": "Device path"
                        },
                        "local_path": {
                            "description": "The filepath on your Home Assistant instance.",
                            "name": "Local path"
                        }
                    },
                    "name": "Download"
                },
                "learn_sendevent": {
                    "description": "Translates a key press on a remote into ADB 'sendevent' commands. You must press one button on the remote within 8 seconds of calling this service.",
                    "name": "Learn sendevent"
                },
                "upload": {
                    "description": "Uploads a file from your Home Assistant instance to an Android \/ Fire TV device.",
                    "fields": {
                        "device_path": {
                            "description": "The filepath on the Android \/ Fire TV device.",
                            "name": "Device path"
                        },
                        "local_path": {
                            "description": "The filepath on your Home Assistant instance.",
                            "name": "Local path"
                        }
                    },
                    "name": "Upload"
                }
            }
        },
        "androidtv_remote": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "pair": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Enter the pairing code displayed on the Android TV ({name})."
                    },
                    "reauth_confirm": {
                        "description": "You need to pair again with the Android TV ({name}).",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Enter the IP address of the Android TV you want to add to Home Assistant. It will turn on and a pairing code will be displayed on it that you will need to enter in the next screen."
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the Android TV ({name}) to Home Assistant?  It will turn on and a pairing code will be displayed on it that you will need to enter in the next screen.",
                        "title": "Discovered Android TV"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "enable_ime": "Enable IME. Needed for getting the current app. Disable for devices that show 'Use keyboard on mobile device screen' instead of the on screen keyboard."
                        }
                    }
                }
            }
        },
        "anova": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "no_devices_found": "No devices were found. Make sure you have at least one Anova device online.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "cook_time": {
                        "name": "Cook time"
                    },
                    "cook_time_remaining": {
                        "name": "Cook time remaining"
                    },
                    "heater_temperature": {
                        "name": "Heater temperature"
                    },
                    "mode": {
                        "name": "Mode"
                    },
                    "state": {
                        "name": "State"
                    },
                    "target_temperature": {
                        "name": "Target temperature"
                    },
                    "triac_temperature": {
                        "name": "Triac temperature"
                    },
                    "water_temperature": {
                        "name": "Water temperature"
                    }
                }
            }
        },
        "anthemav": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "cannot_receive_deviceinfo": "Failed to retreive MAC Address. Make sure the device is turned on"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            }
        },
        "apcupsd": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_status": "No status is reported from host"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Enter the host and port on which the apcupsd NIS is being served."
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring APC UPS Daemon using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the APC UPS Daemon YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The APC UPS Daemon YAML configuration is being removed"
                }
            }
        },
        "apple_tv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "backoff": "Device does not accept pairing requests at this time (you might have entered an invalid PIN code too many times), try again later.",
                    "device_did_not_pair": "No attempt to finish pairing process was made from the device.",
                    "device_not_found": "Device was not found during discovery, please try adding it again.",
                    "inconsistent_device": "Expected protocols were not found during discovery. This normally indicates a problem with multicast DNS (Zeroconf). Please try adding the device again.",
                    "invalid_auth": "Invalid authentication",
                    "ipv6_not_supported": "IPv6 is not supported.",
                    "no_devices_found": "No devices found on the network",
                    "reauth_successful": "Re-authentication was successful",
                    "setup_failed": "Failed to set up device.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "invalid_auth": "Invalid authentication",
                    "no_devices_found": "No devices found on the network",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({type})",
                "step": {
                    "confirm": {
                        "description": "You are about to add `{name}` of type `{type}` to Home Assistant.\n\n**To complete the process, you may have to enter multiple PIN codes.**\n\nPlease note that you will *not* be able to power off your Apple TV with this integration. Only the media player in Home Assistant will turn off!",
                        "title": "Confirm adding Apple TV"
                    },
                    "pair_no_pin": {
                        "description": "Pairing is required for the `{protocol}` service. Please enter PIN {pin} on your device to continue.",
                        "title": "Pairing"
                    },
                    "pair_with_pin": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Pairing is required for the `{protocol}` protocol. Please enter the PIN code displayed on screen. Leading zeros shall be omitted, i.e. enter 123 if the displayed code is 0123.",
                        "title": "Pairing"
                    },
                    "password": {
                        "description": "A password is required by `{protocol}`. This is not yet supported, please disable password to continue.",
                        "title": "Password required"
                    },
                    "protocol_disabled": {
                        "description": "Pairing is required for `{protocol}` but it is disabled on the device. Please review potential access restrictions (e.g. allow all devices on the local network to connect) on the device.\n\nYou may continue without pairing this protocol, but some functionality will be limited.",
                        "title": "Pairing not possible"
                    },
                    "reconfigure": {
                        "description": "Reconfigure this device to restore its functionality.",
                        "title": "Device reconfiguration"
                    },
                    "service_problem": {
                        "description": "A problem occurred while pairing protocol `{protocol}`. It will be ignored.",
                        "title": "Failed to add service"
                    },
                    "user": {
                        "data": {
                            "device_input": "Device"
                        },
                        "description": "Start by entering the device name (e.g. Kitchen or Bedroom) or IP address of the Apple TV you want to add.\n\nIf you cannot see your device or experience any issues, try specifying the device IP address.",
                        "title": "Set up a new Apple TV"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "start_off": "Do not turn device on when starting Home Assistant"
                        },
                        "description": "Configure general device settings"
                    }
                }
            }
        },
        "application_credentials": {
            "title": "Application Credentials"
        },
        "aranet": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "integrations_diabled": "This device doesn't have integrations enabled. Please enable smart home integrations using the app and try again.",
                    "no_devices_found": "No unconfigured Aranet devices found.",
                    "outdated_version": "This device is using outdated firmware. Please update it to at least v1.2.0 and try again."
                },
                "error": {
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "arcam_fmj": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{host}",
                "step": {
                    "confirm": {
                        "description": "Do you want to add Arcam FMJ on `{host}` to Home Assistant?"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Please enter the host name or IP address of device."
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "turn_on": "{entity_name} was requested to turn on"
                }
            }
        },
        "aseko_pool_live": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "alarm": {
                        "name": "Alarm"
                    },
                    "water_flow": {
                        "name": "Water flow"
                    }
                },
                "sensor": {
                    "air_temperature": {
                        "name": "Air temperature"
                    },
                    "free_chlorine": {
                        "name": "Free chlorine"
                    },
                    "water_temperature": {
                        "name": "Water temperature"
                    }
                }
            }
        },
        "assist_pipeline": {
            "entity": {
                "binary_sensor": {
                    "assist_in_progress": {
                        "name": "Assist in progress"
                    }
                },
                "select": {
                    "pipeline": {
                        "name": "Assist pipeline",
                        "state": {
                            "preferred": "Preferred"
                        }
                    },
                    "vad_sensitivity": {
                        "name": "Finished speaking detection",
                        "state": {
                            "aggressive": "Aggressive",
                            "default": "Default",
                            "relaxed": "Relaxed"
                        }
                    }
                }
            }
        },
        "asuswrt": {
            "config": {
                "abort": {
                    "invalid_unique_id": "Impossible to determine a valid unique id for the device",
                    "no_unique_id": "A device without a valid unique id is already configured. Configuration of multiple instance is not possible"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "pwd_and_ssh": "Only provide password or SSH key file",
                    "pwd_or_ssh": "Please provide password or SSH key file",
                    "ssh_not_file": "SSH key file not found",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "mode": "Mode",
                            "name": "Name",
                            "password": "Password",
                            "port": "Port (leave empty for protocol default)",
                            "protocol": "Communication protocol to use",
                            "ssh_key": "Path to your SSH key file (instead of password)",
                            "username": "Username"
                        },
                        "description": "Set required parameter to connect to your router",
                        "title": "AsusWRT"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "24ghz_temperature": {
                        "name": "2.4GHz Temperature"
                    },
                    "5ghz_temperature": {
                        "name": "5GHz Temperature"
                    },
                    "cpu_temperature": {
                        "name": "CPU Temperature"
                    },
                    "devices_connected": {
                        "name": "Devices connected"
                    },
                    "download": {
                        "name": "Download"
                    },
                    "download_speed": {
                        "name": "Download speed"
                    },
                    "load_avg_15m": {
                        "name": "Average load (15m)"
                    },
                    "load_avg_1m": {
                        "name": "Average load (1m)"
                    },
                    "load_avg_5m": {
                        "name": "Average load (5m)"
                    },
                    "upload": {
                        "name": "Upload"
                    },
                    "upload_speed": {
                        "name": "Upload speed"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "consider_home": "Seconds to wait before considering a device away",
                            "dnsmasq": "The location in the router of the dnsmasq.leases files",
                            "interface": "The interface that you want statistics from (e.g. eth0, eth1 etc)",
                            "require_ip": "Devices must have IP (for access point mode)",
                            "track_unknown": "Track unknown \/ unnamed devices"
                        },
                        "title": "AsusWRT Options"
                    }
                }
            }
        },
        "atag": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unauthorized": "Pairing denied, check device for auth request"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Connect to the device"
                    }
                }
            }
        },
        "august": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_verification_code": "Invalid verification code",
                    "unhandled": "Unhandled error: {error}",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_validate": {
                        "data": {
                            "brand": "Brand",
                            "password": "Password"
                        },
                        "description": "Choose the correct brand for your device, and enter the password for {username}. If you choose the wrong brand, you may be able to authenticate initially; however, you will not be able to operate devices. If you are unsure of the brand, create the integration again and try another brand.",
                        "title": "Reauthenticate an August account"
                    },
                    "user_validate": {
                        "data": {
                            "brand": "Brand",
                            "login_method": "Login Method",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "It is recommended to use the 'email' login method as some brands may not work with the 'phone' method. If the Login Method is 'email', Username is the email address. If the Login Method is 'phone', Username is the phone number in the format '+NNNNNNNNN'. If you choose the wrong brand, you may be able to authenticate initially; however, you will not be able to operate devices. If you are unsure of the brand, create the integration again and try another brand.",
                        "title": "Set up an August account"
                    },
                    "validation": {
                        "data": {
                            "code": "Verification code"
                        },
                        "description": "Please check your {login_method} ({username}) and enter the verification code below. Codes may take a few minutes to arrive.",
                        "title": "Two factor authentication"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "image_capture": {
                        "name": "Image capture"
                    }
                },
                "button": {
                    "wake": {
                        "name": "Wake"
                    }
                },
                "camera": {
                    "camera": {
                        "name": "Camera"
                    }
                },
                "sensor": {
                    "operator": {
                        "name": "Operator"
                    }
                }
            }
        },
        "aurora": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "visibility_alert": {
                        "name": "Visibility alert"
                    }
                },
                "sensor": {
                    "visibility": {
                        "name": "Visibility"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "threshold": "Threshold (%)"
                        }
                    }
                }
            },
            "title": "NOAA Aurora Sensor"
        },
        "aurora_abb_powerone": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_serial_ports": "No com ports found.  Need a valid RS485 device to communicate."
                },
                "error": {
                    "cannot_connect": "Unable to connect, please check serial port, address, electrical connection and that inverter is on (in daylight)",
                    "cannot_open_serial_port": "Cannot open serial port, please check and try again",
                    "invalid_serial_port": "Serial port is not a valid device or could not be openned"
                },
                "step": {
                    "user": {
                        "data": {
                            "address": "Inverter Address",
                            "port": "RS485 or USB-RS485 Adaptor Port"
                        },
                        "description": "The inverter must be connected via an RS485 adaptor, please select serial port and the inverter's address as configured on the LCD panel"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "power_output": {
                        "name": "Power Output"
                    },
                    "total_energy": {
                        "name": "Total Energy"
                    }
                }
            }
        },
        "aussie_broadband": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "no_services_found": "No services were found for this account",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Update password for {username}",
                        "title": "Reauthenticate Integration"
                    },
                    "service": {
                        "data": {
                            "services": "Services"
                        },
                        "title": "Select Services"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "billing_cycle_length": {
                        "name": "Billing cycle length"
                    },
                    "billing_cycle_remaining": {
                        "name": "Billing cycle remaining"
                    },
                    "data_used": {
                        "name": "Data used"
                    },
                    "downloaded": {
                        "name": "Downloaded"
                    },
                    "international_calls": {
                        "name": "International calls"
                    },
                    "mobile_calls": {
                        "name": "Mobile calls"
                    },
                    "national_calls": {
                        "name": "National calls"
                    },
                    "other_calls": {
                        "name": "Other calls"
                    },
                    "sms_sent": {
                        "name": "SMS sent"
                    },
                    "uploaded": {
                        "name": "Uploaded"
                    },
                    "voicemail_calls": {
                        "name": "Voicemail calls"
                    }
                }
            },
            "options": {
                "abort": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "init": {
                        "data": {
                            "services": "Services"
                        },
                        "title": "Select Services"
                    }
                }
            }
        },
        "auth": {
            "mfa_setup": {
                "notify": {
                    "abort": {
                        "no_available_service": "No notification services available."
                    },
                    "error": {
                        "invalid_code": "Invalid code, please try again."
                    },
                    "step": {
                        "init": {
                            "description": "Please select one of the notification services:",
                            "title": "Set up one-time password delivered by notify component"
                        },
                        "setup": {
                            "description": "A one-time password has been sent via **notify.{notify_service}**. Please enter it below:",
                            "title": "Verify setup"
                        }
                    },
                    "title": "Notify One-Time Password"
                },
                "totp": {
                    "error": {
                        "invalid_code": "Invalid code, please try again. If you get this error consistently, please make sure the clock of your Home Assistant system is accurate."
                    },
                    "step": {
                        "init": {
                            "description": "To activate two factor authentication using time-based one-time passwords, scan the QR code with your authentication app. If you don't have one, we recommend either [Google Authenticator](https:\/\/support.google.com\/accounts\/answer\/1066447) or [Authy](https:\/\/authy.com\/).\n\n{qr_code}\n\nAfter scanning the code, enter the six digit code from your app to verify the setup. If you have problems scanning the QR code, do a manual setup with code **`{code}`**.",
                            "title": "Set up two-factor authentication using TOTP"
                        }
                    },
                    "title": "TOTP"
                }
            }
        },
        "automation": {
            "entity_component": {
                "_": {
                    "name": "Automation",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "current": {
                            "name": "Running automations"
                        },
                        "id": {
                            "name": "ID"
                        },
                        "last_triggered": {
                            "name": "Last triggered"
                        },
                        "max": {
                            "name": "Max running automations"
                        },
                        "mode": {
                            "name": "Run mode",
                            "state": {
                                "parallel": "Parallel",
                                "queued": "Queued",
                                "restart": "Restart",
                                "single": "Single"
                            }
                        }
                    }
                }
            },
            "issues": {
                "service_not_found": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The automation \"{name}\" (`{entity_id}`) has an action that calls an unknown service: `{service}`.\n\nThis error prevents the automation from running correctly. Maybe this service is no longer available, or perhaps a typo caused it.\n\nTo fix this error, [edit the automation]({edit}) and remove the action that calls this service.\n\nClick on SUBMIT below to confirm you have fixed this automation.",
                                "title": "{name} uses an unknown service"
                            }
                        }
                    },
                    "title": "{name} uses an unknown service"
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads the automation configuration.",
                    "name": "Reload"
                },
                "toggle": {
                    "description": "Toggles (enable \/ disable) an automation.",
                    "name": "Toggle"
                },
                "trigger": {
                    "description": "Triggers the actions of an automation.",
                    "fields": {
                        "skip_condition": {
                            "description": "Defines whether or not the conditions will be skipped.",
                            "name": "Skip conditions"
                        }
                    },
                    "name": "Trigger"
                },
                "turn_off": {
                    "description": "Disables an automation.",
                    "fields": {
                        "stop_actions": {
                            "description": "Stops currently running actions.",
                            "name": "Stop actions"
                        }
                    },
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Enables an automation.",
                    "name": "Turn on"
                }
            },
            "title": "Automation"
        },
        "awair": {
            "config": {
                "abort": {
                    "already_configured_account": "Account is already configured",
                    "already_configured_device": "Device is already configured",
                    "no_devices_found": "No devices found on the network",
                    "reauth_successful": "Re-authentication was successful",
                    "unreachable": "Failed to connect"
                },
                "error": {
                    "invalid_access_token": "Invalid access token",
                    "unknown": "Unexpected error",
                    "unreachable": "Failed to connect"
                },
                "flow_title": "{model} ({device_id})",
                "step": {
                    "cloud": {
                        "data": {
                            "access_token": "Access Token",
                            "email": "Email"
                        },
                        "description": "You must register for an Awair developer access token at: {url}"
                    },
                    "discovery_confirm": {
                        "description": "Do you want to set up {model} ({device_id})?"
                    },
                    "local": {
                        "description": "Follow [these instructions]({url}) on how to enable the Awair Local API.\n\nClick submit when done."
                    },
                    "local_pick": {
                        "data": {
                            "device": "Device",
                            "host": "IP Address"
                        }
                    },
                    "reauth_confirm": {
                        "data": {
                            "access_token": "Access Token",
                            "email": "Email"
                        },
                        "description": "Please re-enter your Awair developer access token."
                    },
                    "user": {
                        "description": "Pick local for the best experience. Only use cloud if the device is not connected to the same network as Home Assistant, or if you have a legacy device.",
                        "menu_options": {
                            "cloud": "Connect via the cloud",
                            "local": "Connect locally (preferred)"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "score": {
                        "name": "Score"
                    },
                    "sound_level": {
                        "name": "Sound level"
                    }
                }
            }
        },
        "axis": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "link_local_address": "Link local addresses are not supported",
                    "not_axis_device": "Discovered device not an Axis device"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "Set up Axis device"
                    }
                }
            },
            "options": {
                "step": {
                    "configure_stream": {
                        "data": {
                            "stream_profile": "Select stream profile to use"
                        },
                        "title": "Axis device video stream options"
                    }
                }
            }
        },
        "azure_devops": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "project_error": "Could not get project info."
                },
                "flow_title": "{project_url}",
                "step": {
                    "reauth": {
                        "data": {
                            "personal_access_token": "Personal Access Token (PAT)"
                        },
                        "description": "Authentication failed for {project_url}. Please enter your current credentials.",
                        "title": "Reauthentication"
                    },
                    "user": {
                        "data": {
                            "organization": "Organization",
                            "personal_access_token": "Personal Access Token (PAT)",
                            "project": "Project"
                        },
                        "description": "Set up an Azure DevOps instance to access your project. A Personal Access Token is only required for a private project.",
                        "title": "Add Azure DevOps Project"
                    }
                }
            }
        },
        "azure_event_hub": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Connecting with the credentials from the configuration.yaml failed, please remove from yaml and use the config flow.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "unknown": "Connecting with the credentials from the configuration.yaml failed with an unknown error, please remove from yaml and use the config flow."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "conn_string": {
                        "data": {
                            "event_hub_connection_string": "Event Hub Connection String"
                        },
                        "description": "Please enter the connection string for: {event_hub_instance_name}",
                        "title": "Connection String method"
                    },
                    "sas": {
                        "data": {
                            "event_hub_namespace": "Event Hub Namespace",
                            "event_hub_sas_key": "Event Hub SAS Key",
                            "event_hub_sas_policy": "Event Hub SAS Policy"
                        },
                        "description": "Please enter the SAS (shared access signature) credentials for: {event_hub_instance_name}",
                        "title": "SAS Credentials method"
                    },
                    "user": {
                        "data": {
                            "event_hub_instance_name": "Event Hub Instance Name",
                            "use_connection_string": "Use Connection String"
                        },
                        "title": "Set up your Azure Event Hub integration"
                    }
                }
            },
            "options": {
                "step": {
                    "options": {
                        "data": {
                            "send_interval": "Interval between sending batches to the hub."
                        },
                        "title": "Options for the Azure Event Hub."
                    }
                }
            }
        },
        "backup": {
            "services": {
                "create": {
                    "description": "Creates a new backup.",
                    "name": "Create backup"
                }
            }
        },
        "baf": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "ipv6_not_supported": "IPv6 is not supported."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} - {model} ({ip_address})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} - {model} ({ip_address})?"
                    },
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        }
                    }
                }
            },
            "entity": {
                "climate": {
                    "auto_comfort": {
                        "name": "Auto comfort"
                    }
                },
                "number": {
                    "comfort_heat_assist_speed": {
                        "name": "Auto Comfort Heat Assist Speed"
                    },
                    "comfort_max_speed": {
                        "name": "Auto Comfort Maximum Speed"
                    },
                    "comfort_min_speed": {
                        "name": "Auto Comfort Minimum Speed"
                    },
                    "light_auto_motion_timeout": {
                        "name": "Light Motion Sense Timeout"
                    },
                    "light_return_to_auto_timeout": {
                        "name": "Light Return to Auto Timeout"
                    },
                    "motion_sense_timeout": {
                        "name": "Motion Sense Timeout"
                    },
                    "return_to_auto_timeout": {
                        "name": "Return to Auto Timeout"
                    }
                },
                "sensor": {
                    "current_rpm": {
                        "name": "Current RPM"
                    },
                    "ip_address": {
                        "name": "IP Address"
                    },
                    "target_rpm": {
                        "name": "Target RPM"
                    },
                    "wifi_ssid": {
                        "name": "Wi-Fi SSID"
                    }
                },
                "switch": {
                    "comfort_heat_assist_enable": {
                        "name": "Auto Comfort Heat Assist"
                    },
                    "eco_enable": {
                        "name": "Eco Mode"
                    },
                    "fan_beep_enable": {
                        "name": "Beep"
                    },
                    "led_indicators_enable": {
                        "name": "Led Indicators"
                    },
                    "legacy_ir_remote_enable": {
                        "name": "Legacy IR Remote"
                    },
                    "light_dim_to_warm_enable": {
                        "name": "Dim to Warm"
                    },
                    "light_return_to_auto_enable": {
                        "name": "Light Return to Auto"
                    },
                    "motion_sense_enable": {
                        "name": "Motion Sense"
                    },
                    "return_to_auto_enable": {
                        "name": "Return to Auto"
                    },
                    "whoosh_enable": {
                        "name": "Whoosh"
                    }
                }
            }
        },
        "balboa": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "title": "Connect to the Balboa Wi-Fi device"
                    }
                }
            },
            "entity": {
                "climate": {
                    "balboa": {
                        "state_attributes": {
                            "preset_mode": {
                                "state": {
                                    "ready": "Ready",
                                    "ready_in_rest": "Ready-in-rest",
                                    "rest": "Rest"
                                }
                            }
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "sync_time": "Keep your Balboa spa's time synchronized with Home Assistant"
                        }
                    }
                }
            }
        },
        "bayesian": {
            "issues": {
                "manual_migration": {
                    "description": "The Bayesian integration now also updates the probability if the observed `to_state`, `above`, `below`, or `value_template` evaluates to `False` rather than only `True`. So it is no longer required to have duplicate, complementary entries for each binary state. Please remove the mirrored entry for `{entity}`.",
                    "title": "Manual YAML fix required for Bayesian"
                },
                "no_prob_given_false": {
                    "description": "In the Bayesian integration `prob_given_false` is now a required configuration variable as there was no mathematical rationale for the previous default value. Please add this to your `configuration.yml` for `bayesian\/{entity}`. These observations will be ignored until you do.",
                    "title": "Manual YAML addition required for Bayesian"
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads bayesian sensors from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "binary_sensor": {
            "device_automation": {
                "condition_type": {
                    "is_bat_low": "{entity_name} battery is low",
                    "is_charging": "{entity_name} is charging",
                    "is_co": "{entity_name} is detecting carbon monoxide",
                    "is_cold": "{entity_name} is cold",
                    "is_connected": "{entity_name} is connected",
                    "is_gas": "{entity_name} is detecting gas",
                    "is_hot": "{entity_name} is hot",
                    "is_light": "{entity_name} is detecting light",
                    "is_locked": "{entity_name} is locked",
                    "is_moist": "{entity_name} is moist",
                    "is_motion": "{entity_name} is detecting motion",
                    "is_moving": "{entity_name} is moving",
                    "is_no_co": "{entity_name} is not detecting carbon monoxide",
                    "is_no_gas": "{entity_name} is not detecting gas",
                    "is_no_light": "{entity_name} is not detecting light",
                    "is_no_motion": "{entity_name} is not detecting motion",
                    "is_no_problem": "{entity_name} is not detecting problem",
                    "is_no_smoke": "{entity_name} is not detecting smoke",
                    "is_no_sound": "{entity_name} is not detecting sound",
                    "is_no_update": "{entity_name} is up-to-date",
                    "is_no_vibration": "{entity_name} is not detecting vibration",
                    "is_not_bat_low": "{entity_name} battery is normal",
                    "is_not_charging": "{entity_name} is not charging",
                    "is_not_cold": "{entity_name} is not cold",
                    "is_not_connected": "{entity_name} is disconnected",
                    "is_not_hot": "{entity_name} is not hot",
                    "is_not_locked": "{entity_name} is unlocked",
                    "is_not_moist": "{entity_name} is dry",
                    "is_not_moving": "{entity_name} is not moving",
                    "is_not_occupied": "{entity_name} is not occupied",
                    "is_not_open": "{entity_name} is closed",
                    "is_not_plugged_in": "{entity_name} is unplugged",
                    "is_not_powered": "{entity_name} is not powered",
                    "is_not_present": "{entity_name} is not present",
                    "is_not_running": "{entity_name} is not running",
                    "is_not_tampered": "{entity_name} is not detecting tampering",
                    "is_not_unsafe": "{entity_name} is safe",
                    "is_occupied": "{entity_name} is occupied",
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on",
                    "is_open": "{entity_name} is open",
                    "is_plugged_in": "{entity_name} is plugged in",
                    "is_powered": "{entity_name} is powered",
                    "is_present": "{entity_name} is present",
                    "is_problem": "{entity_name} is detecting problem",
                    "is_running": "{entity_name} is running",
                    "is_smoke": "{entity_name} is detecting smoke",
                    "is_sound": "{entity_name} is detecting sound",
                    "is_tampered": "{entity_name} is detecting tampering",
                    "is_unsafe": "{entity_name} is unsafe",
                    "is_update": "{entity_name} has an update available",
                    "is_vibration": "{entity_name} is detecting vibration"
                },
                "trigger_type": {
                    "bat_low": "{entity_name} battery low",
                    "charging": "{entity_name} charging",
                    "co": "{entity_name} started detecting carbon monoxide",
                    "cold": "{entity_name} became cold",
                    "connected": "{entity_name} connected",
                    "gas": "{entity_name} started detecting gas",
                    "hot": "{entity_name} became hot",
                    "light": "{entity_name} started detecting light",
                    "locked": "{entity_name} locked",
                    "moist": "{entity_name} became moist",
                    "motion": "{entity_name} started detecting motion",
                    "moving": "{entity_name} started moving",
                    "no_co": "{entity_name} stopped detecting carbon monoxide",
                    "no_gas": "{entity_name} stopped detecting gas",
                    "no_light": "{entity_name} stopped detecting light",
                    "no_motion": "{entity_name} stopped detecting motion",
                    "no_problem": "{entity_name} stopped detecting problem",
                    "no_smoke": "{entity_name} stopped detecting smoke",
                    "no_sound": "{entity_name} stopped detecting sound",
                    "no_update": "{entity_name} became up-to-date",
                    "no_vibration": "{entity_name} stopped detecting vibration",
                    "not_bat_low": "{entity_name} battery normal",
                    "not_charging": "{entity_name} not charging",
                    "not_cold": "{entity_name} became not cold",
                    "not_connected": "{entity_name} disconnected",
                    "not_hot": "{entity_name} became not hot",
                    "not_locked": "{entity_name} unlocked",
                    "not_moist": "{entity_name} became dry",
                    "not_moving": "{entity_name} stopped moving",
                    "not_occupied": "{entity_name} became not occupied",
                    "not_opened": "{entity_name} closed",
                    "not_plugged_in": "{entity_name} unplugged",
                    "not_powered": "{entity_name} not powered",
                    "not_present": "{entity_name} not present",
                    "not_running": "{entity_name} is no longer running",
                    "not_tampered": "{entity_name} stopped detecting tampering",
                    "not_unsafe": "{entity_name} became safe",
                    "occupied": "{entity_name} became occupied",
                    "opened": "{entity_name} opened",
                    "plugged_in": "{entity_name} plugged in",
                    "powered": "{entity_name} powered",
                    "present": "{entity_name} present",
                    "problem": "{entity_name} started detecting problem",
                    "running": "{entity_name} started running",
                    "smoke": "{entity_name} started detecting smoke",
                    "sound": "{entity_name} started detecting sound",
                    "tampered": "{entity_name} started detecting tampering",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on",
                    "unsafe": "{entity_name} became unsafe",
                    "update": "{entity_name} got an update available",
                    "vibration": "{entity_name} started detecting vibration"
                }
            },
            "device_class": {
                "co": "carbon monoxide",
                "cold": "cold",
                "gas": "gas",
                "heat": "heat",
                "moisture": "moisture",
                "motion": "motion",
                "occupancy": "occupancy",
                "power": "power",
                "problem": "problem",
                "smoke": "smoke",
                "sound": "sound",
                "vibration": "vibration"
            },
            "entity_component": {
                "_": {
                    "name": "Binary sensor",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    }
                },
                "battery": {
                    "name": "Battery",
                    "state": {
                        "off": "Normal",
                        "on": "Low"
                    }
                },
                "battery_charging": {
                    "name": "Charging",
                    "state": {
                        "off": "Not charging",
                        "on": "Charging"
                    }
                },
                "carbon_monoxide": {
                    "name": "Carbon monoxide",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "cold": {
                    "name": "Cold",
                    "state": {
                        "off": "Normal",
                        "on": "Cold"
                    }
                },
                "connectivity": {
                    "name": "Connectivity",
                    "state": {
                        "off": "Disconnected",
                        "on": "Connected"
                    }
                },
                "door": {
                    "name": "Door",
                    "state": {
                        "off": "Closed",
                        "on": "Open"
                    }
                },
                "garage_door": {
                    "name": "Garage door",
                    "state": {
                        "off": "Closed",
                        "on": "Open"
                    }
                },
                "gas": {
                    "name": "Gas",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "heat": {
                    "name": "Heat",
                    "state": {
                        "off": "Normal",
                        "on": "Hot"
                    }
                },
                "light": {
                    "name": "Light",
                    "state": {
                        "off": "No light",
                        "on": "Light detected"
                    }
                },
                "lock": {
                    "name": "Lock",
                    "state": {
                        "off": "Locked",
                        "on": "Unlocked"
                    }
                },
                "moisture": {
                    "name": "Moisture",
                    "state": {
                        "off": "Dry",
                        "on": "Wet"
                    }
                },
                "motion": {
                    "name": "Motion",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "moving": {
                    "name": "Moving",
                    "state": {
                        "off": "Not moving",
                        "on": "Moving"
                    }
                },
                "occupancy": {
                    "name": "Occupancy",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "opening": {
                    "name": "Opening",
                    "state": {
                        "off": "Closed",
                        "on": "Open"
                    }
                },
                "plug": {
                    "name": "Plug",
                    "state": {
                        "off": "Unplugged",
                        "on": "Plugged in"
                    }
                },
                "power": {
                    "name": "Power",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "presence": {
                    "name": "Presence",
                    "state": {
                        "off": "Away",
                        "on": "Home"
                    }
                },
                "problem": {
                    "name": "Problem",
                    "state": {
                        "off": "OK",
                        "on": "Problem"
                    }
                },
                "running": {
                    "name": "Running",
                    "state": {
                        "off": "Not running",
                        "on": "Running"
                    }
                },
                "safety": {
                    "name": "Safety",
                    "state": {
                        "off": "Safe",
                        "on": "Unsafe"
                    }
                },
                "smoke": {
                    "name": "Smoke",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "sound": {
                    "name": "Sound",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "tamper": {
                    "name": "Tamper",
                    "state": {
                        "off": "Clear",
                        "on": "Tampering detected"
                    }
                },
                "update": {
                    "name": "Update",
                    "state": {
                        "off": "Up-to-date",
                        "on": "Update available"
                    }
                },
                "vibration": {
                    "name": "Vibration",
                    "state": {
                        "off": "Clear",
                        "on": "Detected"
                    }
                },
                "window": {
                    "name": "Window",
                    "state": {
                        "off": "Closed",
                        "on": "Open"
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "title": "Binary sensor"
        },
        "blackbird": {
            "services": {
                "set_all_zones": {
                    "description": "Sets all Blackbird zones to a single source.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of any blackbird zone.",
                            "name": "Entity"
                        },
                        "source": {
                            "description": "Name of source to switch to.",
                            "name": "Source"
                        }
                    },
                    "name": "Set all zones"
                }
            }
        },
        "blebox": {
            "config": {
                "abort": {
                    "address_already_configured": "A BleBox device is already configured at {address}.",
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error",
                    "unsupported_version": "BleBox device has outdated firmware. Please upgrade it first."
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "IP Address",
                            "port": "Port"
                        },
                        "description": "Set up your BleBox to integrate with Home Assistant.",
                        "title": "Set up your BleBox device"
                    }
                }
            }
        },
        "blink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_access_token": "Invalid access token",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "2fa": {
                        "data": {
                            "2fa": "Two-factor code"
                        },
                        "description": "Enter the PIN sent via email or SMS",
                        "title": "Two-factor authentication"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Sign-in with Blink account"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "camera_armed": {
                        "name": "Camera armed"
                    }
                },
                "sensor": {
                    "wifi_rssi": {
                        "name": "Wi-Fi RSSI"
                    }
                }
            },
            "options": {
                "step": {
                    "simple_options": {
                        "data": {
                            "scan_interval": "Scan Interval (seconds)"
                        },
                        "description": "Configure Blink integration",
                        "title": "Blink options"
                    }
                }
            },
            "services": {
                "blink_update": {
                    "description": "Forces a refresh.",
                    "name": "Update"
                },
                "save_recent_clips": {
                    "description": "Saves all recent video clips to local directory with file pattern \"%Y%m%d_%H%M%S_{name}.mp4\".",
                    "fields": {
                        "file_path": {
                            "description": "Directory name of writable path (directory may need to be included in allowlist_external_dirs in config).",
                            "name": "Output directory"
                        },
                        "name": {
                            "description": "Name of camera to grab recent clips from.",
                            "name": "Name"
                        }
                    },
                    "name": "Save recent clips"
                },
                "save_video": {
                    "description": "Saves last recorded video clip to local file.",
                    "fields": {
                        "filename": {
                            "description": "Filename to writable path (directory may need to be included in allowlist_external_dirs in config).",
                            "name": "File name"
                        },
                        "name": {
                            "description": "Name of camera to grab video from.",
                            "name": "Name"
                        }
                    },
                    "name": "Save video"
                },
                "send_pin": {
                    "description": "Sends a new PIN to blink for 2FA.",
                    "fields": {
                        "pin": {
                            "description": "PIN received from blink. Leave empty if you only received a verification email.",
                            "name": "Pin"
                        }
                    },
                    "name": "Send pin"
                },
                "trigger_camera": {
                    "description": "Requests camera to take new image.",
                    "name": "Trigger camera"
                }
            }
        },
        "bluemaestro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "bluesound": {
            "services": {
                "clear_sleep_timer": {
                    "description": "Clear a Bluesound timer.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities that will have the timer cleared.",
                            "name": "Entity"
                        }
                    },
                    "name": "Clear sleep timer"
                },
                "join": {
                    "description": "Group player together.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will coordinate the grouping. Platform dependent.",
                            "name": "Entity"
                        },
                        "master": {
                            "description": "Entity ID of the player that should become the master of the group.",
                            "name": "Master"
                        }
                    },
                    "name": "Join"
                },
                "set_sleep_timer": {
                    "description": "Set a Bluesound timer. It will increase timer in steps: 15, 30, 45, 60, 90, 0.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities that will have a timer set.",
                            "name": "Entity"
                        }
                    },
                    "name": "Set sleep timer"
                },
                "unjoin": {
                    "description": "Unjoin the player from a group.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will be unjoined from their group. Platform dependent.",
                            "name": "Entity"
                        }
                    },
                    "name": "Unjoin"
                }
            }
        },
        "bluetooth": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "no_adapters": "No unconfigured Bluetooth adapters found. There are {ignored_adapters} ignored adapters."
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "multiple_adapters": {
                        "data": {
                            "adapter": "Adapter"
                        },
                        "description": "Select a Bluetooth adapter to set up"
                    },
                    "single_adapter": {
                        "description": "Do you want to set up the Bluetooth adapter {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "issues": {
                "haos_outdated": {
                    "description": "To improve Bluetooth reliability and performance, we highly recommend you update to version 9.0 or later of the Home Assistant Operating System.",
                    "title": "Update to Home Assistant Operating System 9.0 or later"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "passive": "Passive scanning"
                        }
                    }
                }
            }
        },
        "bluetooth_tracker": {
            "services": {
                "update": {
                    "description": "Triggers manual tracker update.",
                    "name": "Update"
                }
            }
        },
        "bmw_connected_drive": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "region": "ConnectedDrive Region",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "charging_status": {
                        "name": "Charging status"
                    },
                    "check_control_messages": {
                        "name": "Check control messages"
                    },
                    "condition_based_services": {
                        "name": "Condition based services"
                    },
                    "connection_status": {
                        "name": "Connection status"
                    },
                    "door_lock_state": {
                        "name": "Door lock state"
                    },
                    "is_pre_entry_climatization_enabled": {
                        "name": "Pre entry climatization"
                    },
                    "lids": {
                        "name": "Lids"
                    },
                    "windows": {
                        "name": "Windows"
                    }
                },
                "button": {
                    "activate_air_conditioning": {
                        "name": "Activate air conditioning"
                    },
                    "find_vehicle": {
                        "name": "Find vehicle"
                    },
                    "light_flash": {
                        "name": "Flash lights"
                    },
                    "refresh": {
                        "name": "Refresh from cloud"
                    },
                    "sound_horn": {
                        "name": "Sound horn"
                    }
                },
                "lock": {
                    "lock": {
                        "name": "Lock"
                    }
                },
                "number": {
                    "target_soc": {
                        "name": "Target SoC"
                    }
                },
                "select": {
                    "ac_limit": {
                        "name": "AC Charging Limit"
                    },
                    "charging_mode": {
                        "name": "Charging Mode"
                    }
                },
                "sensor": {
                    "ac_current_limit": {
                        "name": "AC current limit"
                    },
                    "charging_end_time": {
                        "name": "Charging end time"
                    },
                    "charging_start_time": {
                        "name": "Charging start time"
                    },
                    "charging_status": {
                        "name": "Charging status"
                    },
                    "charging_target": {
                        "name": "Charging target"
                    },
                    "mileage": {
                        "name": "Mileage"
                    },
                    "remaining_battery_percent": {
                        "name": "Remaining battery percent"
                    },
                    "remaining_fuel": {
                        "name": "Remaining fuel"
                    },
                    "remaining_fuel_percent": {
                        "name": "Remaining fuel percent"
                    },
                    "remaining_range_electric": {
                        "name": "Remaining range electric"
                    },
                    "remaining_range_fuel": {
                        "name": "Remaining range fuel"
                    },
                    "remaining_range_total": {
                        "name": "Remaining range total"
                    }
                },
                "switch": {
                    "charging": {
                        "name": "Charging"
                    },
                    "climate": {
                        "name": "Climate"
                    }
                }
            },
            "options": {
                "step": {
                    "account_options": {
                        "data": {
                            "read_only": "Read-only (only sensors and notify, no execution of services, no lock)"
                        }
                    }
                }
            }
        },
        "bond": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "old_firmware": "Unsupported old firmware on the Bond device - please upgrade before continuing",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "confirm": {
                        "data": {
                            "access_token": "Access Token"
                        },
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "access_token": "Access Token",
                            "host": "Host"
                        }
                    }
                }
            },
            "services": {
                "set_fan_speed_tracked_state": {
                    "description": "Sets the tracked fan speed for a bond fan.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to set the tracked fan speed.",
                            "name": "Entity"
                        },
                        "speed": {
                            "description": "Fan Speed as %.",
                            "name": "Fan Speed"
                        }
                    },
                    "name": "Set fan speed tracked state"
                },
                "set_light_brightness_tracked_state": {
                    "description": "Sets the tracked brightness state of a bond light.",
                    "fields": {
                        "brightness": {
                            "description": "Brightness.",
                            "name": "Brightness"
                        },
                        "entity_id": {
                            "description": "Name(s) of entities to set the tracked brightness state of.",
                            "name": "Entity"
                        }
                    },
                    "name": "Set light brightness tracked state"
                },
                "set_light_power_tracked_state": {
                    "description": "Sets the tracked power state of a bond light.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to set the tracked power state of.",
                            "name": "Entity"
                        },
                        "power_state": {
                            "description": "Power state.",
                            "name": "Power state"
                        }
                    },
                    "name": "Set light power tracked state"
                },
                "set_switch_power_tracked_state": {
                    "description": "Sets the tracked power state of a bond switch.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to set the tracked power state of.",
                            "name": "Entity"
                        },
                        "power_state": {
                            "description": "Power state.",
                            "name": "Power state"
                        }
                    },
                    "name": "Set switch power tracked state"
                },
                "start_decreasing_brightness": {
                    "description": "Start decreasing the brightness of the light. (deprecated).",
                    "name": "Start decreasing brightness"
                },
                "start_increasing_brightness": {
                    "description": "Start increasing the brightness of the light. (deprecated).",
                    "name": "Start increasing brightness"
                },
                "stop": {
                    "description": "Stop any in-progress action and empty the queue. (deprecated).",
                    "name": "Stop"
                }
            }
        },
        "bosch_shc": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "pairing_failed": "Pairing failed; please check the Bosch Smart Home Controller is in pairing mode (LED flashing) as well as your password is correct.",
                    "session_error": "Session error: API return Non-OK result.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "Bosch SHC: {name}",
                "step": {
                    "confirm_discovery": {
                        "description": "Smart Home Controller I: Please press the front-side button until LED starts flashing.\nSmart Home Controller II: Press the function button shortly. Cloud and network lights start blinking orange.\nDevice is now ready to be paired.\n\nReady to continue to set up {model} @ {host} with Home Assistant?"
                    },
                    "credentials": {
                        "data": {
                            "password": "Password"
                        },
                        "data_description": {
                            "password": "Password of the Smart Home Controller"
                        }
                    },
                    "reauth_confirm": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "The bosch_shc integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Set up your Bosch Smart Home Controller to allow monitoring and control with Home Assistant.",
                        "title": "SHC authentication parameters"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_quality": {
                        "name": "Air quality"
                    },
                    "communication_quality": {
                        "name": "Communication quality"
                    },
                    "humidity_rating": {
                        "name": "Humidity rating"
                    },
                    "purity": {
                        "name": "Purity"
                    },
                    "purity_rating": {
                        "name": "Purity rating"
                    },
                    "temperature_rating": {
                        "name": "Temperature rating"
                    },
                    "valvetappet": {
                        "name": "Valvetappet"
                    }
                },
                "switch": {
                    "routing": {
                        "name": "Routing"
                    }
                }
            }
        },
        "braviatv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_ip_control": "IP Control is disabled on your TV or the TV is not supported.",
                    "not_bravia_device": "The device is not a Bravia TV.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_host": "Invalid hostname or IP address",
                    "unsupported_model": "Your TV model is not supported."
                },
                "step": {
                    "authorize": {
                        "data": {
                            "use_psk": "Use PSK authentication"
                        },
                        "description": "Make sure that «Control remotely» is enabled on your TV, go to: \nSettings -> Network -> Remote device settings -> Control remotely. \n\nThere are two authorization methods: PIN code or PSK (Pre-Shared Key). \nAuthorization via PSK is recommended as more stable.",
                        "title": "Authorize Sony Bravia TV"
                    },
                    "confirm": {
                        "description": "Do you want to start setup?"
                    },
                    "pin": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Enter the PIN code shown on the Sony Bravia TV. \n\nIf the PIN code is not shown, you have to unregister Home Assistant on your TV, go to: Settings -> Network -> Remote device settings -> Deregister remote device.",
                        "title": "Authorize Sony Bravia TV"
                    },
                    "psk": {
                        "data": {
                            "pin": "PSK"
                        },
                        "description": "To set up PSK on your TV, go to: Settings -> Network -> Home Network Setup -> IP Control. Set «Authentication» to «Normal and Pre-Shared Key» or «Pre-Shared Key» and define your Pre-Shared-Key string (e.g. sony). \n\nThen enter your PSK here.",
                        "title": "Authorize Sony Bravia TV"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Ensure that your TV is turned on before trying to set it up."
                    }
                }
            },
            "entity": {
                "button": {
                    "restart": {
                        "name": "Restart"
                    },
                    "terminate_apps": {
                        "name": "Terminate apps"
                    }
                }
            }
        },
        "broadlink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "not_supported": "Device not supported",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({model} at {host})",
                "step": {
                    "auth": {
                        "title": "Authenticate to the device"
                    },
                    "finish": {
                        "data": {
                            "name": "Name"
                        },
                        "title": "Choose a name for the device"
                    },
                    "reset": {
                        "description": "{name} ({model} at {host}) is locked. You need to unlock the device in order to authenticate and complete the configuration. Instructions:\n1. Open the Broadlink app.\n2. Click on the device.\n3. Click `...` in the upper right.\n4. Scroll to the bottom of the page.\n5. Disable the lock.",
                        "title": "Unlock the device"
                    },
                    "unlock": {
                        "data": {
                            "unlock": "Yes, do it."
                        },
                        "description": "{name} ({model} at {host}) is locked. This can lead to authentication problems in Home Assistant. Would you like to unlock it?",
                        "title": "Unlock the device (optional)"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "timeout": "Timeout"
                        },
                        "title": "Connect to the device"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_quality": {
                        "name": "Air quality index"
                    },
                    "current": {
                        "name": "Current"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "light": {
                        "name": "Illuminance"
                    },
                    "noise": {
                        "name": "Noise"
                    },
                    "overload": {
                        "name": "Overload"
                    },
                    "power": {
                        "name": "Power"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "total_consumption": {
                        "name": "Total consumption"
                    },
                    "voltage": {
                        "name": "Voltage"
                    }
                }
            }
        },
        "brother": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "unsupported_model": "This printer model is not supported."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "snmp_error": "SNMP server turned off or printer not supported.",
                    "wrong_host": "Invalid hostname or IP address."
                },
                "flow_title": "{model} {serial_number}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "type": "Type of the printer"
                        }
                    },
                    "zeroconf_confirm": {
                        "data": {
                            "type": "Type of the printer"
                        },
                        "description": "Do you want to add the printer {model} with serial number `{serial_number}` to Home Assistant?",
                        "title": "Discovered Brother Printer"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "belt_unit_remaining_life": {
                        "name": "Belt unit remaining lifetime"
                    },
                    "black_drum_page_counter": {
                        "name": "Black drum page counter"
                    },
                    "black_drum_remaining_life": {
                        "name": "Black drum remaining lifetime"
                    },
                    "black_drum_remaining_pages": {
                        "name": "Black drum remaining pages"
                    },
                    "black_ink_remaining": {
                        "name": "Black ink remaining"
                    },
                    "black_toner_remaining": {
                        "name": "Black toner remaining"
                    },
                    "bw_pages": {
                        "name": "B\/W pages"
                    },
                    "color_pages": {
                        "name": "Color pages"
                    },
                    "cyan_drum_page_counter": {
                        "name": "Cyan drum page counter"
                    },
                    "cyan_drum_remaining_life": {
                        "name": "Cyan drum remaining lifetime"
                    },
                    "cyan_drum_remaining_pages": {
                        "name": "Cyan drum remaining pages"
                    },
                    "cyan_ink_remaining": {
                        "name": "Cyan ink remaining"
                    },
                    "cyan_toner_remaining": {
                        "name": "Cyan toner remaining"
                    },
                    "drum_page_counter": {
                        "name": "Drum page counter"
                    },
                    "drum_remaining_life": {
                        "name": "Drum remaining lifetime"
                    },
                    "drum_remaining_pages": {
                        "name": "Drum remaining pages"
                    },
                    "duplex_unit_page_counter": {
                        "name": "Duplex unit page counter"
                    },
                    "fuser_remaining_life": {
                        "name": "Fuser remaining lifetime"
                    },
                    "laser_remaining_life": {
                        "name": "Laser remaining lifetime"
                    },
                    "last_restart": {
                        "name": "Last restart"
                    },
                    "magenta_drum_page_counter": {
                        "name": "Magenta drum page counter"
                    },
                    "magenta_drum_remaining_life": {
                        "name": "Magenta drum remaining lifetime"
                    },
                    "magenta_drum_remaining_pages": {
                        "name": "Magenta drum remaining pages"
                    },
                    "magenta_ink_remaining": {
                        "name": "Magenta ink remaining"
                    },
                    "magenta_toner_remaining": {
                        "name": "Magenta toner remaining"
                    },
                    "page_counter": {
                        "name": "Page counter"
                    },
                    "pf_kit_1_remaining_life": {
                        "name": "PF Kit 1 remaining lifetime"
                    },
                    "pf_kit_mp_remaining_life": {
                        "name": "PF Kit MP remaining lifetime"
                    },
                    "status": {
                        "name": "Status"
                    },
                    "yellow_drum_page_counter": {
                        "name": "Yellow drum page counter"
                    },
                    "yellow_drum_remaining_life": {
                        "name": "Yellow drum remaining lifetime"
                    },
                    "yellow_drum_remaining_pages": {
                        "name": "Yellow drum remaining pages"
                    },
                    "yellow_ink_remaining": {
                        "name": "Yellow ink remaining"
                    },
                    "yellow_toner_remaining": {
                        "name": "Yellow toner remaining"
                    }
                }
            }
        },
        "brottsplatskartan": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "area": "Area",
                            "location": "Location"
                        },
                        "data_description": {
                            "area": "If area is selected, any marked location is ignored",
                            "location": "Put marker on location to cover within 5km radius"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Brottsplatskartan using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Brottsplatskartan YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Brottsplatskartan YAML configuration is being removed"
                }
            },
            "selector": {
                "areas": {
                    "options": {
                        "none": "No area"
                    }
                }
            }
        },
        "browser": {
            "services": {
                "browse_url": {
                    "description": "Opens a URL in the default browser on the host machine of Home Assistant.",
                    "fields": {
                        "url": {
                            "description": "The URL to open.",
                            "name": "URL"
                        }
                    },
                    "name": "Browse"
                }
            }
        },
        "brunt": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please reenter the password for: {username}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Set up your Brunt integration"
                    }
                }
            }
        },
        "bsblan": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "passkey": "Passkey string",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "description": "Set up your BSB-Lan device to integrate with Home Assistant.",
                        "title": "Connect to the BSB-Lan device"
                    }
                }
            }
        },
        "bthome": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "decryption_failed": "The provided bindkey did not work, sensor data could not be decrypted. Please check it and try again.",
                    "expected_32_characters": "Expected a 32 character hexadecimal bindkey."
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "get_encryption_key": {
                        "data": {
                            "bindkey": "Bindkey"
                        },
                        "description": "The sensor data broadcast by the sensor is encrypted. In order to decrypt it we need a 32 character hexadecimal bindkey."
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "double_press": "Double Press",
                    "long_double_press": "Long Double Press",
                    "long_press": "Long Press",
                    "long_triple_press": "Long Triple Press",
                    "press": "Press",
                    "rotate_left": "Rotate Left",
                    "rotate_right": "Rotate Right",
                    "triple_press": "Triple Press"
                },
                "trigger_type": {
                    "button": "Button \"{subtype}\"",
                    "dimmer": "Dimmer \"{subtype}\""
                }
            }
        },
        "buienradar": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "already_configured": "Location is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "barometerfc": {
                        "name": "Barometer value"
                    },
                    "barometerfcname": {
                        "name": "Barometer"
                    },
                    "barometerfcnamenl": {
                        "name": "Barometer"
                    },
                    "condition": {
                        "name": "Condition",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "lightning": "Lightning",
                            "rainy": "Rainy",
                            "snowy": "Snowy"
                        }
                    },
                    "condition_1d": {
                        "name": "Condition 1d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "lightning": "Lightning",
                            "rainy": "Rainy",
                            "snowy": "Snowy"
                        }
                    },
                    "condition_2d": {
                        "name": "Condition 2d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "lightning": "Lightning",
                            "rainy": "Rainy",
                            "snowy": "Snowy"
                        }
                    },
                    "condition_3d": {
                        "name": "Condition 3d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "lightning": "Lightning",
                            "rainy": "Rainy",
                            "snowy": "Snowy"
                        }
                    },
                    "condition_4d": {
                        "name": "Condition 4d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "lightning": "Lightning",
                            "rainy": "Rainy",
                            "snowy": "Snowy"
                        }
                    },
                    "condition_5d": {
                        "name": "Condition 5d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "lightning": "Lightning",
                            "rainy": "Rainy",
                            "snowy": "Snowy"
                        }
                    },
                    "conditioncode": {
                        "name": "Condition code"
                    },
                    "conditioncode_1d": {
                        "name": "Condition code 1d"
                    },
                    "conditioncode_2d": {
                        "name": "Condition code 2d"
                    },
                    "conditioncode_3d": {
                        "name": "Condition code 3d"
                    },
                    "conditioncode_4d": {
                        "name": "Condition code 4d"
                    },
                    "conditioncode_5d": {
                        "name": "Condition code 5d"
                    },
                    "conditiondetailed": {
                        "name": "Detailed condition",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "light-rain": "Light rain",
                            "light-snow": "Light snow",
                            "lightning": "Lightning",
                            "partlycloudy": "Partly cloudy",
                            "partlycloudy-fog": "Partly cloudy, fog",
                            "partlycloudy-light-rain": "Partly cloudy, light rain",
                            "partlycloudy-light-snow": "Partly cloudy, light snow",
                            "partlycloudy-lightning": "Partly cloudy, lightning",
                            "partlycloudy-rain": "Partly cloudy, rain",
                            "partlycloudy-snow": "Partly cloudy, snow",
                            "rainy": "Rainy",
                            "snowy": "Snowy",
                            "snowy-rainy": "Snowy, rainy"
                        }
                    },
                    "conditiondetailed_1d": {
                        "name": "Detailed condition 1d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "light-rain": "Light rain",
                            "light-snow": "Light snow",
                            "lightning": "Lightning",
                            "partlycloudy": "Partly cloudy",
                            "partlycloudy-fog": "Partly cloudy, fog",
                            "partlycloudy-light-rain": "Partly cloudy, light rain",
                            "partlycloudy-light-snow": "Partly cloudy, light snow",
                            "partlycloudy-lightning": "Partly cloudy, lightning",
                            "partlycloudy-rain": "Partly cloudy, rain",
                            "partlycloudy-snow": "Partly cloudy, snow",
                            "rainy": "Rainy",
                            "snowy": "Snowy",
                            "snowy-rainy": "Snowy, rainy"
                        }
                    },
                    "conditiondetailed_2d": {
                        "name": "Detailed condition 2d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "light-rain": "Light rain",
                            "light-snow": "Light snow",
                            "lightning": "Lightning",
                            "partlycloudy": "Partly cloudy",
                            "partlycloudy-fog": "Partly cloudy, fog",
                            "partlycloudy-light-rain": "Partly cloudy, light rain",
                            "partlycloudy-light-snow": "Partly cloudy, light snow",
                            "partlycloudy-lightning": "Partly cloudy, lightning",
                            "partlycloudy-rain": "Partly cloudy, rain",
                            "partlycloudy-snow": "Partly cloudy, snow",
                            "rainy": "Rainy",
                            "snowy": "Snowy",
                            "snowy-rainy": "Snowy, rainy"
                        }
                    },
                    "conditiondetailed_3d": {
                        "name": "Detailed condition 3d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "light-rain": "Light rain",
                            "light-snow": "Light snow",
                            "lightning": "Lightning",
                            "partlycloudy": "Partly cloudy",
                            "partlycloudy-fog": "Partly cloudy, fog",
                            "partlycloudy-light-rain": "Partly cloudy, light rain",
                            "partlycloudy-light-snow": "Partly cloudy, light snow",
                            "partlycloudy-lightning": "Partly cloudy, lightning",
                            "partlycloudy-rain": "Partly cloudy, rain",
                            "partlycloudy-snow": "Partly cloudy, snow",
                            "rainy": "Rainy",
                            "snowy": "Snowy",
                            "snowy-rainy": "Snowy, rainy"
                        }
                    },
                    "conditiondetailed_4d": {
                        "name": "Detailed condition 4d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "light-rain": "Light rain",
                            "light-snow": "Light snow",
                            "lightning": "Lightning",
                            "partlycloudy": "Partly cloudy",
                            "partlycloudy-fog": "Partly cloudy, fog",
                            "partlycloudy-light-rain": "Partly cloudy, light rain",
                            "partlycloudy-light-snow": "Partly cloudy, light snow",
                            "partlycloudy-lightning": "Partly cloudy, lightning",
                            "partlycloudy-rain": "Partly cloudy, rain",
                            "partlycloudy-snow": "Partly cloudy, snow",
                            "rainy": "Rainy",
                            "snowy": "Snowy",
                            "snowy-rainy": "Snowy, rainy"
                        }
                    },
                    "conditiondetailed_5d": {
                        "name": "Detailed condition 5d",
                        "state": {
                            "clear": "Clear",
                            "cloudy": "Cloudy",
                            "fog": "Fog",
                            "light-rain": "Light rain",
                            "light-snow": "Light snow",
                            "lightning": "Lightning",
                            "partlycloudy": "Partly cloudy",
                            "partlycloudy-fog": "Partly cloudy, fog",
                            "partlycloudy-light-rain": "Partly cloudy, light rain",
                            "partlycloudy-light-snow": "Partly cloudy, light snow",
                            "partlycloudy-lightning": "Partly cloudy, lightning",
                            "partlycloudy-rain": "Partly cloudy, rain",
                            "partlycloudy-snow": "Partly cloudy, snow",
                            "rainy": "Rainy",
                            "snowy": "Snowy",
                            "snowy-rainy": "Snowy, rainy"
                        }
                    },
                    "conditionexact": {
                        "name": "Full condition"
                    },
                    "conditionexact_1d": {
                        "name": "Full condition 1d"
                    },
                    "conditionexact_2d": {
                        "name": "Full condition 2d"
                    },
                    "conditionexact_3d": {
                        "name": "Full condition 3d"
                    },
                    "conditionexact_4d": {
                        "name": "Full condition 4d"
                    },
                    "conditionexact_5d": {
                        "name": "Full condition 5d"
                    },
                    "feeltemperature": {
                        "name": "Feel temperature"
                    },
                    "groundtemperature": {
                        "name": "Ground temperature"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "irradiance": {
                        "name": "Irradiance"
                    },
                    "maxrain_1d": {
                        "name": "Maximum rain 1d"
                    },
                    "maxrain_2d": {
                        "name": "Maximum rain 2d"
                    },
                    "maxrain_3d": {
                        "name": "Maximum rain 3d"
                    },
                    "maxrain_4d": {
                        "name": "Maximum rain 4d"
                    },
                    "maxrain_5d": {
                        "name": "Maximum rain 5d"
                    },
                    "minrain_1d": {
                        "name": "Minimum rain 1d"
                    },
                    "minrain_2d": {
                        "name": "Minimum rain 2d"
                    },
                    "minrain_3d": {
                        "name": "Minimum rain 3d"
                    },
                    "minrain_4d": {
                        "name": "Minimum rain 4d"
                    },
                    "minrain_5d": {
                        "name": "Minimum rain 5d"
                    },
                    "mintemp_1d": {
                        "name": "Minimum temperature 1d"
                    },
                    "mintemp_2d": {
                        "name": "Minimum temperature 2d"
                    },
                    "mintemp_3d": {
                        "name": "Minimum temperature 3d"
                    },
                    "mintemp_4d": {
                        "name": "Minimum temperature 4d"
                    },
                    "mintemp_5d": {
                        "name": "Minimum temperature 5d"
                    },
                    "precipitation": {
                        "name": "Precipitation"
                    },
                    "precipitation_forecast_average": {
                        "name": "Precipitation forecast average"
                    },
                    "precipitation_forecast_total": {
                        "name": "Precipitation forecast total"
                    },
                    "pressure": {
                        "name": "Pressure"
                    },
                    "rain_1d": {
                        "name": "Rain 1d"
                    },
                    "rain_2d": {
                        "name": "Rain 2d"
                    },
                    "rain_3d": {
                        "name": "Rain 3d"
                    },
                    "rain_4d": {
                        "name": "Rain 4d"
                    },
                    "rain_5d": {
                        "name": "Rain 5d"
                    },
                    "rainchance_1d": {
                        "name": "Rainchance 1d"
                    },
                    "rainchance_2d": {
                        "name": "Rainchance 2d"
                    },
                    "rainchance_3d": {
                        "name": "Rainchance 3d"
                    },
                    "rainchance_4d": {
                        "name": "Rainchance 4d"
                    },
                    "rainchance_5d": {
                        "name": "Rainchance 5d"
                    },
                    "rainlast24hour": {
                        "name": "Rain last 24h"
                    },
                    "rainlasthour": {
                        "name": "Rain last hour"
                    },
                    "stationname": {
                        "name": "Station name"
                    },
                    "sunchance_1d": {
                        "name": "Sunchance 1d"
                    },
                    "sunchance_2d": {
                        "name": "Sunchance 2d"
                    },
                    "sunchance_3d": {
                        "name": "Sunchance 3d"
                    },
                    "sunchance_4d": {
                        "name": "Sunchance 4d"
                    },
                    "sunchance_5d": {
                        "name": "Sunchance 5d"
                    },
                    "symbol": {
                        "name": "Symbol"
                    },
                    "symbol_1d": {
                        "name": "Symbol 1d"
                    },
                    "symbol_2d": {
                        "name": "Symbol 2d"
                    },
                    "symbol_3d": {
                        "name": "Symbol 3d"
                    },
                    "symbol_4d": {
                        "name": "Symbol 4d"
                    },
                    "symbol_5d": {
                        "name": "Symbol 5d"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "temperature_1d": {
                        "name": "Temperature 1d"
                    },
                    "temperature_2d": {
                        "name": "Temperature 2d"
                    },
                    "temperature_3d": {
                        "name": "Temperature 3d"
                    },
                    "temperature_4d": {
                        "name": "Temperature 4d"
                    },
                    "temperature_5d": {
                        "name": "Temperature 5d"
                    },
                    "visibility": {
                        "name": "Visibility"
                    },
                    "windazimuth": {
                        "name": "Wind direction azimuth"
                    },
                    "windazimuth_1d": {
                        "name": "Wind direction azimuth 1d"
                    },
                    "windazimuth_2d": {
                        "name": "Wind direction azimuth 2d"
                    },
                    "windazimuth_3d": {
                        "name": "Wind direction azimuth 3d"
                    },
                    "windazimuth_4d": {
                        "name": "Wind direction azimuth 4d"
                    },
                    "windazimuth_5d": {
                        "name": "Wind direction azimuth 5d"
                    },
                    "winddirection": {
                        "name": "Wind direction"
                    },
                    "winddirection_1d": {
                        "name": "Wind direction 1d"
                    },
                    "winddirection_2d": {
                        "name": "Wind direction 2d"
                    },
                    "winddirection_3d": {
                        "name": "Wind direction 3d"
                    },
                    "winddirection_4d": {
                        "name": "Wind direction 4d"
                    },
                    "winddirection_5d": {
                        "name": "Wind direction 5d"
                    },
                    "windforce": {
                        "name": "Wind force"
                    },
                    "windforce_1d": {
                        "name": "Wind force 1d"
                    },
                    "windforce_2d": {
                        "name": "Wind force 2d"
                    },
                    "windforce_3d": {
                        "name": "Wind force 3d"
                    },
                    "windforce_4d": {
                        "name": "Wind force 4d"
                    },
                    "windforce_5d": {
                        "name": "Wind force 5d"
                    },
                    "windgust": {
                        "name": "Wind gust"
                    },
                    "windspeed": {
                        "name": "Wind speed"
                    },
                    "windspeed_1d": {
                        "name": "Wind speed 1d"
                    },
                    "windspeed_2d": {
                        "name": "Wind speed 2d"
                    },
                    "windspeed_3d": {
                        "name": "Wind speed 3d"
                    },
                    "windspeed_4d": {
                        "name": "Wind speed 4d"
                    },
                    "windspeed_5d": {
                        "name": "Wind speed 5d"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "country_code": "Country code of the country to display camera images.",
                            "delta": "Time interval in seconds between camera image updates",
                            "timeframe": "Minutes to look ahead for precipitation forecast"
                        }
                    }
                }
            }
        },
        "button": {
            "device_automation": {
                "action_type": {
                    "press": "Press {entity_name} button"
                },
                "trigger_type": {
                    "pressed": "{entity_name} has been pressed"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Button"
                },
                "identify": {
                    "name": "Identify"
                },
                "restart": {
                    "name": "Restart"
                },
                "update": {
                    "name": "Update"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "press": {
                    "description": "Press the button entity.",
                    "name": "Press"
                }
            },
            "title": "Button"
        },
        "calendar": {
            "entity_component": {
                "_": {
                    "name": "Calendar",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "all_day": {
                            "name": "All day",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "description": {
                            "name": "Description"
                        },
                        "end_time": {
                            "name": "End time"
                        },
                        "location": {
                            "name": "Location"
                        },
                        "messages": {
                            "name": "Message"
                        },
                        "start_time": {
                            "name": "Start time"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "create_event": {
                    "description": "Adds a new calendar event.",
                    "fields": {
                        "description": {
                            "description": "A more complete description of the event than the one provided by the summary.",
                            "name": "Description"
                        },
                        "end_date": {
                            "description": "The date the all-day event should end (exclusive).",
                            "name": "End date"
                        },
                        "end_date_time": {
                            "description": "The date and time the event should end.",
                            "name": "End time"
                        },
                        "in": {
                            "description": "Days or weeks that you want to create the event in.",
                            "name": "In"
                        },
                        "location": {
                            "description": "The location of the event.",
                            "name": "Location"
                        },
                        "start_date": {
                            "description": "The date the all-day event should start.",
                            "name": "Start date"
                        },
                        "start_date_time": {
                            "description": "The date and time the event should start.",
                            "name": "Start time"
                        },
                        "summary": {
                            "description": "Defines the short summary or subject for the event.",
                            "name": "Summary"
                        }
                    },
                    "name": "Create event"
                },
                "list_events": {
                    "description": "Lists events on a calendar within a time range.",
                    "fields": {
                        "duration": {
                            "description": "Returns active events from start_date_time until the specified duration.",
                            "name": "Duration"
                        },
                        "end_date_time": {
                            "description": "Returns active events before this time (exclusive). Cannot be used with 'duration'.",
                            "name": "End time"
                        },
                        "start_date_time": {
                            "description": "Returns active events after this time (exclusive). When not set, defaults to now.",
                            "name": "Start time"
                        }
                    },
                    "name": "List event"
                }
            },
            "title": "Calendar"
        },
        "camera": {
            "entity_component": {
                "_": {
                    "name": "Camera",
                    "state": {
                        "idle": "Idle",
                        "recording": "Recording",
                        "streaming": "Streaming"
                    },
                    "state_attributes": {
                        "access_token": {
                            "name": "Access token"
                        },
                        "brand": {
                            "name": "Brand"
                        },
                        "frontend_stream_type": {
                            "name": "Stream type",
                            "state": {
                                "hls": "HLS",
                                "webrtc": "WebRTC"
                            }
                        },
                        "model_name": {
                            "name": "Model"
                        },
                        "motion_detection": {
                            "name": "Motion detection",
                            "state": {
                                "false": "Disabled",
                                "true": "Enabled"
                            }
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "disable_motion_detection": {
                    "description": "Disables the motion detection.",
                    "name": "Disable motion detection"
                },
                "enable_motion_detection": {
                    "description": "Enables the motion detection.",
                    "name": "Enable motion detection"
                },
                "play_stream": {
                    "description": "Plays the camera stream on a supported media player.",
                    "fields": {
                        "format": {
                            "description": "Stream format supported by the media player.",
                            "name": "Format"
                        },
                        "media_player": {
                            "description": "Media players to stream to.",
                            "name": "Media player"
                        }
                    },
                    "name": "Play stream"
                },
                "record": {
                    "description": "Creates a recording of a live camera feed.",
                    "fields": {
                        "duration": {
                            "description": "Planned duration of the recording. The actual duration may vary.",
                            "name": "Duration"
                        },
                        "filename": {
                            "description": "Template of a filename. Variable available is `entity_id`. Must be mp4.",
                            "name": "Filename"
                        },
                        "lookback": {
                            "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.",
                            "name": "Lookback"
                        }
                    },
                    "name": "Record"
                },
                "snapshot": {
                    "description": "Takes a snapshot from a camera.",
                    "fields": {
                        "filename": {
                            "description": "Template of a filename. Variable available is `entity_id`.",
                            "name": "Filename"
                        }
                    },
                    "name": "Take snapshot"
                },
                "turn_off": {
                    "description": "Turns off the camera.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns on the camera.",
                    "name": "Turn on"
                }
            },
            "title": "Camera"
        },
        "canary": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Connect to Canary"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "ffmpeg_arguments": "Arguments passed to ffmpeg for cameras",
                            "timeout": "Request Timeout (seconds)"
                        }
                    }
                }
            }
        },
        "cast": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_known_hosts": "Known hosts must be a comma separated list of hosts."
                },
                "step": {
                    "config": {
                        "data": {
                            "known_hosts": "Known hosts"
                        },
                        "description": "Known Hosts - A comma-separated list of hostnames or IP-addresses of cast devices, use if mDNS discovery is not working.",
                        "title": "Google Cast configuration"
                    },
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "options": {
                "error": {
                    "invalid_known_hosts": "Known hosts must be a comma separated list of hosts."
                },
                "step": {
                    "advanced_options": {
                        "data": {
                            "ignore_cec": "Ignore CEC",
                            "uuid": "Allowed UUIDs"
                        },
                        "description": "Allowed UUIDs - A comma-separated list of UUIDs of Cast devices to add to Home Assistant. Use only if you don’t want to add all available cast devices.\nIgnore CEC - A comma-separated list of Chromecasts that should ignore CEC data for determining the active input. This will be passed to pychromecast.IGNORE_CEC.",
                        "title": "Advanced Google Cast configuration"
                    },
                    "basic_options": {
                        "data": {
                            "known_hosts": "Known hosts"
                        },
                        "description": "Known Hosts - A comma-separated list of hostnames or IP-addresses of cast devices, use if mDNS discovery is not working.",
                        "title": "Google Cast configuration"
                    }
                }
            },
            "services": {
                "show_lovelace_view": {
                    "description": "Shows a dashboard view on a Chromecast device.",
                    "fields": {
                        "dashboard_path": {
                            "description": "The URL path of the dashboard to show.",
                            "name": "Dashboard path"
                        },
                        "entity_id": {
                            "description": "Media player entity to show the dashboard view on.",
                            "name": "Entity"
                        },
                        "view_path": {
                            "description": "The path of the dashboard view to show.",
                            "name": "View path"
                        }
                    },
                    "name": "Show dashboard view"
                }
            }
        },
        "cert_expiry": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "import_failed": "Import from config failed"
                },
                "error": {
                    "connection_refused": "Connection refused when connecting to host",
                    "connection_timeout": "Timeout when connecting to this host",
                    "resolve_failed": "This host cannot be resolved"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "The name of the certificate",
                            "port": "Port"
                        },
                        "title": "Define the certificate to test"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "certificate_expiry": {
                        "name": "Cert expiry"
                    }
                }
            },
            "title": "Certificate Expiry"
        },
        "channels": {
            "services": {
                "seek_backward": {
                    "description": "Seeks backward by a set number of seconds.",
                    "name": "Seek backward"
                },
                "seek_by": {
                    "description": "Seeks by an inputted number of seconds.",
                    "fields": {
                        "seconds": {
                            "description": "Number of seconds to seek by. Negative numbers seek backwards.",
                            "name": "Seconds"
                        }
                    },
                    "name": "Seek by"
                },
                "seek_forward": {
                    "description": "Seeks forward by a set number of seconds.",
                    "name": "Seek forward"
                }
            }
        },
        "climacell": {
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "timestep": "Min. Between NowCast Forecasts"
                        },
                        "description": "If you choose to enable the `nowcast` forecast entity, you can configure the number of minutes between each forecast. The number of forecasts provided depends on the number of minutes chosen between forecasts.",
                        "title": "Update ClimaCell Options"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "climacell__health_concern": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy",
                            "unhealthy_for_sensitive_groups": "Unhealthy for Sensitive Groups",
                            "very_unhealthy": "Very Unhealthy"
                        },
                        "climacell__pollen_index": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "none": "None",
                            "very_high": "Very High",
                            "very_low": "Very Low"
                        },
                        "climacell__precipitation_type": {
                            "freezing_rain": "Freezing Rain",
                            "ice_pellets": "Ice Pellets",
                            "none": "None",
                            "rain": "Rain",
                            "snow": "Snow"
                        }
                    }
                }
            }
        },
        "climate": {
            "device_automation": {
                "action_type": {
                    "set_hvac_mode": "Change HVAC mode on {entity_name}",
                    "set_preset_mode": "Change preset on {entity_name}"
                },
                "condition_type": {
                    "is_hvac_mode": "{entity_name} is set to a specific HVAC mode",
                    "is_preset_mode": "{entity_name} is set to a specific preset mode"
                },
                "trigger_type": {
                    "current_humidity_changed": "{entity_name} measured humidity changed",
                    "current_temperature_changed": "{entity_name} measured temperature changed",
                    "hvac_mode_changed": "{entity_name} HVAC mode changed"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Thermostat",
                    "state": {
                        "auto": "Auto",
                        "cool": "Cool",
                        "dry": "Dry",
                        "fan_only": "Fan only",
                        "heat": "Heat",
                        "heat_cool": "Heat\/Cool",
                        "off": "Off"
                    },
                    "state_attributes": {
                        "aux_heat": {
                            "name": "Aux heat"
                        },
                        "current_humidity": {
                            "name": "Current humidity"
                        },
                        "current_temperature": {
                            "name": "Current temperature"
                        },
                        "fan_mode": {
                            "name": "Fan mode",
                            "state": {
                                "auto": "Auto",
                                "diffuse": "Diffuse",
                                "focus": "Focus",
                                "high": "High",
                                "low": "Low",
                                "medium": "Medium",
                                "middle": "Middle",
                                "off": "Off",
                                "on": "On",
                                "top": "Top"
                            }
                        },
                        "fan_modes": {
                            "name": "Fan modes"
                        },
                        "humidity": {
                            "name": "Target humidity"
                        },
                        "hvac_action": {
                            "name": "Current action",
                            "state": {
                                "cooling": "Cooling",
                                "drying": "Drying",
                                "fan": "Fan",
                                "heating": "Heating",
                                "idle": "Idle",
                                "off": "Off",
                                "preheating": "Preheating"
                            }
                        },
                        "hvac_modes": {
                            "name": "HVAC modes"
                        },
                        "max_humidity": {
                            "name": "Max target humidity"
                        },
                        "max_temp": {
                            "name": "Max target temperature"
                        },
                        "min_humidity": {
                            "name": "Min target humidity"
                        },
                        "min_temp": {
                            "name": "Min target temperature"
                        },
                        "preset_mode": {
                            "name": "Preset",
                            "state": {
                                "activity": "Activity",
                                "away": "Away",
                                "boost": "Boost",
                                "comfort": "Comfort",
                                "eco": "Eco",
                                "home": "Home",
                                "none": "None",
                                "sleep": "Sleep"
                            }
                        },
                        "preset_modes": {
                            "name": "Presets"
                        },
                        "swing_mode": {
                            "name": "Swing mode",
                            "state": {
                                "both": "Both",
                                "horizontal": "Horizontal",
                                "off": "Off",
                                "on": "On",
                                "vertical": "Vertical"
                            }
                        },
                        "swing_modes": {
                            "name": "Swing modes"
                        },
                        "target_temp_high": {
                            "name": "Upper target temperature"
                        },
                        "target_temp_low": {
                            "name": "Lower target temperature"
                        },
                        "target_temp_step": {
                            "name": "Target temperature step"
                        },
                        "temperature": {
                            "name": "Target temperature"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "selector": {
                "hvac_mode": {
                    "options": {
                        "auto": "Auto",
                        "cool": "Cool",
                        "dry": "Dry",
                        "fan_only": "Fan only",
                        "heat": "Heat",
                        "heat_cool": "Heat\/cool",
                        "off": "Off"
                    }
                }
            },
            "services": {
                "set_aux_heat": {
                    "description": "Turns auxiliary heater on\/off.",
                    "fields": {
                        "aux_heat": {
                            "description": "New value of auxiliary heater.",
                            "name": "Auxiliary heating"
                        }
                    },
                    "name": "Turn on\/off auxiliary heater"
                },
                "set_fan_mode": {
                    "description": "Sets fan operation mode.",
                    "fields": {
                        "fan_mode": {
                            "description": "Fan operation mode.",
                            "name": "Fan mode"
                        }
                    },
                    "name": "Set fan mode"
                },
                "set_humidity": {
                    "description": "Sets target humidity.",
                    "fields": {
                        "humidity": {
                            "description": "Target humidity.",
                            "name": "Humidity"
                        }
                    },
                    "name": "Set target humidity"
                },
                "set_hvac_mode": {
                    "description": "Sets HVAC operation mode.",
                    "fields": {
                        "hvac_mode": {
                            "description": "HVAC operation mode.",
                            "name": "HVAC mode"
                        }
                    },
                    "name": "Set HVAC mode"
                },
                "set_preset_mode": {
                    "description": "Sets preset mode.",
                    "fields": {
                        "preset_mode": {
                            "description": "Preset mode.",
                            "name": "Preset mode"
                        }
                    },
                    "name": "Set preset mode"
                },
                "set_swing_mode": {
                    "description": "Sets swing operation mode.",
                    "fields": {
                        "swing_mode": {
                            "description": "Swing operation mode.",
                            "name": "Swing mode"
                        }
                    },
                    "name": "Set swing mode"
                },
                "set_temperature": {
                    "description": "Sets target temperature.",
                    "fields": {
                        "hvac_mode": {
                            "description": "HVAC operation mode.",
                            "name": "HVAC mode"
                        },
                        "target_temp_high": {
                            "description": "High target temperature.",
                            "name": "Target temperature high"
                        },
                        "target_temp_low": {
                            "description": "Low target temperature.",
                            "name": "Target temperature low"
                        },
                        "temperature": {
                            "description": "Target temperature.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set target temperature"
                },
                "turn_off": {
                    "description": "Turns climate device off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns climate device on.",
                    "name": "Turn on"
                }
            },
            "title": "Climate"
        },
        "cloud": {
            "issues": {
                "legacy_subscription": {
                    "fix_flow": {
                        "abort": {
                            "operation_took_too_long": "The operation took too long. Please try again later."
                        },
                        "step": {
                            "confirm_change_plan": {
                                "description": "We've recently updated our subscription system. To continue using Home Assistant Cloud you need to one-time approve the change in PayPal.\n\nThis takes 1 minute and will not increase the price."
                            }
                        }
                    },
                    "title": "Legacy subscription detected"
                }
            },
            "services": {
                "remote_connect": {
                    "description": "Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.",
                    "name": "Remote connect"
                },
                "remote_disconnect": {
                    "description": "Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.",
                    "name": "Remote disconnect"
                }
            },
            "system_health": {
                "info": {
                    "alexa_enabled": "Alexa Enabled",
                    "can_reach_cert_server": "Reach Certificate Server",
                    "can_reach_cloud": "Reach Home Assistant Cloud",
                    "can_reach_cloud_auth": "Reach Authentication Server",
                    "certificate_status": "Certificate Status",
                    "google_enabled": "Google Enabled",
                    "logged_in": "Logged In",
                    "relayer_connected": "Relayer Connected",
                    "relayer_region": "Relayer Region",
                    "remote_connected": "Remote Connected",
                    "remote_enabled": "Remote Enabled",
                    "remote_server": "Remote Server",
                    "subscription_expiration": "Subscription Expiration"
                }
            }
        },
        "cloudflare": {
            "config": {
                "abort": {
                    "reauth_successful": "Re-authentication was successful",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_zone": "Invalid zone"
                },
                "flow_title": "{name}",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_token": "API Token",
                            "description": "Re-authenticate with your Cloudflare account."
                        }
                    },
                    "records": {
                        "data": {
                            "records": "Records"
                        },
                        "title": "Choose the Records to Update"
                    },
                    "user": {
                        "data": {
                            "api_token": "API Token"
                        },
                        "description": "This integration requires an API Token created with Zone:Zone:Read and Zone:DNS:Edit permissions for all zones in your account.",
                        "title": "Connect to Cloudflare"
                    },
                    "zone": {
                        "data": {
                            "zone": "Zone"
                        },
                        "title": "Choose the Zone to Update"
                    }
                }
            },
            "services": {
                "update_records": {
                    "description": "Manually trigger update to Cloudflare records.",
                    "name": "Update records"
                }
            }
        },
        "co2signal": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "api_ratelimit": "API Ratelimit exceeded",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "api_ratelimit": "API Ratelimit exceeded",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "coordinates": {
                        "data": {
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        }
                    },
                    "country": {
                        "data": {
                            "country_code": "Country code"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "Access Token",
                            "location": "Location"
                        },
                        "description": "Visit https:\/\/electricitymaps.com\/free-tier to request a token."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "carbon_intensity": {
                        "name": "CO2 intensity",
                        "state_attributes": {
                            "country_code": {
                                "name": "Country code"
                            }
                        }
                    },
                    "fossil_fuel_percentage": {
                        "name": "Grid fossil fuel percentage",
                        "state_attributes": {
                            "country_code": {
                                "name": "Country code"
                            }
                        }
                    }
                }
            }
        },
        "coinbase": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_auth_key": "API credentials rejected by Coinbase due to an invalid API Key.",
                    "invalid_auth_secret": "API credentials rejected by Coinbase due to an invalid API Secret.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "api_token": "API Secret"
                        },
                        "description": "Please enter the details of your API key as provided by Coinbase.",
                        "title": "Coinbase API Key Details"
                    }
                }
            },
            "options": {
                "error": {
                    "currency_unavailable": "One or more of the requested currency balances is not provided by your Coinbase API.",
                    "exchange_rate_unavailable": "One or more of the requested exchange rates is not provided by Coinbase.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "init": {
                        "data": {
                            "account_balance_currencies": "Wallet balances to report.",
                            "exchange_base": "Base currency for exchange rate sensors.",
                            "exchange_rate_currencies": "Exchange rates to report.",
                            "exchnage_rate_precision": "Number of decimal places for exchange rates."
                        },
                        "description": "Adjust Coinbase Options"
                    }
                }
            }
        },
        "color_extractor": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring {integration_title} using YAML is being removed.\n\nYour configuration is already imported.\n\nRemove the `{domain}` configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The {integration_title} YAML configuration is being removed"
                }
            },
            "services": {
                "turn_on": {
                    "description": "Sets the light RGB to the predominant color found in the image provided by URL or file path.",
                    "fields": {
                        "color_extract_path": {
                            "description": "The full system path to the image we want to extract RGB values from. Must be allowed in allowlist_external_dirs.",
                            "name": "Path"
                        },
                        "color_extract_url": {
                            "description": "The URL of the image we want to extract RGB values from. Must be allowed in allowlist_external_urls.",
                            "name": "URL"
                        }
                    },
                    "name": "Turn on"
                }
            }
        },
        "comelit": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{host}",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Please enter the correct PIN for {host}"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "pin": "PIN Code"
                        }
                    }
                }
            }
        },
        "command_line": {
            "issues": {
                "deprecated_platform_yaml": {
                    "description": "Configuring Command Line `{platform}` using YAML has moved.\n\nConsult the documentation to move your YAML configuration to integration key and restart Home Assistant to fix this issue.",
                    "title": "Command Line YAML configuration has moved"
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads command line configuration from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "configurator": {
            "entity_component": {
                "_": {
                    "name": "Configurator",
                    "state": {
                        "configure": "Configure",
                        "configured": "Configured"
                    }
                }
            },
            "title": "Configurator"
        },
        "control4": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "IP Address",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter your Control4 account details and the IP address of your local controller."
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Seconds between updates"
                        }
                    }
                }
            }
        },
        "conversation": {
            "services": {
                "process": {
                    "description": "Launches a conversation from a transcribed text.",
                    "fields": {
                        "agent_id": {
                            "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands.",
                            "name": "Agent"
                        },
                        "language": {
                            "description": "Language of text. Defaults to server language.",
                            "name": "Language"
                        },
                        "text": {
                            "description": "Transcribed text input.",
                            "name": "Text"
                        }
                    },
                    "name": "Process"
                },
                "reload": {
                    "description": "Reloads the intent configuration.",
                    "fields": {
                        "agent_id": {
                            "description": "Conversation agent to reload.",
                            "name": "Agent"
                        },
                        "language": {
                            "description": "Language to clear cached intents for. Defaults to server language.",
                            "name": "Language"
                        }
                    },
                    "name": "Reload"
                }
            },
            "title": "Conversation"
        },
        "coolmaster": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_units": "Could not find any HVAC units in CoolMasterNet host."
                },
                "step": {
                    "user": {
                        "data": {
                            "cool": "Support cool mode",
                            "dry": "Support dry mode",
                            "fan_only": "Support fan only mode",
                            "heat": "Support heat mode",
                            "heat_cool": "Support automatic heat\/cool mode",
                            "host": "Host",
                            "off": "Can be turned off",
                            "swing_support": "Control swing mode"
                        },
                        "title": "Set up your CoolMasterNet connection details."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "clean_filter": {
                        "name": "Clean filter"
                    }
                },
                "button": {
                    "reset_filter": {
                        "name": "Reset filter"
                    }
                },
                "sensor": {
                    "error_code": {
                        "name": "Error code"
                    }
                }
            }
        },
        "coronavirus": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "country": "Country"
                        },
                        "title": "Pick a country to monitor"
                    }
                }
            }
        },
        "counter": {
            "entity_component": {
                "_": {
                    "name": "Counter",
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "initial": {
                            "name": "Initial value"
                        },
                        "maximum": {
                            "name": "Maximum"
                        },
                        "minimum": {
                            "name": "Minimum"
                        },
                        "step": {
                            "name": "Step"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_configure_service": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The counter service `counter.configure` is being removed and use of it has been detected. If you want to change the current value of a counter, use the new `counter.set_value` service instead.\n\nPlease remove this service from your automations and scripts and select **submit** to close this issue.",
                                "title": "The counter configure service is being removed"
                            }
                        }
                    },
                    "title": "The counter configure service is being removed"
                }
            },
            "services": {
                "decrement": {
                    "description": "Decrements a counter.",
                    "name": "Decrement"
                },
                "increment": {
                    "description": "Increments a counter.",
                    "name": "Increment"
                },
                "reset": {
                    "description": "Resets a counter.",
                    "name": "Reset"
                },
                "set_value": {
                    "description": "Sets the counter value.",
                    "fields": {
                        "value": {
                            "description": "The new counter value the entity should be set to.",
                            "name": "Value"
                        }
                    },
                    "name": "Set"
                }
            },
            "title": "Counter"
        },
        "cover": {
            "device_automation": {
                "action_type": {
                    "close": "Close {entity_name}",
                    "close_tilt": "Close {entity_name} tilt",
                    "open": "Open {entity_name}",
                    "open_tilt": "Open {entity_name} tilt",
                    "set_position": "Set {entity_name} position",
                    "set_tilt_position": "Set {entity_name} tilt position",
                    "stop": "Stop {entity_name}"
                },
                "condition_type": {
                    "is_closed": "{entity_name} is closed",
                    "is_closing": "{entity_name} is closing",
                    "is_open": "{entity_name} is open",
                    "is_opening": "{entity_name} is opening",
                    "is_position": "Current {entity_name} position is",
                    "is_tilt_position": "Current {entity_name} tilt position is"
                },
                "trigger_type": {
                    "closed": "{entity_name} closed",
                    "closing": "{entity_name} closing",
                    "opened": "{entity_name} opened",
                    "opening": "{entity_name} opening",
                    "position": "{entity_name} position changes",
                    "tilt_position": "{entity_name} tilt position changes"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Cover",
                    "state": {
                        "closed": "Closed",
                        "closing": "Closing",
                        "open": "Open",
                        "opening": "Opening",
                        "stopped": "Stopped"
                    },
                    "state_attributes": {
                        "current_position": {
                            "name": "Position"
                        },
                        "current_tilt_position": {
                            "name": "Tilt position"
                        }
                    }
                },
                "awning": {
                    "name": "Awning"
                },
                "blind": {
                    "name": "Blind"
                },
                "curtain": {
                    "name": "Curtain"
                },
                "damper": {
                    "name": "Damper"
                },
                "door": {
                    "name": "Door"
                },
                "garage": {
                    "name": "Garage"
                },
                "gate": {
                    "name": "Gate"
                },
                "shade": {
                    "name": "Shade"
                },
                "shutter": {
                    "name": "Shutter"
                },
                "window": {
                    "name": "Window"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "close_cover": {
                    "description": "Closes a cover.",
                    "name": "Close"
                },
                "close_cover_tilt": {
                    "description": "Tilts a cover to close.",
                    "name": "Close tilt"
                },
                "open_cover": {
                    "description": "Opens a cover.",
                    "name": "Open"
                },
                "open_cover_tilt": {
                    "description": "Tilts a cover open.",
                    "name": "Open tilt"
                },
                "set_cover_position": {
                    "description": "Moves a cover to a specific position.",
                    "fields": {
                        "position": {
                            "description": "Target position.",
                            "name": "Position"
                        }
                    },
                    "name": "Set position"
                },
                "set_cover_tilt_position": {
                    "description": "Moves a cover tilt to a specific position.",
                    "fields": {
                        "tilt_position": {
                            "description": "Target tilt positition.",
                            "name": "Tilt position"
                        }
                    },
                    "name": "Set tilt position"
                },
                "stop_cover": {
                    "description": "Stops the cover movement.",
                    "name": "Stop"
                },
                "stop_cover_tilt": {
                    "description": "Stops a tilting cover movement.",
                    "name": "Stop tilt"
                },
                "toggle": {
                    "description": "Toggles a cover open\/closed.",
                    "name": "Toggle"
                },
                "toggle_cover_tilt": {
                    "description": "Toggles a cover tilt open\/closed.",
                    "name": "Toggle tilt"
                }
            },
            "title": "Cover"
        },
        "cpuspeed": {
            "config": {
                "abort": {
                    "already_configured": "Already configured. Only a single configuration possible.",
                    "not_compatible": "Unable to get CPU information, this integration is not compatible with your system"
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?",
                        "title": "CPU Speed"
                    }
                }
            },
            "title": "CPU Speed"
        },
        "crownstone": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "usb_setup_complete": "Crownstone USB setup complete.",
                    "usb_setup_unsuccessful": "Crownstone USB setup was unsuccessful."
                },
                "error": {
                    "account_not_verified": "Account not verified. Please activate your account through the activation email from Crownstone.",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "usb_config": {
                        "data": {
                            "usb_path": "USB Device Path"
                        },
                        "description": "Select the serial port of the Crownstone USB dongle, or select 'Don't use USB' if you don't want to set up a USB dongle.\n\nLook for a device with VID 10C4 and PID EA60.",
                        "title": "Crownstone USB dongle configuration"
                    },
                    "usb_manual_config": {
                        "data": {
                            "usb_manual_path": "USB Device Path"
                        },
                        "description": "Manually enter the path of a Crownstone USB dongle.",
                        "title": "Crownstone USB dongle manual path"
                    },
                    "usb_sphere_config": {
                        "data": {
                            "usb_sphere": "Crownstone Sphere"
                        },
                        "description": "Select a Crownstone Sphere where the USB is located.",
                        "title": "Crownstone USB Sphere"
                    },
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        },
                        "title": "Crownstone account"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "usb_sphere_option": "Crownstone Sphere where the USB is located",
                            "use_usb_option": "Use a Crownstone USB dongle for local data transmission"
                        }
                    },
                    "usb_config": {
                        "data": {
                            "usb_path": "USB Device Path"
                        },
                        "description": "Select the serial port of the Crownstone USB dongle.\n\nLook for a device with VID 10C4 and PID EA60.",
                        "title": "Crownstone USB dongle configuration"
                    },
                    "usb_manual_config": {
                        "data": {
                            "usb_manual_path": "USB Device Path"
                        },
                        "description": "Manually enter the path of a Crownstone USB dongle.",
                        "title": "Crownstone USB dongle manual path"
                    },
                    "usb_sphere_config": {
                        "data": {
                            "usb_sphere": "Crownstone Sphere"
                        },
                        "description": "Select a Crownstone Sphere where the USB is located.",
                        "title": "Crownstone USB Sphere"
                    }
                }
            }
        },
        "daikin": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "api_password": "Invalid authentication, use either API Key or Password.",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "host": "Host",
                            "password": "Password"
                        },
                        "description": "Enter the IP address of your Daikin AC.\n\nNote that API key and password are only used by BRP072Cxx and SKYFi devices respectively.",
                        "title": "Configure Daikin AC"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "compressor_energy_consumption": {
                        "name": "Compressor energy consumption"
                    },
                    "compressor_estimated_power_consumption": {
                        "name": "Compressor estimated power consumption"
                    },
                    "compressor_frequency": {
                        "name": "Compressor frequency"
                    },
                    "cool_energy_consumption": {
                        "name": "Cool energy consumption"
                    },
                    "energy_consumption": {
                        "name": "Energy consumption"
                    },
                    "heat_energy_consumption": {
                        "name": "Heat energy consumption"
                    },
                    "inside_temperature": {
                        "name": "Inside temperature"
                    },
                    "outside_temperature": {
                        "name": "Outside temperature"
                    },
                    "target_humidity": {
                        "name": "Target humidity"
                    }
                }
            }
        },
        "date": {
            "entity_component": {
                "_": {
                    "name": "Date"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "set_value": {
                    "description": "Sets the date.",
                    "fields": {
                        "date": {
                            "description": "The date to set.",
                            "name": "Date"
                        }
                    },
                    "name": "Set date"
                }
            },
            "title": "Date"
        },
        "datetime": {
            "entity_component": {
                "_": {
                    "name": "Date\/Time"
                }
            },
            "services": {
                "set_value": {
                    "description": "Sets the date\/time for a datetime entity.",
                    "fields": {
                        "datetime": {
                            "description": "The date\/time to set. The time zone of the Home Assistant instance is assumed.",
                            "name": "Date & Time"
                        }
                    },
                    "name": "Set date\/time"
                }
            },
            "title": "Date\/Time"
        },
        "debugpy": {
            "services": {
                "start": {
                    "description": "Starts the Remote Python Debugger.",
                    "name": "Start"
                }
            }
        },
        "deconz": {
            "config": {
                "abort": {
                    "already_configured": "Bridge is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_bridges": "No deCONZ bridges discovered",
                    "no_hardware_available": "No radio hardware connected to deCONZ",
                    "updated_instance": "Updated deCONZ instance with new host address"
                },
                "error": {
                    "linking_not_possible": "Couldn't link with the gateway",
                    "no_key": "Couldn't get an API key"
                },
                "flow_title": "{host}",
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to configure Home Assistant to connect to the deCONZ gateway provided by the add-on {addon}?",
                        "title": "deCONZ Zigbee gateway via Home Assistant add-on"
                    },
                    "link": {
                        "description": "Unlock your deCONZ gateway to register with Home Assistant.\n\n1. Go to deCONZ Settings -> Gateway -> Advanced\n2. Press \"Authenticate app\" button",
                        "title": "Link with deCONZ"
                    },
                    "manual_input": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Select discovered deCONZ gateway"
                        }
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "both_buttons": "Both buttons",
                    "bottom_buttons": "Bottom buttons",
                    "button_1": "First button",
                    "button_2": "Second button",
                    "button_3": "Third button",
                    "button_4": "Fourth button",
                    "button_5": "Fifth button",
                    "button_6": "Sixth button",
                    "button_7": "Seventh button",
                    "button_8": "Eighth button",
                    "close": "Close",
                    "dim_down": "Dim down",
                    "dim_up": "Dim up",
                    "left": "Left",
                    "open": "Open",
                    "right": "Right",
                    "side_1": "Side 1",
                    "side_2": "Side 2",
                    "side_3": "Side 3",
                    "side_4": "Side 4",
                    "side_5": "Side 5",
                    "side_6": "Side 6",
                    "top_buttons": "Top buttons",
                    "turn_off": "Turn off",
                    "turn_on": "Turn on"
                },
                "trigger_type": {
                    "remote_awakened": "Device awakened",
                    "remote_button_double_press": "\"{subtype}\" double clicked",
                    "remote_button_long_press": "\"{subtype}\" continuously pressed",
                    "remote_button_long_release": "\"{subtype}\" released after long press",
                    "remote_button_quadruple_press": "\"{subtype}\" quadruple clicked",
                    "remote_button_quintuple_press": "\"{subtype}\" quintuple clicked",
                    "remote_button_rotated": "Button rotated \"{subtype}\"",
                    "remote_button_rotated_fast": "Button rotated fast \"{subtype}\"",
                    "remote_button_rotation_stopped": "Button rotation \"{subtype}\" stopped",
                    "remote_button_short_press": "\"{subtype}\" pressed",
                    "remote_button_short_release": "\"{subtype}\" released",
                    "remote_button_triple_press": "\"{subtype}\" triple clicked",
                    "remote_double_tap": "Device \"{subtype}\" double tapped",
                    "remote_double_tap_any_side": "Device double tapped on any side",
                    "remote_falling": "Device in free fall",
                    "remote_flip_180_degrees": "Device flipped 180 degrees",
                    "remote_flip_90_degrees": "Device flipped 90 degrees",
                    "remote_gyro_activated": "Device shaken",
                    "remote_moved": "Device moved with \"{subtype}\" up",
                    "remote_moved_any_side": "Device moved with any side up",
                    "remote_rotate_from_side_1": "Device rotated from \"side 1\" to \"{subtype}\"",
                    "remote_rotate_from_side_2": "Device rotated from \"side 2\" to \"{subtype}\"",
                    "remote_rotate_from_side_3": "Device rotated from \"side 3\" to \"{subtype}\"",
                    "remote_rotate_from_side_4": "Device rotated from \"side 4\" to \"{subtype}\"",
                    "remote_rotate_from_side_5": "Device rotated from \"side 5\" to \"{subtype}\"",
                    "remote_rotate_from_side_6": "Device rotated from \"side 6\" to \"{subtype}\"",
                    "remote_turned_clockwise": "Device turned clockwise",
                    "remote_turned_counter_clockwise": "Device turned counter clockwise"
                }
            },
            "options": {
                "step": {
                    "deconz_devices": {
                        "data": {
                            "allow_clip_sensor": "Allow deCONZ CLIP sensors",
                            "allow_deconz_groups": "Allow deCONZ light groups",
                            "allow_new_devices": "Allow automatic addition of new devices"
                        },
                        "description": "Configure visibility of deCONZ device types",
                        "title": "deCONZ options"
                    }
                }
            },
            "services": {
                "configure": {
                    "description": "Configures attributes of either a device endpoint in deCONZ or the deCONZ service itself.",
                    "fields": {
                        "bridgeid": {
                            "description": "Unique string for each deCONZ hardware. It can be found as part of the integration name. Useful if you run multiple deCONZ integrations.",
                            "name": "Bridge identifier"
                        },
                        "data": {
                            "description": "JSON object with what data you want to alter.",
                            "name": "Configuration payload"
                        },
                        "entity": {
                            "description": "Represents a specific device endpoint in deCONZ.",
                            "name": "Entity"
                        },
                        "field": {
                            "description": "String representing a full path to deCONZ endpoint (when entity is not specified) or a subpath of the device path for the entity (when entity is specified).",
                            "name": "Path"
                        }
                    },
                    "name": "Configure"
                },
                "device_refresh": {
                    "description": "Refreshes available devices from deCONZ.",
                    "fields": {
                        "bridgeid": {
                            "description": "Unique string for each deCONZ hardware. It can be found as part of the integration name. Useful if you run multiple deCONZ integrations.",
                            "name": "Bridge identifier"
                        }
                    },
                    "name": "Device refresh"
                },
                "remove_orphaned_entries": {
                    "description": "Cleans up device and entity registry entries orphaned by deCONZ.",
                    "fields": {
                        "bridgeid": {
                            "description": "Unique string for each deCONZ hardware. It can be found as part of the integration name. Useful if you run multiple deCONZ integrations.",
                            "name": "Bridge identifier"
                        }
                    },
                    "name": "Remove orphaned entries"
                }
            }
        },
        "deluge": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username",
                            "web_port": "Web port (for visiting service)"
                        },
                        "description": "To be able to use this integration, you have to enable the following option in deluge settings: Daemon > Allow remote controls"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "download_speed": {
                        "name": "Download speed"
                    },
                    "status": {
                        "name": "Status",
                        "state": {
                            "downloading": "Downloading",
                            "idle": "Idle",
                            "seeding": "Seeding",
                            "seeding_and_downloading": "Up\/Down"
                        }
                    },
                    "upload_speed": {
                        "name": "Upload speed"
                    }
                }
            }
        },
        "demo": {
            "entity": {
                "climate": {
                    "ubercool": {
                        "state_attributes": {
                            "fan_mode": {
                                "state": {
                                    "auto_high": "Auto High",
                                    "auto_low": "Auto Low",
                                    "on_high": "On High",
                                    "on_low": "On Low"
                                }
                            },
                            "swing_mode": {
                                "state": {
                                    "1": "1",
                                    "2": "2",
                                    "3": "3",
                                    "auto": "Auto",
                                    "off": "Off"
                                }
                            }
                        }
                    }
                },
                "event": {
                    "push": {
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "pressed": "Pressed"
                                }
                            }
                        }
                    }
                },
                "select": {
                    "speed": {
                        "state": {
                            "light_speed": "Light Speed",
                            "ludicrous_speed": "Ludicrous Speed",
                            "ridiculous_speed": "Ridiculous Speed"
                        }
                    }
                },
                "sensor": {
                    "thermostat_mode": {
                        "name": "Thermostat mode",
                        "state": {
                            "away": "Away",
                            "comfort": "Comfort",
                            "eco": "Eco",
                            "sleep": "Sleep"
                        }
                    }
                },
                "vacuum": {
                    "model_s": {
                        "state_attributes": {
                            "cleaned_area": {
                                "name": "Cleaned Area"
                            }
                        }
                    }
                }
            },
            "issues": {
                "bad_psu": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Press SUBMIT to confirm the power supply has been replaced",
                                "title": "The power supply needs to be replaced"
                            }
                        }
                    },
                    "title": "The power supply is not stable"
                },
                "cold_tea": {
                    "fix_flow": {
                        "abort": {
                            "not_tea_time": "Can not re-heat the tea at this time"
                        }
                    },
                    "title": "The tea is cold"
                },
                "out_of_blinker_fluid": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Press SUBMIT when blinker fluid has been refilled",
                                "title": "Blinker fluid needs to be refilled"
                            }
                        }
                    },
                    "title": "The blinker fluid is empty and needs to be refilled"
                },
                "transmogrifier_deprecated": {
                    "description": "The transmogrifier component is now deprecated due to the lack of local control available in the new API",
                    "title": "The transmogrifier component is deprecated"
                },
                "unfixable_problem": {
                    "description": "This issue is never going to give up.",
                    "title": "This is not a fixable problem"
                }
            },
            "options": {
                "step": {
                    "options_1": {
                        "data": {
                            "bool": "Optional boolean",
                            "constant": "Constant",
                            "int": "Numeric input"
                        },
                        "submit": "Save!"
                    },
                    "options_2": {
                        "data": {
                            "multi": "Multiselect",
                            "select": "Select an option",
                            "string": "String value"
                        }
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "demo__speed": {
                            "light_speed": "Light Speed",
                            "ludicrous_speed": "Ludicrous Speed",
                            "ridiculous_speed": "Ridiculous Speed"
                        }
                    }
                }
            },
            "services": {
                "randomize_device_tracker_data": {
                    "description": "Demonstrates using a device tracker to see where devices are located.",
                    "name": "Randomize device tracker data"
                }
            },
            "title": "Demo"
        },
        "denonavr": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect, please try again, disconnecting mains power and ethernet cables and reconnecting them may help",
                    "not_denonavr_manufacturer": "Not a Denon AVR Network Receiver, discovered manufacturer did not match",
                    "not_denonavr_missing": "Not a Denon AVR Network Receiver, discovery information not complete"
                },
                "error": {
                    "discovery_error": "Failed to discover a Denon AVR Network Receiver"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "description": "Please confirm adding the receiver"
                    },
                    "select": {
                        "data": {
                            "select_host": "Receiver IP address"
                        },
                        "description": "Run the setup again if you want to connect additional receivers",
                        "title": "Select the receiver that you wish to connect"
                    },
                    "user": {
                        "data": {
                            "host": "IP Address"
                        },
                        "data_description": {
                            "host": "Leave blank to use auto-discovery"
                        },
                        "description": "By default, this integration uses a Telnet connection to your receiver to receive real-time updates. Only one Telnet connection to your receiver can be established at a time. The Telnet connection can be disabled after setting up the integration."
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "show_all_sources": "Show all sources",
                            "update_audyssey": "Update Audyssey settings",
                            "use_telnet": "Use Telnet connection",
                            "zone2": "Set up Zone 2",
                            "zone3": "Set up Zone 3"
                        },
                        "description": "Specify optional settings"
                    }
                }
            },
            "services": {
                "get_command": {
                    "description": "Send sa generic HTTP get command.",
                    "fields": {
                        "command": {
                            "description": "Endpoint of the command, including associated parameters.",
                            "name": "Command"
                        }
                    },
                    "name": "Get command"
                },
                "set_dynamic_eq": {
                    "description": "Enables or disables DynamicEQ.",
                    "fields": {
                        "dynamic_eq": {
                            "description": "True\/false for enable\/disable.",
                            "name": "Dynamic equalizer"
                        }
                    },
                    "name": "Set dynamic equalizer"
                },
                "update_audyssey": {
                    "description": "Updates Audyssey settings.",
                    "name": "Update Audyssey"
                }
            }
        },
        "derivative": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "name": "Name",
                            "round": "Precision",
                            "source": "Input sensor",
                            "time_window": "Time window",
                            "unit_prefix": "Metric prefix",
                            "unit_time": "Time unit"
                        },
                        "data_description": {
                            "round": "Controls the number of decimal digits in the output.",
                            "time_window": "If set, the sensor's value is a time weighted moving average of derivatives within this window.",
                            "unit_prefix": "The output will be scaled according to the selected metric prefix and time unit of the derivative."
                        },
                        "description": "Create a sensor that estimates the derivative of a sensor.",
                        "title": "Add Derivative sensor"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "name": "Name",
                            "round": "Precision",
                            "source": "Input sensor",
                            "time_window": "Time window",
                            "unit_prefix": "Metric prefix",
                            "unit_time": "Time unit"
                        },
                        "data_description": {
                            "round": "Controls the number of decimal digits in the output.",
                            "time_window": "If set, the sensor's value is a time weighted moving average of derivatives within this window.",
                            "unit_prefix": "The output will be scaled according to the selected metric prefix and time unit of the derivative."
                        }
                    }
                }
            },
            "selector": {
                "time_unit": {
                    "options": {
                        "d": "Days",
                        "h": "Hours",
                        "min": "Minutes",
                        "s": "Seconds"
                    }
                }
            },
            "title": "Derivative sensor"
        },
        "device_tracker": {
            "device_automation": {
                "condition_type": {
                    "is_home": "{entity_name} is home",
                    "is_not_home": "{entity_name} is not home"
                },
                "trigger_type": {
                    "enters": "{entity_name} enters a zone",
                    "leaves": "{entity_name} leaves a zone"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Device tracker",
                    "state": {
                        "home": "Home",
                        "not_home": "Away"
                    },
                    "state_attributes": {
                        "battery": {
                            "name": "Battery"
                        },
                        "gps_accuracy": {
                            "name": "GPS accuracy"
                        },
                        "latitude": {
                            "name": "Latitude"
                        },
                        "longitude": {
                            "name": "Longitude"
                        },
                        "source_type": {
                            "name": "Source",
                            "state": {
                                "bluetooth": "Bluetooth",
                                "bluetooth_le": "Bluetooth LE",
                                "gps": "GPS",
                                "router": "Router"
                            }
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "see": {
                    "description": "Records a seen tracked device.",
                    "fields": {
                        "battery": {
                            "description": "Battery level of the device.",
                            "name": "Battery level"
                        },
                        "dev_id": {
                            "description": "ID of the device (find the ID in `known_devices.yaml`).",
                            "name": "Device ID"
                        },
                        "gps": {
                            "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]).",
                            "name": "GPS coordinates"
                        },
                        "gps_accuracy": {
                            "description": "Accuracy of the GPS coordinates.",
                            "name": "GPS accuracy"
                        },
                        "host_name": {
                            "description": "Hostname of the device.",
                            "name": "Hostname"
                        },
                        "location_name": {
                            "description": "Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone.",
                            "name": "Location"
                        },
                        "mac": {
                            "description": "MAC address of the device.",
                            "name": "MAC address"
                        }
                    },
                    "name": "See"
                }
            },
            "title": "Device tracker"
        },
        "devolo_home_control": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "reauth_failed": "Please use the same mydevolo user as before."
                },
                "step": {
                    "user": {
                        "data": {
                            "mydevolo_url": "mydevolo URL",
                            "password": "Password",
                            "username": "Email \/ devolo ID"
                        }
                    },
                    "zeroconf_confirm": {
                        "data": {
                            "mydevolo_url": "mydevolo URL",
                            "password": "Password",
                            "username": "Email \/ devolo ID"
                        }
                    }
                }
            }
        },
        "devolo_home_network": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "home_control": "The devolo Home Control Central Unit does not work with this integration.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{product} ({name})",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        }
                    },
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        },
                        "description": "Do you want to start setup?"
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the devolo home network device with the hostname `{host_name}` to Home Assistant?",
                        "title": "Discovered devolo home network device"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "connected_to_router": {
                        "name": "Connected to router"
                    }
                },
                "button": {
                    "identify": {
                        "name": "Identify device with a blinking LED"
                    },
                    "pairing": {
                        "name": "Start PLC pairing"
                    },
                    "restart": {
                        "name": "Restart device"
                    },
                    "start_wps": {
                        "name": "Start WPS"
                    }
                },
                "image": {
                    "image_guest_wifi": {
                        "name": "Guest Wifi credentials as QR code"
                    }
                },
                "sensor": {
                    "connected_plc_devices": {
                        "name": "Connected PLC devices"
                    },
                    "connected_wifi_clients": {
                        "name": "Connected Wifi clients"
                    },
                    "neighboring_wifi_networks": {
                        "name": "Neighboring Wifi networks"
                    }
                },
                "switch": {
                    "switch_guest_wifi": {
                        "name": "Enable guest Wifi"
                    },
                    "switch_leds": {
                        "name": "Enable LEDs"
                    }
                }
            }
        },
        "dexcom": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "server": "Server",
                            "username": "Username"
                        },
                        "description": "Enter Dexcom Share credentials",
                        "title": "Set up Dexcom integration"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "glucose_trend": {
                        "name": "Glucose trend"
                    },
                    "glucose_value": {
                        "name": "Glucose value"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "unit_of_measurement": "Unit of measurement"
                        }
                    }
                }
            }
        },
        "diagnostics": {
            "title": "Diagnostics"
        },
        "dialogflow": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to set up [webhook integration of Dialogflow]({dialogflow_url}).\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n- Content Type: application\/json\n\nSee [the documentation]({docs_url}) for further details."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up Dialogflow?",
                        "title": "Set up the Dialogflow Webhook"
                    }
                }
            }
        },
        "directv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "ssdp_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            }
        },
        "discord": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_token": "API Token"
                        },
                        "description": "Refer to the documentation on getting your Discord bot key.\n\n{url}"
                    },
                    "user": {
                        "data": {
                            "api_token": "API Token"
                        },
                        "description": "Refer to the documentation on getting your Discord bot key.\n\n{url}"
                    }
                }
            }
        },
        "discovergy": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    },
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "last_transmitted": {
                        "name": "Last transmitted"
                    },
                    "phase_1_power": {
                        "name": "Phase 1 power"
                    },
                    "phase_1_voltage": {
                        "name": "Phase 1 voltage"
                    },
                    "phase_2_power": {
                        "name": "Phase 2 power"
                    },
                    "phase_2_voltage": {
                        "name": "Phase 2 voltage"
                    },
                    "phase_3_power": {
                        "name": "Phase 3 power"
                    },
                    "phase_3_voltage": {
                        "name": "Phase 3 voltage"
                    },
                    "total_consumption": {
                        "name": "Total consumption"
                    },
                    "total_gas_consumption": {
                        "name": "Total gas consumption"
                    },
                    "total_power": {
                        "name": "Total power"
                    },
                    "total_production": {
                        "name": "Total production"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "time_between_update": "Minimum time between entity updates [s]"
                        }
                    }
                }
            },
            "system_health": {
                "info": {
                    "api_endpoint_reachable": "Discovergy API endpoint reachable"
                }
            }
        },
        "dlink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "confirm_discovery": {
                        "data": {
                            "password": "Password",
                            "use_legacy_protocol": "Use legacy protocol",
                            "username": "Username"
                        },
                        "data_description": {
                            "password": "Default: PIN code on the back."
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "use_legacy_protocol": "Use legacy protocol",
                            "username": "Username"
                        },
                        "data_description": {
                            "password": "Default: PIN code on the back."
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring D-Link Smart Plug using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the D-Link Power Plug YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The D-Link Smart Plug YAML configuration is being removed"
                }
            }
        },
        "dlna_dmr": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "alternative_integration": "Device is better supported by another integration",
                    "cannot_connect": "Failed to connect",
                    "discovery_error": "Failed to discover a matching DLNA device",
                    "incomplete_config": "Configuration is missing a required variable",
                    "non_unique_id": "Multiple devices found with the same unique ID",
                    "not_dmr": "Device is not a supported Digital Media Renderer"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "not_dmr": "Device is not a supported Digital Media Renderer"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    },
                    "import_turn_on": {
                        "description": "Please turn on the device and click submit to continue migration"
                    },
                    "manual": {
                        "data": {
                            "url": "URL"
                        },
                        "description": "URL to a device description XML file",
                        "title": "Manual DLNA DMR device connection"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Choose a device to configure or leave blank to enter a URL",
                        "title": "Discovered DLNA DMR devices"
                    }
                }
            },
            "options": {
                "error": {
                    "invalid_url": "Invalid URL"
                },
                "step": {
                    "init": {
                        "data": {
                            "browse_unfiltered": "Show incompatible media when browsing",
                            "callback_url_override": "Event listener callback URL",
                            "listen_port": "Event listener port (random if not set)",
                            "poll_availability": "Poll for device availability"
                        },
                        "title": "DLNA Digital Media Renderer configuration"
                    }
                }
            }
        },
        "dlna_dms": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "bad_ssdp": "SSDP data is missing a required value",
                    "no_devices_found": "No devices found on the network",
                    "not_dms": "Device is not a supported Media Server"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Choose a device to configure",
                        "title": "Discovered DLNA DMA devices"
                    }
                }
            }
        },
        "dnsip": {
            "config": {
                "error": {
                    "invalid_hostname": "Invalid hostname"
                },
                "step": {
                    "user": {
                        "data": {
                            "hostname": "The hostname for which to perform the DNS query",
                            "resolver": "Resolver for IPV4 lookup",
                            "resolver_ipv6": "Resolver for IPV6 lookup"
                        }
                    }
                }
            },
            "options": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "invalid_resolver": "Invalid IP address for resolver"
                },
                "step": {
                    "init": {
                        "data": {
                            "resolver": "Resolver for IPV4 lookup",
                            "resolver_ipv6": "Resolver for IPV6 lookup"
                        }
                    }
                }
            }
        },
        "dominos": {
            "services": {
                "order": {
                    "description": "Places a set of orders with Dominos Pizza.",
                    "fields": {
                        "order_entity_id": {
                            "description": "The ID (as specified in the configuration) of an order to place. If provided as an array, all of the identified orders will be placed.",
                            "name": "Order entity"
                        }
                    },
                    "name": "Order"
                }
            }
        },
        "doorbird": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "link_local_address": "Link local addresses are not supported",
                    "not_doorbird_device": "This device is not a DoorBird"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Device Name",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "camera": {
                    "last_motion": {
                        "name": "Last motion"
                    },
                    "last_ring": {
                        "name": "Last ring"
                    },
                    "live": {
                        "name": "live"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "events": "Comma separated list of events."
                        },
                        "data_description": {
                            "events": "Add an comma separated event name for each event you wish to track. After entering them here, use the DoorBird app to assign them to a specific event.\n\nExample: somebody_pressed_the_button, motion"
                        }
                    }
                }
            }
        },
        "dormakaba_dkey": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "invalid_code": "Invalid activation code. An activation code consist of 8 characters, separated by a dash, e.g. GBZT-HXC0.",
                    "no_longer_in_range": "The lock is no longer in Bluetooth range. Move the lock or adapter and try again.",
                    "wrong_code": "Wrong activation code. Note that an activation code can only be used once."
                },
                "flow_title": "{name}",
                "step": {
                    "associate": {
                        "data": {
                            "activation_code": "Activation code"
                        },
                        "description": "Provide an unused activation code.\n\nTo create an activation code, create a new key in the dKey admin app, then choose to share the key and share an activation code.\n\nMake sure to close the dKey admin app before proceeding."
                    },
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "reauth_confirm": {
                        "description": "The activation code is no longer valid, a new unused activation code is needed.\n\n"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "deadbolt": {
                        "name": "Deadbolt"
                    }
                }
            }
        },
        "downloader": {
            "services": {
                "download_file": {
                    "description": "Downloads a file to the download location.",
                    "fields": {
                        "filename": {
                            "description": "Determine the filename.",
                            "name": "Filename"
                        },
                        "overwrite": {
                            "description": "Whether to overwrite the file or not.",
                            "name": "Overwrite"
                        },
                        "subdir": {
                            "description": "Download into subdirectory.",
                            "name": "Subdirectory"
                        },
                        "url": {
                            "description": "The URL of the file to download.",
                            "name": "URL"
                        }
                    },
                    "name": "Download file"
                }
            }
        },
        "dremel_3d_printer": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "button": {
                    "cancel_job": {
                        "name": "Cancel job"
                    },
                    "pause_job": {
                        "name": "Pause job"
                    },
                    "resume_job": {
                        "name": "Resume job"
                    }
                },
                "sensor": {
                    "api_version": {
                        "name": "API version"
                    },
                    "available_storage": {
                        "name": "Available storage"
                    },
                    "chamber": {
                        "name": "Chamber"
                    },
                    "completion_time": {
                        "name": "Completion time"
                    },
                    "connection_type": {
                        "name": "Connection type"
                    },
                    "elapsed_time": {
                        "name": "Elapsed time"
                    },
                    "estimated_total_time": {
                        "name": "Estimated total time"
                    },
                    "extruder": {
                        "name": "Extruder"
                    },
                    "filament": {
                        "name": "Filament"
                    },
                    "host": {
                        "name": "Host"
                    },
                    "hours_used": {
                        "name": "Hours used"
                    },
                    "job_name": {
                        "name": "Job name"
                    },
                    "job_phase": {
                        "name": "Job phase"
                    },
                    "job_status": {
                        "name": "Job status"
                    },
                    "max_extruder_temperature": {
                        "name": "Max extruder temperature"
                    },
                    "max_platform_temperature": {
                        "name": "Max platform temperature"
                    },
                    "network_build": {
                        "name": "Network build"
                    },
                    "platform_temperature": {
                        "name": "Platform temperature"
                    },
                    "progress": {
                        "name": "Progress"
                    },
                    "remaining_time": {
                        "name": "Remaining time"
                    },
                    "target_extruder_temperature": {
                        "name": "Target extruder temperature"
                    },
                    "target_platform_temperature": {
                        "name": "Target platform temperature"
                    }
                }
            }
        },
        "dsmr": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_communicate": "Failed to communicate",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_communicate": "Failed to communicate",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "setup_network": {
                        "data": {
                            "dsmr_version": "Select DSMR version",
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Select connection address"
                    },
                    "setup_serial": {
                        "data": {
                            "dsmr_version": "Select DSMR version",
                            "port": "Select device"
                        },
                        "title": "Device"
                    },
                    "setup_serial_manual_path": {
                        "data": {
                            "port": "USB Device Path"
                        },
                        "title": "Path"
                    },
                    "user": {
                        "data": {
                            "type": "Connection type"
                        },
                        "title": "Select connection type"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "current_electricity_delivery": {
                        "name": "Power production"
                    },
                    "current_electricity_usage": {
                        "name": "Power consumption"
                    },
                    "electricity_active_tariff": {
                        "name": "Active tariff",
                        "state": {
                            "low": "Low",
                            "normal": "Normal"
                        }
                    },
                    "electricity_delivered_tariff_1": {
                        "name": "Energy production (tarif 1)"
                    },
                    "electricity_delivered_tariff_2": {
                        "name": "Energy production (tarif 2)"
                    },
                    "electricity_exported_total": {
                        "name": "Energy production (total)"
                    },
                    "electricity_imported_total": {
                        "name": "Energy consumption (total)"
                    },
                    "electricity_tariff": {
                        "state": {
                            "low": "Low",
                            "normal": "Normal"
                        }
                    },
                    "electricity_used_tariff_1": {
                        "name": "Energy consumption (tarif 1)"
                    },
                    "electricity_used_tariff_2": {
                        "name": "Energy consumption (tarif 2)"
                    },
                    "gas_meter_reading": {
                        "name": "Gas consumption"
                    },
                    "instantaneous_active_power_l1_negative": {
                        "name": "Power production phase L1"
                    },
                    "instantaneous_active_power_l1_positive": {
                        "name": "Power consumption phase L1"
                    },
                    "instantaneous_active_power_l2_negative": {
                        "name": "Power production phase L2"
                    },
                    "instantaneous_active_power_l2_positive": {
                        "name": "Power consumption phase L2"
                    },
                    "instantaneous_active_power_l3_negative": {
                        "name": "Power production phase L3"
                    },
                    "instantaneous_active_power_l3_positive": {
                        "name": "Power consumption phase L3"
                    },
                    "instantaneous_current_l1": {
                        "name": "Current phase L1"
                    },
                    "instantaneous_current_l2": {
                        "name": "Current phase L2"
                    },
                    "instantaneous_current_l3": {
                        "name": "Current phase L3"
                    },
                    "instantaneous_voltage_l1": {
                        "name": "Voltage phase L1"
                    },
                    "instantaneous_voltage_l2": {
                        "name": "Voltage phase L2"
                    },
                    "instantaneous_voltage_l3": {
                        "name": "Voltage phase L3"
                    },
                    "long_power_failure_count": {
                        "name": "Long power failure count"
                    },
                    "max_current_per_phase": {
                        "name": "Max current per phase"
                    },
                    "max_power_per_phase": {
                        "name": "Max power per phase"
                    },
                    "short_power_failure_count": {
                        "name": "Short power failure count"
                    },
                    "voltage_sag_l1_count": {
                        "name": "Voltage sags phase L1"
                    },
                    "voltage_sag_l2_count": {
                        "name": "Voltage sags phase L2"
                    },
                    "voltage_sag_l3_count": {
                        "name": "Voltage sags phase L3"
                    },
                    "voltage_swell_l1_count": {
                        "name": "Voltage swells phase L1"
                    },
                    "voltage_swell_l2_count": {
                        "name": "Voltage swells phase L2"
                    },
                    "voltage_swell_l3_count": {
                        "name": "Voltage swells phase L3"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "time_between_update": "Minimum time between entity updates [s]"
                        },
                        "title": "DSMR Options"
                    }
                }
            }
        },
        "dsmr_reader": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Make sure to configure the 'split topic' data sources in DSMR Reader."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "current_day_fixed_cost": {
                        "name": "Current day fixed cost"
                    },
                    "current_gas_usage": {
                        "name": "Current gas usage"
                    },
                    "current_month_fixed_cost": {
                        "name": "Current month fixed cost"
                    },
                    "current_month_gas_cost": {
                        "name": "Current month gas cost"
                    },
                    "current_month_gas_usage": {
                        "name": "Current month gas usage"
                    },
                    "current_month_high_tariff_cost": {
                        "name": "Current month high tariff cost"
                    },
                    "current_month_high_tariff_returned": {
                        "name": "Current month high tariff returned"
                    },
                    "current_month_high_tariff_usage": {
                        "name": "Current month high tariff usage"
                    },
                    "current_month_low_tariff_cost": {
                        "name": "Current month low tariff cost"
                    },
                    "current_month_low_tariff_returned": {
                        "name": "Current month low tariff returned"
                    },
                    "current_month_low_tariff_usage": {
                        "name": "Current month low tariff usage"
                    },
                    "current_month_power_return_total": {
                        "name": "Current month power return total"
                    },
                    "current_month_power_total_cost": {
                        "name": "Current month power total cost"
                    },
                    "current_month_power_usage_total": {
                        "name": "Current month power usage total"
                    },
                    "current_month_total_cost": {
                        "name": "Current month total cost"
                    },
                    "current_power_return": {
                        "name": "Current power return"
                    },
                    "current_power_return_l1": {
                        "name": "Current power return L1"
                    },
                    "current_power_return_l2": {
                        "name": "Current power return L2"
                    },
                    "current_power_return_l3": {
                        "name": "Current power return L3"
                    },
                    "current_power_usage": {
                        "name": "Current power usage"
                    },
                    "current_power_usage_l1": {
                        "name": "Current power usage L1"
                    },
                    "current_power_usage_l2": {
                        "name": "Current power usage L2"
                    },
                    "current_power_usage_l3": {
                        "name": "Current power usage L3"
                    },
                    "current_voltage_l1": {
                        "name": "Current voltage L1"
                    },
                    "current_voltage_l2": {
                        "name": "Current voltage L2"
                    },
                    "current_voltage_l3": {
                        "name": "Current voltage L3"
                    },
                    "current_year_fixed_cost": {
                        "name": "Current year fixed cost"
                    },
                    "current_year_gas_cost": {
                        "name": "Current year gas cost"
                    },
                    "current_year_gas_usage": {
                        "name": "Current year gas usage"
                    },
                    "current_year_high_tariff_cost": {
                        "name": "Current year high tariff cost"
                    },
                    "current_year_high_tariff_returned": {
                        "name": "Current year high tariff returned"
                    },
                    "current_year_high_tariff_usage": {
                        "name": "Current year high tariff usage"
                    },
                    "current_year_low_tariff_cost": {
                        "name": "Current year low tariff cost"
                    },
                    "current_year_low_tariff_returned": {
                        "name": "Current year low tariff returned"
                    },
                    "current_year_low_tariff_usage": {
                        "name": "Current year low tariff usage"
                    },
                    "current_year_power_returned_total": {
                        "name": "Current year power returned total"
                    },
                    "current_year_power_total_cost": {
                        "name": "Current year power total cost"
                    },
                    "current_year_power_usage_total": {
                        "name": "Current year power usage total"
                    },
                    "current_year_total_cost": {
                        "name": "Current year total cost"
                    },
                    "daily_gas_usage": {
                        "name": "Gas usage (daily)"
                    },
                    "daily_high_tariff_cost": {
                        "name": "High tariff cost (daily)"
                    },
                    "daily_high_tariff_return": {
                        "name": "High tariff return (daily)"
                    },
                    "daily_high_tariff_usage": {
                        "name": "High tariff usage (daily)"
                    },
                    "daily_low_tariff_cost": {
                        "name": "Low tariff cost (daily)"
                    },
                    "daily_low_tariff_return": {
                        "name": "Low tariff return (daily)"
                    },
                    "daily_low_tariff_usage": {
                        "name": "Low tariff usage (daily)"
                    },
                    "daily_power_return_total": {
                        "name": "Power return total (daily)"
                    },
                    "daily_power_total_cost": {
                        "name": "Power total cost (daily)"
                    },
                    "daily_power_usage_total": {
                        "name": "Power usage total (daily)"
                    },
                    "dsmr_version": {
                        "name": "DSMR version"
                    },
                    "electricity_tariff": {
                        "name": "Electricity tariff",
                        "state": {
                            "high": "High",
                            "low": "Low"
                        }
                    },
                    "gas_cost": {
                        "name": "Gas cost"
                    },
                    "gas_meter_read": {
                        "name": "Gas meter read"
                    },
                    "gas_meter_usage": {
                        "name": "Gas meter usage"
                    },
                    "gas_price": {
                        "name": "Gas Price"
                    },
                    "gas_usage": {
                        "name": "Gas usage"
                    },
                    "high_tariff_delivered_price": {
                        "name": "High tariff delivered price"
                    },
                    "high_tariff_returned": {
                        "name": "High tariff returned"
                    },
                    "high_tariff_returned_price": {
                        "name": "High tariff returned price"
                    },
                    "high_tariff_usage": {
                        "name": "High tariff usage"
                    },
                    "long_power_failure_count": {
                        "name": "Long power failure count"
                    },
                    "low_tariff_delivered_price": {
                        "name": "Low tariff delivered price"
                    },
                    "low_tariff_returned": {
                        "name": "Low tariff returned"
                    },
                    "low_tariff_returned_price": {
                        "name": "Low tariff returned price"
                    },
                    "low_tariff_usage": {
                        "name": "Low tariff usage"
                    },
                    "phase_power_current_l1": {
                        "name": "Phase power current L1"
                    },
                    "phase_power_current_l2": {
                        "name": "Phase power current L2"
                    },
                    "phase_power_current_l3": {
                        "name": "Phase power current L3"
                    },
                    "power_failure_count": {
                        "name": "Power failure count"
                    },
                    "previous_quarter_hour_peak_usage": {
                        "name": "Previous quarter-hour peak usage"
                    },
                    "quarter_hour_peak_end_time": {
                        "name": "Quarter-hour peak end time"
                    },
                    "quarter_hour_peak_start_time": {
                        "name": "Quarter-hour peak start time"
                    },
                    "rejected_telegrams": {
                        "name": "Rejected telegrams"
                    },
                    "telegram_timestamp": {
                        "name": "Telegram timestamp"
                    },
                    "total_cost": {
                        "name": "Total cost"
                    },
                    "voltage_sag_l1": {
                        "name": "Voltage sag L1"
                    },
                    "voltage_sag_l2": {
                        "name": "Voltage sag L2"
                    },
                    "voltage_sag_l3": {
                        "name": "Voltage sag L3"
                    },
                    "voltage_swell_l1": {
                        "name": "Voltage swell L1"
                    },
                    "voltage_swell_l2": {
                        "name": "Voltage swell L2"
                    },
                    "voltage_swell_l3": {
                        "name": "Voltage swell L3"
                    }
                }
            }
        },
        "duckdns": {
            "services": {
                "set_txt": {
                    "description": "Sets the TXT record of your DuckDNS subdomain.",
                    "fields": {
                        "txt": {
                            "description": "Payload for the TXT record.",
                            "name": "TXT"
                        }
                    },
                    "name": "Set TXT"
                }
            }
        },
        "dunehd": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Ensure that your player is turned on."
                    }
                }
            }
        },
        "duotecno": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "climate": {
                    "duotecno": {
                        "state_attributes": {
                            "preset_mode": {
                                "state": {
                                    "half_moon": "Half moon",
                                    "half_sun": "Half sun",
                                    "moon": "Moon",
                                    "sun": "Sun"
                                }
                            }
                        }
                    }
                }
            }
        },
        "dwd_weather_warnings": {
            "config": {
                "abort": {
                    "already_configured": "Warncell ID \/ name is already configured.",
                    "invalid_identifier": "The specified region identifier is invalid."
                },
                "error": {
                    "invalid_identifier": "The specified region identifier is invalid."
                },
                "step": {
                    "user": {
                        "data": {
                            "region_identifier": "Warncell ID or name"
                        },
                        "description": "To identify the desired region, the warncell ID \/ name is required."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "advance_warning_level": {
                        "name": "Advance warning level"
                    },
                    "current_warning_level": {
                        "name": "Current warning level"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Deutscher Wetterdienst (DWD) Weather Warnings using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Deutscher Wetterdienst (DWD) Weather Warnings YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Deutscher Wetterdienst (DWD) Weather Warnings YAML configuration is being removed"
                }
            }
        },
        "dynalite": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Gateway address to connect to DYNET network",
                        "title": "Configure Dynalite Connection"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Dynalite using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Dynalite YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Dynalite YAML configuration is being removed"
                }
            },
            "services": {
                "request_area_preset": {
                    "description": "Requests Dynalite to report the preset for an area.",
                    "fields": {
                        "area": {
                            "description": "Area to request the preset reported.",
                            "name": "Area"
                        },
                        "channel": {
                            "description": "Channel to request the preset to be reported from.",
                            "name": "Channel"
                        },
                        "host": {
                            "description": "Host gateway IP to send to or all configured gateways if not specified.",
                            "name": "Host"
                        }
                    },
                    "name": "Request area preset"
                },
                "request_channel_level": {
                    "description": "Requests Dynalite to report the level of a specific channel.",
                    "fields": {
                        "area": {
                            "description": "Area for the requested channel.",
                            "name": "Area"
                        },
                        "channel": {
                            "description": "Channel to request the level for.",
                            "name": "Channel"
                        },
                        "host": {
                            "description": "Host gateway IP to send to or all configured gateways if not specified.",
                            "name": "Host"
                        }
                    },
                    "name": "Request channel level"
                }
            }
        },
        "eafm": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_stations": "No flood monitoring stations found."
                },
                "step": {
                    "user": {
                        "data": {
                            "station": "Station"
                        },
                        "description": "Select the station you want to monitor",
                        "title": "Track a flood monitoring station"
                    }
                }
            }
        },
        "easyenergy": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "average_price": {
                        "name": "Average - today"
                    },
                    "current_hour_price": {
                        "name": "Current hour"
                    },
                    "highest_price_time": {
                        "name": "Time of highest price - today"
                    },
                    "hours_priced_equal_or_higher": {
                        "name": "Hours priced equal or higher than current - today"
                    },
                    "hours_priced_equal_or_lower": {
                        "name": "Hours priced equal or lower than current - today"
                    },
                    "lowest_price_time": {
                        "name": "Time of lowest price - today"
                    },
                    "max_price": {
                        "name": "Highest price - today"
                    },
                    "min_price": {
                        "name": "Lowest price - today"
                    },
                    "next_hour_price": {
                        "name": "Next hour"
                    },
                    "percentage_of_max": {
                        "name": "Current percentage of highest price - today"
                    }
                }
            }
        },
        "ebusd": {
            "services": {
                "write": {
                    "description": "Calls the ebusd write command.",
                    "fields": {
                        "call": {
                            "description": "Property name and value to set.",
                            "name": "Call"
                        }
                    },
                    "name": "Write"
                }
            },
            "state": {
                "day": "Day",
                "night": "Night"
            }
        },
        "ecobee": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "pin_request_failed": "Error requesting PIN from ecobee; please verify API key is correct.",
                    "token_request_failed": "Error requesting tokens from ecobee; please try again."
                },
                "step": {
                    "authorize": {
                        "description": "Please authorize this app at https:\/\/www.ecobee.com\/consumerportal\/index.html with PIN code:\n\n{pin}\n\nThen, press Submit.",
                        "title": "Authorize app on ecobee.com"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "Please enter the API key obtained from ecobee.com.",
                        "title": "ecobee API key"
                    }
                }
            },
            "entity": {
                "number": {
                    "ventilator_min_type_away": {
                        "name": "Ventilator min time away"
                    },
                    "ventilator_min_type_home": {
                        "name": "Ventilator min time home"
                    }
                }
            },
            "services": {
                "create_vacation": {
                    "description": "Creates a vacation on the selected thermostat. Note: start\/end date and time must all be specified together for these parameters to have an effect. If start\/end date and time are not specified, the vacation will start immediately and last 14 days (unless deleted earlier).",
                    "fields": {
                        "cool_temp": {
                            "description": "Cooling temperature during the vacation.",
                            "name": "Cool temperature"
                        },
                        "end_date": {
                            "description": "Date the vacation ends in the YYYY-MM-DD format (optional, 14 days from now if not provided along with start_date, start_time, and end_time).",
                            "name": "End date"
                        },
                        "end_time": {
                            "description": "Time the vacation ends, in the local time of the thermostat, in the 24-hour format \"HH:MM:SS\".",
                            "name": "End time"
                        },
                        "entity_id": {
                            "description": "Ecobee thermostat on which to create the vacation.",
                            "name": "Entity"
                        },
                        "fan_min_on_time": {
                            "description": "Minimum number of minutes to run the fan each hour (0 to 60) during the vacation.",
                            "name": "Fan minimum on time"
                        },
                        "fan_mode": {
                            "description": "Fan mode of the thermostat during the vacation.",
                            "name": "Fan mode"
                        },
                        "heat_temp": {
                            "description": "Heating temperature during the vacation.",
                            "name": "Heat temperature"
                        },
                        "start_date": {
                            "description": "Date the vacation starts in the YYYY-MM-DD format (optional, immediately if not provided along with start_time, end_date, and end_time).",
                            "name": "Start date"
                        },
                        "start_time": {
                            "description": "Time the vacation starts, in the local time of the thermostat, in the 24-hour format \"HH:MM:SS\".",
                            "name": "Start time"
                        },
                        "vacation_name": {
                            "description": "Name of the vacation to create; must be unique on the thermostat.",
                            "name": "Vacation name"
                        }
                    },
                    "name": "Create vacation"
                },
                "delete_vacation": {
                    "description": "Deletes a vacation on the selected thermostat.",
                    "fields": {
                        "entity_id": {
                            "description": "Ecobee thermostat on which to delete the vacation.",
                            "name": "Entity"
                        },
                        "vacation_name": {
                            "description": "Name of the vacation to delete.",
                            "name": "Vacation name"
                        }
                    },
                    "name": "Delete vacation"
                },
                "resume_program": {
                    "description": "Resumes the programmed schedule.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to change.",
                            "name": "Entity"
                        },
                        "resume_all": {
                            "description": "Resume all events and return to the scheduled program.",
                            "name": "Resume all"
                        }
                    },
                    "name": "Resume program"
                },
                "set_dst_mode": {
                    "description": "Enables\/disables automatic daylight savings time.",
                    "fields": {
                        "dst_enabled": {
                            "description": "Enable automatic daylight savings time.",
                            "name": "Daylight savings time enabled"
                        }
                    },
                    "name": "Set Daylight savings time mode"
                },
                "set_fan_min_on_time": {
                    "description": "Sets the minimum fan on time.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to change.",
                            "name": "Entity"
                        },
                        "fan_min_on_time": {
                            "description": "New value of fan min on time.",
                            "name": "Fan minimum on time"
                        }
                    },
                    "name": "Set fan minimum on time"
                },
                "set_mic_mode": {
                    "description": "Enables\/disables Alexa mic (only for Ecobee 4).",
                    "fields": {
                        "mic_enabled": {
                            "description": "Enable Alexa mic.",
                            "name": "Mic enabled"
                        }
                    },
                    "name": "Set mic mode"
                },
                "set_occupancy_modes": {
                    "description": "Enables\/disables Smart Home\/Away and Follow Me modes.",
                    "fields": {
                        "auto_away": {
                            "description": "Enable Smart Home\/Away mode.",
                            "name": "Auto away"
                        },
                        "follow_me": {
                            "description": "Enable Follow Me mode.",
                            "name": "Follow me"
                        }
                    },
                    "name": "Set occupancy modes"
                }
            }
        },
        "ecoforest": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "number": {
                    "power_level": {
                        "name": "Power level"
                    }
                },
                "sensor": {
                    "alarm": {
                        "name": "Alarm",
                        "state": {
                            "air_depression": "Air depression",
                            "cpu_overheating": "CPU overheating",
                            "none": "None",
                            "pellets": "Pellets",
                            "unkownn": "Unknown alarm"
                        }
                    },
                    "cpu_temperature": {
                        "name": "CPU temperature"
                    },
                    "gas_temperature": {
                        "name": "Gas temperature"
                    },
                    "ntc_temperature": {
                        "name": "NTC probe temperature"
                    },
                    "status": {
                        "name": "Status",
                        "state": {
                            "alarm": "Alarm",
                            "off": "Off",
                            "on": "On",
                            "pre_heating": "Pre-heating",
                            "shutting_down": "Shutting down",
                            "stand_by": "Standby",
                            "starting": "Starting"
                        }
                    }
                }
            }
        },
        "econet": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        },
                        "title": "Set up Rheem EcoNet Account"
                    }
                }
            }
        },
        "ecowitt": {
            "config": {
                "create_entry": {
                    "default": "To finish setting up the integration, use the Ecowitt App (on your phone) or access the Ecowitt WebUI in a browser at the station IP address.\n\nPick your station -> Menu Others -> DIY Upload Servers. Hit next and select 'Customized'\n\n- Server IP: `{server}`\n- Path: `{path}`\n- Port: `{port}`\n\nClick on 'Save'."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up Ecowitt?"
                    }
                }
            }
        },
        "edl21": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "serial_port": "USB Device Path"
                        },
                        "title": "Add your EDL21 smart meter"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "absolute_active_instantaneous_power": {
                        "name": "Absolute active instantaneous power"
                    },
                    "configuration_program_version_number": {
                        "name": "Configuration program version number"
                    },
                    "electricity_id": {
                        "name": "Electricity ID"
                    },
                    "firmware_version_number": {
                        "name": "Firmware version number"
                    },
                    "internal_operating_status": {
                        "name": "Internal operating status"
                    },
                    "l1_active_instantaneous_amperage": {
                        "name": "L1 active instantaneous amperage"
                    },
                    "l1_active_instantaneous_power": {
                        "name": "L1 active instantaneous power"
                    },
                    "l1_active_instantaneous_voltage": {
                        "name": "L1 active instantaneous voltage"
                    },
                    "l2_active_instantaneous_amperage": {
                        "name": "L2 active instantaneous amperage"
                    },
                    "l2_active_instantaneous_power": {
                        "name": "L2 active instantaneous power"
                    },
                    "l2_active_instantaneous_voltage": {
                        "name": "L2 active instantaneous voltage"
                    },
                    "l3_active_instantaneous_amperage": {
                        "name": "L3 active instantaneous amperage"
                    },
                    "l3_active_instantaneous_power": {
                        "name": "L3 active instantaneous power"
                    },
                    "l3_active_instantaneous_voltage": {
                        "name": "L3 active instantaneous voltage"
                    },
                    "last_signed_positive_active_energy_total": {
                        "name": "Last signed positive active energy total"
                    },
                    "metering_point_id_1": {
                        "name": "Metering point ID 1"
                    },
                    "negative_active_energy_tariff_t1": {
                        "name": "Negative active energy in tariff T1"
                    },
                    "negative_active_energy_tariff_t2": {
                        "name": "Negative active energy in tariff T2"
                    },
                    "negative_active_energy_total": {
                        "name": "Negative active energy total"
                    },
                    "ownership_id": {
                        "name": "Ownership ID"
                    },
                    "positive_active_energy_tariff_t1": {
                        "name": "Positive active energy in tariff T1"
                    },
                    "positive_active_energy_tariff_t2": {
                        "name": "Positive active energy in tariff T2"
                    },
                    "positive_active_energy_total": {
                        "name": "Positive active energy total"
                    },
                    "positive_active_instantaneous_power": {
                        "name": "Positive active instantaneous power"
                    },
                    "sum_active_instantaneous_power": {
                        "name": "Sum active instantaneous power"
                    },
                    "supply_frequency": {
                        "name": "Supply frequency"
                    },
                    "u_l1_i_l1_phase_angle": {
                        "name": "U(L1)\/I(L1) phase angle"
                    },
                    "u_l2_i_l2_phase_angle": {
                        "name": "U(L2)\/I(L2) phase angle"
                    },
                    "u_l2_u_l1_phase_angle": {
                        "name": "U(L2)\/U(L1) phase angle"
                    },
                    "u_l3_i_l3_phase_angle": {
                        "name": "U(L3)\/I(L3) phase angle"
                    },
                    "u_l3_u_l1_phase_angle": {
                        "name": "U(L3)\/U(L1) phase angle"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring EDL21 using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the EDL21 YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "EDL21 YAML configuration is being removed"
                }
            }
        },
        "efergy": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "budget": {
                        "name": "Energy budget"
                    },
                    "cost_day": {
                        "name": "Daily energy cost"
                    },
                    "cost_month": {
                        "name": "Monthly energy cost"
                    },
                    "cost_week": {
                        "name": "Weekly energy cost"
                    },
                    "cost_year": {
                        "name": "Yearly energy cost"
                    },
                    "energy_day": {
                        "name": "Daily consumption"
                    },
                    "energy_month": {
                        "name": "Monthly consumption"
                    },
                    "energy_week": {
                        "name": "Weekly consumption"
                    },
                    "energy_year": {
                        "name": "Yearly consumption"
                    },
                    "instant_readings": {
                        "name": "Power usage"
                    }
                }
            }
        },
        "eight_sleep": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Cannot connect to Eight Sleep cloud: {error}"
                },
                "error": {
                    "cannot_connect": "Cannot connect to Eight Sleep cloud: {error}"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "services": {
                "heat_set": {
                    "description": "Sets heating\/cooling level for eight sleep.",
                    "fields": {
                        "duration": {
                            "description": "Duration to heat\/cool at the target level in seconds.",
                            "name": "Duration"
                        },
                        "target": {
                            "description": "Target cooling\/heating level from -100 to 100.",
                            "name": "Target"
                        }
                    },
                    "name": "Heat set"
                }
            }
        },
        "electrasmart": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_phone_number": "Either wrong phone number or unregistered user",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "one_time_password": {
                        "data": {
                            "one_time_password": "One Time Password"
                        }
                    },
                    "user": {
                        "data": {
                            "phone_number": "Phone Number"
                        }
                    }
                }
            }
        },
        "electric_kiwi": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful",
                    "user_rejected_authorize": "Account linking rejected: {error}"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Electric Kiwi integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "entity": {
                "select": {
                    "hopselector": {
                        "name": "Hour of free power"
                    }
                },
                "sensor": {
                    "hopfreepowerend": {
                        "name": "Hour of free power end"
                    },
                    "hopfreepowerstart": {
                        "name": "Hour of free power start"
                    }
                }
            }
        },
        "elgato": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{serial_number}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Set up your Elgato Light to integrate with Home Assistant."
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the Elgato Light with serial number `{serial_number}` to Home Assistant?",
                        "title": "Discovered Elgato Light device"
                    }
                }
            },
            "entity": {
                "button": {
                    "identify": {
                        "name": "Identify"
                    },
                    "restart": {
                        "name": "Restart"
                    }
                },
                "sensor": {
                    "battery": {
                        "name": "Battery"
                    },
                    "charge_power": {
                        "name": "Charging power"
                    },
                    "input_charge_current": {
                        "name": "Charging current"
                    },
                    "input_charge_voltage": {
                        "name": "Charging voltage"
                    },
                    "voltage": {
                        "name": "Battery voltage"
                    }
                },
                "switch": {
                    "bypass": {
                        "name": "Studio mode"
                    },
                    "energy_saving": {
                        "name": "Energy saving"
                    }
                }
            },
            "services": {
                "identify": {
                    "description": "Identifies an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.",
                    "name": "Identify"
                }
            }
        },
        "elkm1": {
            "config": {
                "abort": {
                    "address_already_configured": "An ElkM1 with this address is already configured",
                    "already_configured": "An ElkM1 with this prefix is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{mac_address} ({host})",
                "step": {
                    "discovered_connection": {
                        "data": {
                            "password": "Password",
                            "protocol": "Protocol",
                            "temperature_unit": "The temperature unit ElkM1 uses.",
                            "username": "Username"
                        },
                        "description": "Connect to the discovered system: {mac_address} ({host})",
                        "title": "Connect to Elk-M1 Control"
                    },
                    "manual_connection": {
                        "data": {
                            "address": "The IP address or domain or serial port if connecting via serial.",
                            "password": "Password",
                            "prefix": "A unique prefix (leave blank if you only have one ElkM1).",
                            "protocol": "Protocol",
                            "temperature_unit": "The temperature unit ElkM1 uses.",
                            "username": "Username"
                        },
                        "description": "The address string must be in the form 'address[:port]' for 'secure' and 'non-secure'. Example: '192.168.1.1'. The port is optional and defaults to 2101 for 'non-secure' and 2601 for 'secure'. For the serial protocol, the address must be in the form 'tty[:baud]'. Example: '\/dev\/ttyS1'. The baud is optional and defaults to 115200.",
                        "title": "Connect to Elk-M1 Control"
                    },
                    "user": {
                        "data": {
                            "device": "Device"
                        },
                        "description": "Choose a discovered system or 'Manual Entry' if no devices have been discovered.",
                        "title": "Connect to Elk-M1 Control"
                    }
                }
            },
            "services": {
                "alarm_arm_home_instant": {
                    "description": "Arms the ElkM1 in home instant mode.",
                    "fields": {
                        "code": {
                            "description": "An code to arm the alarm control panel.",
                            "name": "Code"
                        }
                    },
                    "name": "Alarm are home instant"
                },
                "alarm_arm_night_instant": {
                    "description": "Arms the ElkM1 in night instant mode.",
                    "fields": {
                        "code": {
                            "description": "An code to arm the alarm control panel.",
                            "name": "Code"
                        }
                    },
                    "name": "Alarm arm night instant"
                },
                "alarm_arm_vacation": {
                    "description": "Arm the ElkM1 in vacation mode.",
                    "fields": {
                        "code": {
                            "description": "An code to arm the alarm control panel.",
                            "name": "Code"
                        }
                    },
                    "name": "Alarm arm vacation"
                },
                "alarm_bypass": {
                    "description": "Bypasses all zones for the area.",
                    "fields": {
                        "code": {
                            "description": "An code to authorize the bypass of the alarm control panel.",
                            "name": "Code"
                        }
                    },
                    "name": "Alarm bypass"
                },
                "alarm_clear_bypass": {
                    "description": "Removes bypass on all zones for the area.",
                    "fields": {
                        "code": {
                            "description": "An code to authorize the bypass clear of the alarm control panel.",
                            "name": "Code"
                        }
                    },
                    "name": "Alarm clear bypass"
                },
                "alarm_display_message": {
                    "description": "Displays a message on all of the ElkM1 keypads for an area.",
                    "fields": {
                        "beep": {
                            "description": "0=no beep, 1=beep.",
                            "name": "Beep"
                        },
                        "clear": {
                            "description": "0=clear message, 1=clear message with * key, 2=Display until timeout.",
                            "name": "Clear"
                        },
                        "line1": {
                            "description": "Up to 16 characters of text (truncated if too long).",
                            "name": "Line 1"
                        },
                        "line2": {
                            "description": "Up to 16 characters of text (truncated if too long).",
                            "name": "Line 2"
                        },
                        "timeout": {
                            "description": "Time to display message, 0=forever, max 65535.",
                            "name": "Timeout"
                        }
                    },
                    "name": "Alarm display message"
                },
                "sensor_counter_refresh": {
                    "description": "Refreshes the value of a counter from the panel.",
                    "name": "Sensor counter refresh"
                },
                "sensor_counter_set": {
                    "description": "Sets the value of a counter on the panel.",
                    "fields": {
                        "value": {
                            "description": "Value to set the counter to.",
                            "name": "Value"
                        }
                    },
                    "name": "Sensor counter set"
                },
                "sensor_zone_bypass": {
                    "description": "Bypasses zone.",
                    "fields": {
                        "code": {
                            "description": "An code to authorize the bypass of the zone.",
                            "name": "Code"
                        }
                    },
                    "name": "Sensor zone bypass"
                },
                "sensor_zone_trigger": {
                    "description": "Triggers zone.",
                    "name": "Sensor zone trigger"
                },
                "set_time": {
                    "description": "Sets the time for the panel.",
                    "fields": {
                        "prefix": {
                            "description": "Prefix for the panel.",
                            "name": "Prefix"
                        }
                    },
                    "name": "Set time"
                },
                "speak_phrase": {
                    "description": "Speaks a phrase. See list of phrases in ElkM1 ASCII Protocol documentation.",
                    "fields": {
                        "number": {
                            "description": "Phrase number to speak.",
                            "name": "Phrase number"
                        },
                        "prefix": {
                            "description": "Prefix to identify panel when multiple panels configured.",
                            "name": "Prefix"
                        }
                    },
                    "name": "Speak phrase"
                },
                "speak_word": {
                    "description": "Speaks a word. See list of words in ElkM1 ASCII Protocol documentation.",
                    "fields": {
                        "number": {
                            "description": "Word number to speak.",
                            "name": "Word number"
                        },
                        "prefix": {
                            "description": "Prefix to identify panel when multiple panels configured.",
                            "name": "Prefix"
                        }
                    },
                    "name": "Speak word"
                }
            }
        },
        "elmax": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "invalid_pin": "The provided pin is invalid",
                    "network_error": "A network error occurred",
                    "no_panel_online": "No online Elmax control panel was found.",
                    "reauth_panel_disappeared": "The given panel is no longer associated to this user. Please log in using an account associated to this panel.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "panels": {
                        "data": {
                            "panel_id": "Panel ID",
                            "panel_name": "Panel Name",
                            "panel_pin": "PIN Code"
                        },
                        "description": "Select which panel you would like to control with this integration. Please note that the panel must be ON in order to be configured."
                    },
                    "reauth_confirm": {
                        "data": {
                            "panel_pin": "Panel Pin",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please re-authenticate with the panel."
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please login to the Elmax cloud using your credentials"
                    }
                }
            }
        },
        "emonitor": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "description": "Do you want to set up {name} ({host})?",
                        "title": "Set up SiteSage Emonitor"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            }
        },
        "emulated_roku": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "advertise_ip": "Advertise IP Address",
                            "advertise_port": "Advertise Port",
                            "host_ip": "Host IP Address",
                            "listen_port": "Listen Port",
                            "name": "Name",
                            "upnp_bind_multicast": "Bind multicast (True\/False)"
                        },
                        "title": "Define server configuration"
                    }
                }
            },
            "title": "Emulated Roku"
        },
        "energy": {
            "issues": {
                "entity_negative_state": {
                    "description": "The following entities have a negative state while a positive state is expected:",
                    "title": "Entity has a negative state"
                },
                "entity_not_defined": {
                    "description": "Check the integration or your configuration that provides:",
                    "title": "Entity not defined"
                },
                "entity_state_class_measurement_no_last_reset": {
                    "description": "The following entities have state class 'measurement' but 'last_reset' is missing:",
                    "title": "Last reset missing"
                },
                "entity_state_non_numeric": {
                    "description": "The following entities have a state that cannot be parsed as a number:",
                    "title": "Entity has non-numeric state"
                },
                "entity_unavailable": {
                    "description": "The state of these configured entities are currently not available:",
                    "title": "Entity unavailable"
                },
                "entity_unexpected_device_class": {
                    "description": "The following entities do not have the expected device class:",
                    "title": "Unexpected device class"
                },
                "entity_unexpected_state_class": {
                    "description": "The following entities do not have the expected state class:",
                    "title": "Unexpected state class"
                },
                "entity_unexpected_unit_energy": {
                    "description": "The following entities do not have an expected unit of measurement (either of {energy_units}):",
                    "title": "Unexpected unit of measurement"
                },
                "entity_unexpected_unit_energy_price": {
                    "description": "The following entities do not have an expected unit of measurement {price_units}:",
                    "title": "Unexpected unit of measurement"
                },
                "entity_unexpected_unit_gas": {
                    "description": "The following entities do not have an expected unit of measurement (either of {energy_units} for an energy sensor or either of {gas_units} for a gas sensor):",
                    "title": "Unexpected unit of measurement"
                },
                "entity_unexpected_unit_gas_price": {
                    "description": "The following entities do not have an expected unit of measurement {price_units}:",
                    "title": "Unexpected unit of measurement"
                },
                "entity_unexpected_unit_water": {
                    "description": "The following entities do not have the expected unit of measurement (either of {water_units}):",
                    "title": "Unexpected unit of measurement"
                },
                "entity_unexpected_unit_water_price": {
                    "description": "The following entities do not have an expected unit of measurement {price_units}:",
                    "title": "Unexpected unit of measurement"
                },
                "recorder_untracked": {
                    "description": "The recorder has been configured to exclude these configured entities:",
                    "title": "Entity not tracked"
                }
            },
            "title": "Energy"
        },
        "energyzero": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "average_price": {
                        "name": "Average - today"
                    },
                    "current_hour_price": {
                        "name": "Current hour"
                    },
                    "highest_price_time": {
                        "name": "Time of highest price - today"
                    },
                    "hours_priced_equal_or_higher": {
                        "name": "Hours priced equal or higher than current - today"
                    },
                    "hours_priced_equal_or_lower": {
                        "name": "Hours priced equal or lower than current - today"
                    },
                    "lowest_price_time": {
                        "name": "Time of lowest price - today"
                    },
                    "max_price": {
                        "name": "Highest price - today"
                    },
                    "min_price": {
                        "name": "Lowest price - today"
                    },
                    "next_hour_price": {
                        "name": "Next hour"
                    },
                    "percentage_of_max": {
                        "name": "Current percentage of highest price - today"
                    }
                }
            },
            "services": {
                "get_prices": {
                    "description": "Request energy or gas prices from EnergyZero.",
                    "fields": {
                        "end": {
                            "description": "Until which moment to get the prices. Defaults to today if omitted.",
                            "name": "End"
                        },
                        "incl_vat": {
                            "description": "Include VAT in the prices. Defaults to true if omitted.",
                            "name": "Including VAT"
                        },
                        "start": {
                            "description": "From which moment to get the prices. Defaults to today if omitted.",
                            "name": "Start"
                        },
                        "type": {
                            "description": "Type of prices to get, energy or gas.",
                            "name": "Type"
                        }
                    },
                    "name": "Get prices"
                }
            }
        },
        "enocean": {
            "config": {
                "abort": {
                    "invalid_dongle_path": "Invalid dongle path",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_dongle_path": "No valid dongle found for this path"
                },
                "step": {
                    "detect": {
                        "data": {
                            "path": "USB dongle path"
                        },
                        "title": "Select the path to your ENOcean dongle"
                    },
                    "manual": {
                        "data": {
                            "path": "USB dongle path"
                        },
                        "title": "Enter the path to your ENOcean dongle"
                    }
                }
            }
        },
        "enphase_envoy": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Cannot connect: {reason}",
                    "invalid_auth": "Invalid authentication: {reason}",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{serial} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "For firmware version 7.0 and later, enter the Enphase cloud credentials, for older models, enter username `installer` without a password."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "communicating": {
                        "name": "Communicating"
                    },
                    "dc_switch": {
                        "name": "DC switch"
                    },
                    "grid_status": {
                        "name": "Grid status"
                    },
                    "operating": {
                        "name": "Operating"
                    },
                    "relay": {
                        "name": "Relay status"
                    }
                },
                "number": {
                    "cutoff_battery_level": {
                        "name": "Cutoff battery level"
                    },
                    "restore_battery_level": {
                        "name": "Restore battery level"
                    }
                },
                "select": {
                    "relay_generator_action": {
                        "name": "Generator action",
                        "state": {
                            "none": "None",
                            "not_powered": "Not powered",
                            "powered": "Powered",
                            "schedule": "Follow schedule"
                        }
                    },
                    "relay_grid_action": {
                        "name": "Grid action",
                        "state": {
                            "none": "None",
                            "not_powered": "Not powered",
                            "powered": "Powered",
                            "schedule": "Follow schedule"
                        }
                    },
                    "relay_microgrid_action": {
                        "name": "Microgrid action",
                        "state": {
                            "none": "None",
                            "not_powered": "Not powered",
                            "powered": "Powered",
                            "schedule": "Follow schedule"
                        }
                    },
                    "relay_mode": {
                        "name": "Mode",
                        "state": {
                            "battery": "Battery level",
                            "standard": "Standard"
                        }
                    }
                },
                "sensor": {
                    "available_energy": {
                        "name": "Available battery energy"
                    },
                    "configured_reserve_soc": {
                        "name": "Configured reserve battery level"
                    },
                    "current_power_consumption": {
                        "name": "Current power consumption"
                    },
                    "current_power_production": {
                        "name": "Current power production"
                    },
                    "daily_consumption": {
                        "name": "Energy consumption today"
                    },
                    "daily_production": {
                        "name": "Energy production today"
                    },
                    "last_reported": {
                        "name": "Last reported"
                    },
                    "lifetime_consumption": {
                        "name": "Lifetime energy consumption"
                    },
                    "lifetime_production": {
                        "name": "Lifetime energy production"
                    },
                    "max_capacity": {
                        "name": "Battery capacity"
                    },
                    "reserve_energy": {
                        "name": "Reserve battery energy"
                    },
                    "reserve_soc": {
                        "name": "Reserve battery level"
                    },
                    "seven_days_consumption": {
                        "name": "Energy consumption last seven days"
                    },
                    "seven_days_production": {
                        "name": "Energy production last seven days"
                    }
                },
                "switch": {
                    "grid_enabled": {
                        "name": "Grid enabled"
                    }
                }
            }
        },
        "environment_canada": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "bad_station_id": "Station ID is invalid, missing, or not found in the station ID database",
                    "cannot_connect": "Failed to connect",
                    "error_response": "Response from Environment Canada in error",
                    "too_many_attempts": "Connections to Environment Canada are rate limited; Try again in 60 seconds",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "language": "Weather information language",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "station": "Weather station ID"
                        },
                        "description": "Either a station ID or latitude\/longitude must be specified. The default latitude\/longitude used are the values configured in your Home Assistant installation. The closest weather station to the coordinates will be used if specifying coordinates. If a station code is used it must follow the format: PP\/code, where PP is the two-letter province and code is the station ID. The list of station IDs can be found here: https:\/\/dd.weather.gc.ca\/citypage_weather\/docs\/site_list_towns_en.csv. Weather information can be retrieved in either English or French.",
                        "title": "Environment Canada: weather location and language"
                    }
                }
            },
            "entity": {
                "camera": {
                    "radar": {
                        "name": "Radar"
                    }
                },
                "sensor": {
                    "advisories": {
                        "name": "Advisory"
                    },
                    "aqhi": {
                        "name": "AQHI"
                    },
                    "condition": {
                        "name": "Current condition"
                    },
                    "dewpoint": {
                        "name": "Dew point"
                    },
                    "endings": {
                        "name": "Endings"
                    },
                    "high_temp": {
                        "name": "High temperature"
                    },
                    "humidex": {
                        "name": "Humidex"
                    },
                    "icon_code": {
                        "name": "Icon code"
                    },
                    "low_temp": {
                        "name": "Low temperature"
                    },
                    "normal_high": {
                        "name": "Normal high temperature"
                    },
                    "normal_low": {
                        "name": "Normal low temperature"
                    },
                    "pop": {
                        "name": "Chance of precipitation"
                    },
                    "precip_yesterday": {
                        "name": "Precipitation yesterday"
                    },
                    "pressure": {
                        "name": "Barometric pressure"
                    },
                    "statements": {
                        "name": "Statements"
                    },
                    "tendency": {
                        "name": "Tendency"
                    },
                    "text_summary": {
                        "name": "Summary"
                    },
                    "timestamp": {
                        "name": "Observation time"
                    },
                    "uv_index": {
                        "name": "UV index"
                    },
                    "visibility": {
                        "name": "Visibility"
                    },
                    "warnings": {
                        "name": "Warnings"
                    },
                    "watches": {
                        "name": "Watches"
                    },
                    "wind_bearing": {
                        "name": "Wind bearing"
                    },
                    "wind_chill": {
                        "name": "Wind chill"
                    },
                    "wind_dir": {
                        "name": "Wind direction"
                    },
                    "wind_gust": {
                        "name": "Wind gust"
                    }
                },
                "weather": {
                    "forecast": {
                        "name": "Forecast"
                    },
                    "hourly_forecast": {
                        "name": "Hourly forecast"
                    }
                }
            },
            "services": {
                "set_radar_type": {
                    "description": "Sets the type of radar image to retrieve.",
                    "fields": {
                        "radar_type": {
                            "description": "The type of radar image to display.",
                            "name": "Radar type"
                        }
                    },
                    "name": "Set radar type"
                }
            }
        },
        "envisalink": {
            "services": {
                "alarm_keypress": {
                    "description": "Sends custom keypresses to the alarm.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the alarm control panel to trigger.",
                            "name": "Entity"
                        },
                        "keypress": {
                            "description": "String to send to the alarm panel (1-6 characters).",
                            "name": "Keypress"
                        }
                    },
                    "name": "Alarm keypress"
                },
                "invoke_custom_function": {
                    "description": "Allows users with DSC panels to trigger a PGM output (1-4). Note that you need to specify the alarm panel's \"code\" parameter for this to work.\n.",
                    "fields": {
                        "partition": {
                            "description": "The alarm panel partition to trigger the PGM output on. Typically this is just \"1\".\n.",
                            "name": "Partition"
                        },
                        "pgm": {
                            "description": "The PGM number to trigger on the alarm panel.",
                            "name": "PGM"
                        }
                    },
                    "name": "Invoke custom function"
                }
            }
        },
        "epson": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "powered_off": "Is projector turned on? You need to turn on projector for initial configuration."
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        }
                    }
                }
            },
            "services": {
                "select_cmode": {
                    "description": "Selects color mode of Epson projector.",
                    "fields": {
                        "cmode": {
                            "description": "Name of Cmode.",
                            "name": "Color mode"
                        }
                    },
                    "name": "Select color mode"
                }
            }
        },
        "escea": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up an Escea fireplace?"
                    }
                }
            }
        },
        "esphome": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "mdns_missing_mac": "Missing MAC address in MDNS properties.",
                    "reauth_successful": "Re-authentication was successful",
                    "service_received": "Service received"
                },
                "error": {
                    "connection_error": "Can't connect to ESP. Please make sure your YAML file contains an 'api:' line.",
                    "invalid_auth": "Invalid authentication",
                    "invalid_psk": "The transport encryption key is invalid. Please ensure it matches what you have in your configuration",
                    "resolve_error": "Can't resolve address of the ESP. If this error persists, please set a static IP address"
                },
                "flow_title": "{name}",
                "step": {
                    "authenticate": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please enter the password you set in your configuration for {name}."
                    },
                    "discovery_confirm": {
                        "description": "Do you want to add the ESPHome node `{name}` to Home Assistant?",
                        "title": "Discovered ESPHome node"
                    },
                    "encryption_key": {
                        "data": {
                            "noise_psk": "Encryption key"
                        },
                        "description": "Please enter the encryption key for {name}. You can find it in the ESPHome Dashboard or in your device configuration."
                    },
                    "reauth_confirm": {
                        "data": {
                            "noise_psk": "Encryption key"
                        },
                        "description": "The ESPHome device {name} enabled transport encryption or changed the encryption key. Please enter the updated key. You can find it in the ESPHome Dashboard or in your device configuration."
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Please enter connection settings of your [ESPHome]({esphome_url}) node."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "assist_in_progress": {
                        "name": "Assist in progress"
                    },
                    "call_active": {
                        "name": "Call Active"
                    }
                },
                "climate": {
                    "climate": {
                        "state_attributes": {
                            "fan_mode": {
                                "state": {
                                    "quiet": "Quiet"
                                }
                            }
                        }
                    }
                },
                "select": {
                    "pipeline": {
                        "name": "Assist pipeline",
                        "state": {
                            "preferred": "Preferred"
                        }
                    },
                    "vad_sensitivity": {
                        "name": "Finished speaking detection",
                        "state": {
                            "aggressive": "Aggressive",
                            "default": "Default",
                            "relaxed": "Relaxed"
                        }
                    }
                }
            },
            "issues": {
                "api_password_deprecated": {
                    "description": "The API password for ESPHome is deprecated and the use of an API encryption key is recommended instead.\n\nRemove the API password and add an encryption key to your ESPHome device to resolve this issue.",
                    "title": "API Password deprecated on {name}"
                },
                "ble_firmware_outdated": {
                    "description": "To improve Bluetooth reliability and performance, we highly recommend updating {name} with ESPHome {version} or later. When updating the device from ESPHome earlier than 2022.12.0, it is recommended to use a serial cable instead of an over-the-air update to take advantage of the new partition scheme.",
                    "title": "Update {name} with ESPHome {version} or later"
                },
                "service_calls_not_allowed": {
                    "description": "The ESPHome device attempted to make a Home Assistant service call, but this functionality is not enabled.\n\nIf you trust this device and want to allow it to make Home Assistant service calls, you can enable this functionality in the options flow.",
                    "title": "{name} is not permitted to call Home Assistant services"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "allow_service_calls": "Allow the device to make Home Assistant service calls."
                        }
                    }
                }
            }
        },
        "eufylife_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "heart_rate": {
                        "name": "Heart rate"
                    },
                    "real_time_weight": {
                        "name": "Real-time weight"
                    },
                    "weight": {
                        "name": "Weight"
                    }
                }
            }
        },
        "event": {
            "entity_component": {
                "_": {
                    "name": "Button",
                    "state_attributes": {
                        "event_type": {
                            "name": "Event type"
                        },
                        "event_types": {
                            "name": "Event types"
                        }
                    }
                },
                "button": {
                    "name": "Button"
                },
                "doorbell": {
                    "name": "Doorbell"
                },
                "motion": {
                    "name": "Motion"
                }
            },
            "title": "Event"
        },
        "evil_genius_labs": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "timeout": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            }
        },
        "evohome": {
            "services": {
                "clear_zone_override": {
                    "description": "Sets a zone to follow its schedule.",
                    "fields": {
                        "entity_id": {
                            "description": "The entity_id of the zone.",
                            "name": "Entity"
                        }
                    },
                    "name": "Clear zone override"
                },
                "refresh_system": {
                    "description": "Pulls the latest data from the vendor's servers now, rather than waiting for the next scheduled update.",
                    "name": "Refresh system"
                },
                "reset_system": {
                    "description": "Sets the system to Auto mode and reset all the zones to follow their schedules. Not all Evohome systems support this feature (i.e. AutoWithReset mode).",
                    "name": "Reset system"
                },
                "set_system_mode": {
                    "description": "Sets the system mode, either indefinitely, or for a specified period of time, after which it will revert to Auto. Not all systems support all modes.",
                    "fields": {
                        "duration": {
                            "description": "The duration in hours; used only with AutoWithEco (up to 24 hours).",
                            "name": "Duration"
                        },
                        "mode": {
                            "description": "Mode to set thermostat.",
                            "name": "Mode"
                        },
                        "period": {
                            "description": "A period of time in days; used only with Away, DayOff, or Custom. The system will revert to Auto at midnight (up to 99 days, today is day 1).",
                            "name": "Period"
                        }
                    },
                    "name": "Set system mode"
                },
                "set_zone_override": {
                    "description": "Overrides a zone's setpoint, either indefinitely, or for a specified period of time, after which it will revert to following its schedule.",
                    "fields": {
                        "duration": {
                            "description": "The zone will revert to its schedule after this time. If 0 the change is until the next scheduled setpoint.",
                            "name": "Duration"
                        },
                        "entity_id": {
                            "description": "The entity_id of the Evohome zone.",
                            "name": "Entity"
                        },
                        "setpoint": {
                            "description": "The temperature to be used instead of the scheduled setpoint.",
                            "name": "Setpoint"
                        }
                    },
                    "name": "Set zone override"
                }
            }
        },
        "ezviz": {
            "config": {
                "abort": {
                    "already_configured_account": "Account is already configured",
                    "ezviz_cloud_account_missing": "Ezviz cloud account missing. Please reconfigure Ezviz cloud account",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_host": "Invalid hostname or IP address",
                    "mfa_required": "2FA enabled on account, please disable and retry"
                },
                "flow_title": "{serial}",
                "step": {
                    "confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Enter RTSP credentials for EZVIZ camera {serial} with IP {ip_address}",
                        "title": "Discovered EZVIZ Camera"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Enter credentials to reauthenticate to ezviz cloud account",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username"
                        },
                        "title": "Connect to EZVIZ Cloud"
                    },
                    "user_custom_url": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username"
                        },
                        "description": "Manually specify your region URL",
                        "title": "Connect to custom EZVIZ URL"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "alarm_schedules_enabled": {
                        "name": "Alarm schedules enabled"
                    },
                    "encrypted": {
                        "name": "Encryption"
                    }
                },
                "button": {
                    "ptz_down": {
                        "name": "PTZ down"
                    },
                    "ptz_left": {
                        "name": "PTZ left"
                    },
                    "ptz_right": {
                        "name": "PTZ right"
                    },
                    "ptz_up": {
                        "name": "PTZ up"
                    }
                },
                "image": {
                    "last_motion_image": {
                        "name": "Last motion image"
                    }
                },
                "light": {
                    "light": {
                        "name": "Light"
                    }
                },
                "number": {
                    "detection_sensibility": {
                        "name": "Detection sensitivity"
                    }
                },
                "select": {
                    "alarm_sound_mode": {
                        "name": "Warning sound",
                        "state": {
                            "intensive": "Intensive",
                            "silent": "Silent",
                            "soft": "Soft"
                        }
                    }
                },
                "sensor": {
                    "alarm_sound_mod": {
                        "name": "Alarm sound level"
                    },
                    "last_alarm_pic": {
                        "name": "Last alarm picture URL"
                    },
                    "last_alarm_time": {
                        "name": "Last alarm time"
                    },
                    "last_alarm_type_code": {
                        "name": "Last alarm type code"
                    },
                    "last_alarm_type_name": {
                        "name": "Last alarm type name"
                    },
                    "local_ip": {
                        "name": "Local IP"
                    },
                    "pir_status": {
                        "name": "PIR status"
                    },
                    "seconds_last_trigger": {
                        "name": "Seconds since last trigger"
                    },
                    "supported_channels": {
                        "name": "Supported channels"
                    },
                    "wan_ip": {
                        "name": "WAN IP"
                    }
                },
                "siren": {
                    "siren": {
                        "name": "Siren"
                    }
                },
                "switch": {
                    "all_day_video_recording": {
                        "name": "All day video recording"
                    },
                    "audio": {
                        "name": "Audio"
                    },
                    "auto_sleep": {
                        "name": "Auto sleep"
                    },
                    "flicker_light_on_movement": {
                        "name": "Flicker light on movement"
                    },
                    "follow_movement": {
                        "name": "Follow movement"
                    },
                    "infrared_light": {
                        "name": "Infrared light"
                    },
                    "motion_tracking": {
                        "name": "Motion tracking"
                    },
                    "pir_motion_activated_light": {
                        "name": "PIR motion activated light"
                    },
                    "privacy": {
                        "name": "Privacy"
                    },
                    "sleep": {
                        "name": "Sleep"
                    },
                    "status_light": {
                        "name": "Status light"
                    },
                    "tamper_alarm": {
                        "name": "Tamper alarm"
                    }
                },
                "update": {
                    "firmware": {
                        "name": "Firmware"
                    }
                }
            },
            "issues": {
                "service_deprecation_alarm_sound_level": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Ezviz Alarm sound level service is deprecated and will be removed.\nTo set the Alarm sound level, you can instead use the `select.select_option` service targetting the Warning sound entity.\n\nPlease remove this service from your automations and scripts and select **submit** to close this issue.",
                                "title": "Ezviz Alarm sound level service is being removed"
                            }
                        }
                    },
                    "title": "Ezviz Alarm sound level service is being removed"
                },
                "service_depreciation_detection_sensibility": {
                    "description": "Ezviz Detection sensitivity service is deprecated and will be removed in Home Assistant 2023.12; Please adjust the automation or script that uses the service and select submit below to mark this issue as resolved.",
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The Ezviz Detection sensitivity service is deprecated and will be removed in Home Assistant 2023.12.\nTo set the sensitivity, you can instead use the `number.set_value` service targetting the Detection sensitivity entity.\n\nPlease remove this service from your automations and scripts and select **submit** to close this issue.",
                                "title": "Ezviz Detection sensitivity service is being removed"
                            }
                        }
                    },
                    "title": "Ezviz Detection sensitivity service is being removed"
                },
                "service_depreciation_ptz": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "EZVIZ PTZ service is deprecated and will be removed.\nTo move the camera, you can instead use the `button.press` service targetting the PTZ* entities.\n\nPlease remove the use of this service from your automations and scripts and select **submit** to close this issue.",
                                "title": "EZVIZ PTZ service is being removed"
                            }
                        }
                    },
                    "title": "EZVIZ PTZ service is being removed"
                },
                "service_depreciation_sound_alarm": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Ezviz Sound alarm service is deprecated and will be removed.\nTo sound the alarm, you can instead use the `siren.toggle` service targeting the Siren entity.\n\nPlease remove the use of this service from your automations and scripts and select **submit** to fix this issue.",
                                "title": "Ezviz Sound alarm service is being removed"
                            }
                        }
                    },
                    "title": "Ezviz Sound alarm service is being removed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "ffmpeg_arguments": "Arguments passed to ffmpeg for cameras",
                            "timeout": "Request Timeout (seconds)"
                        }
                    }
                }
            },
            "services": {
                "alarm_sound": {
                    "description": "Setx movement warning sound level.",
                    "fields": {
                        "level": {
                            "description": "Sound level (2 is disabled, 1 intensive, 0 soft).",
                            "name": "Sound level"
                        }
                    },
                    "name": "Set warning sound level."
                },
                "ptz": {
                    "description": "Moves the camera to the direction, with defined speed.",
                    "fields": {
                        "direction": {
                            "description": "Direction to move camera (up, down, left, right).",
                            "name": "Direction"
                        },
                        "speed": {
                            "description": "Speed of movement (from 1 to 9).",
                            "name": "Speed"
                        }
                    },
                    "name": "PTZ"
                },
                "set_alarm_detection_sensibility": {
                    "description": "Sets the detection sensibility level.",
                    "fields": {
                        "level": {
                            "description": "Sensibility level (1-6) for type 0 (Normal camera) or (1-100) for type 3 (PIR sensor camera).",
                            "name": "Sensitivity level"
                        },
                        "type_value": {
                            "description": "Type of detection. Options : 0 - Camera or 3 - PIR Sensor Camera.",
                            "name": "Detection type"
                        }
                    },
                    "name": "Detection sensitivity"
                },
                "sound_alarm": {
                    "description": "Sounds the alarm on your camera.",
                    "fields": {
                        "enable": {
                            "description": "Enter 1 or 2 (1=disable, 2=enable).",
                            "name": "Alarm sound"
                        }
                    },
                    "name": "Sound alarm"
                },
                "wake_device": {
                    "description": "This can be used to wake the camera\/device from hibernation.",
                    "name": "Wake camera"
                }
            }
        },
        "faa_delays": {
            "config": {
                "abort": {
                    "already_configured": "This airport is already configured."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_airport": "Airport code is not valid",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "id": "Airport"
                        },
                        "description": "Enter a US Airport Code in IATA Format",
                        "title": "FAA Delays"
                    }
                }
            }
        },
        "facebox": {
            "services": {
                "teach_face": {
                    "description": "Teaches facebox a face using a file.",
                    "fields": {
                        "entity_id": {
                            "description": "The facebox entity to teach.",
                            "name": "Entity"
                        },
                        "file_path": {
                            "description": "The path to the image file.",
                            "name": "File path"
                        },
                        "name": {
                            "description": "The name of the face to teach.",
                            "name": "Name"
                        }
                    },
                    "name": "Teach face"
                }
            }
        },
        "fan": {
            "device_automation": {
                "action_type": {
                    "toggle": "Toggle {entity_name}",
                    "turn_off": "Turn off {entity_name}",
                    "turn_on": "Turn on {entity_name}"
                },
                "condition_type": {
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on"
                },
                "trigger_type": {
                    "changed_states": "{entity_name} turned on or off",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Fan",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "direction": {
                            "name": "Direction",
                            "state": {
                                "forward": "Forward",
                                "reverse": "Reverse"
                            }
                        },
                        "oscillating": {
                            "name": "Oscillating",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "percentage": {
                            "name": "Speed"
                        },
                        "percentage_step": {
                            "name": "Speed step"
                        },
                        "preset_mode": {
                            "name": "Preset mode"
                        },
                        "preset_modes": {
                            "name": "Available preset modes"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "selector": {
                "direction": {
                    "options": {
                        "forward": "Forward",
                        "reverse": "Reverse"
                    }
                }
            },
            "services": {
                "decrease_speed": {
                    "description": "Decreases the speed of the fan.",
                    "fields": {
                        "percentage_step": {
                            "description": "Decreases the speed by a percentage step.",
                            "name": "Decrement"
                        }
                    },
                    "name": "Decrease speed"
                },
                "increase_speed": {
                    "description": "Increases the speed of the fan.",
                    "fields": {
                        "percentage_step": {
                            "description": "Increases the speed by a percentage step.",
                            "name": "Increment"
                        }
                    },
                    "name": "Increase speed"
                },
                "oscillate": {
                    "description": "Controls oscillatation of the fan.",
                    "fields": {
                        "oscillating": {
                            "description": "Turn on\/off oscillation.",
                            "name": "Oscillating"
                        }
                    },
                    "name": "Oscillate"
                },
                "set_direction": {
                    "description": "Sets the fan rotation direction.",
                    "fields": {
                        "direction": {
                            "description": "Direction to rotate.",
                            "name": "Direction"
                        }
                    },
                    "name": "Set direction"
                },
                "set_percentage": {
                    "description": "Sets the fan speed.",
                    "fields": {
                        "percentage": {
                            "description": "Speed of the fan.",
                            "name": "Percentage"
                        }
                    },
                    "name": "Set speed"
                },
                "set_preset_mode": {
                    "description": "Sets preset mode.",
                    "fields": {
                        "preset_mode": {
                            "description": "Preset mode.",
                            "name": "Preset mode"
                        }
                    },
                    "name": "Set preset mode"
                },
                "toggle": {
                    "description": "Toggles the fan on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns fan off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns fan on.",
                    "fields": {
                        "percentage": {
                            "description": "Speed of the fan.",
                            "name": "Percentage"
                        },
                        "preset_mode": {
                            "description": "Preset mode.",
                            "name": "Preset mode"
                        }
                    },
                    "name": "Turn on"
                }
            },
            "title": "Fan"
        },
        "fastdotcom": {
            "services": {
                "speedtest": {
                    "description": "Immediately executs a speed test with Fast.com.",
                    "name": "Speed test"
                }
            }
        },
        "ffmpeg": {
            "services": {
                "restart": {
                    "description": "Sends a restart command to a ffmpeg based sensor.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will restart. Platform dependent.",
                            "name": "Entity"
                        }
                    },
                    "name": "Restart"
                },
                "start": {
                    "description": "Sends a start command to a ffmpeg based sensor.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will start. Platform dependent.",
                            "name": "Entity"
                        }
                    },
                    "name": "Start"
                },
                "stop": {
                    "description": "Sends a stop command to a ffmpeg based sensor.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will stop. Platform dependent.",
                            "name": "Entity"
                        }
                    },
                    "name": "Stop"
                }
            }
        },
        "fibaro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please update your password for {username}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "import_plugins": "Import entities from fibaro plugins?",
                            "password": "Password",
                            "url": "URL in the format http:\/\/HOST\/api\/",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "filesize": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "not_allowed": "Path is not allowed",
                    "not_valid": "Path is not valid"
                },
                "step": {
                    "user": {
                        "data": {
                            "file_path": "Path to file"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "last_updated": {
                        "name": "Last updated"
                    },
                    "size": {
                        "name": "Size"
                    },
                    "size_bytes": {
                        "name": "Size in bytes"
                    }
                }
            },
            "title": "Filesize"
        },
        "filter": {
            "services": {
                "reload": {
                    "description": "Reloads filters from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "fireservicerota": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Authentication tokens became invalid, login to recreate them."
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "Website",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "duty": {
                        "name": "Duty"
                    }
                },
                "sensor": {
                    "incidents": {
                        "name": "Incidents"
                    }
                },
                "switch": {
                    "incident_response": {
                        "name": "Incident response"
                    }
                }
            }
        },
        "firmata": {
            "config": {
                "abort": {
                    "cannot_connect": "Failed to connect"
                }
            }
        },
        "fitbit": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_access_token": "Invalid access token",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error",
                    "wrong_account": "The user credentials provided do not match this Fitbit account."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "auth": {
                        "title": "Link Fitbit"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Fitbit integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "issues": {
                "deprecated_yaml_import": {
                    "description": "Configuring Fitbit using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically, including OAuth Application Credentials.\n\nRemove the `fitbit` configuration from your configuration.yaml file and remove fitbit.conf and restart Home Assistant to fix this issue.",
                    "title": "Fitbit YAML configuration is being removed"
                },
                "deprecated_yaml_import_issue_cannot_connect": {
                    "description": "Configuring Fitbit using YAML is being removed but there was a connection error importing your YAML configuration.\n\nRestart Home Assistant to try again or remove the Fitbit YAML configuration from your configuration.yaml file and remove the fitbit.conf and continue to [set up the integration](\/config\/integrations\/dashboard\/add?domain=fitbit) manually.",
                    "title": "The Fitbit YAML configuration import failed"
                },
                "deprecated_yaml_no_import": {
                    "description": "Configuring Fitbit using YAML is being removed.\n\nRemove the `fitbit` configuration from your configuration.yaml file and remove fitbit.conf if it exists and restart Home Assistant and [set up the integration](\/config\/integrations\/dashboard\/add?domain=fitbit) manually.",
                    "title": "Fitbit YAML configuration is being removed"
                }
            }
        },
        "fivem": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect. Please check the host and port and try again. Also ensure that you are running the latest FiveM server.",
                    "invalid_game_name": "The api of the game you are trying to connect to is not a FiveM game.",
                    "unknown_error": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name",
                            "port": "Port"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "status": {
                        "name": "Status"
                    }
                },
                "sensor": {
                    "max_players": {
                        "name": "Players max"
                    },
                    "online_players": {
                        "name": "Players online"
                    },
                    "resources": {
                        "name": "Resources"
                    }
                }
            }
        },
        "fjaraskupan": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up Fjäråskupan?"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "carbon_filter": {
                        "name": "Carbon filter"
                    },
                    "grease_filter": {
                        "name": "Grease filter"
                    }
                },
                "number": {
                    "periodic_venting": {
                        "name": "Periodic venting"
                    }
                }
            }
        },
        "flick_electric": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "client_id": "Client ID (optional)",
                            "client_secret": "Client Secret (optional)",
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Flick Login Credentials"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "power_price": {
                        "name": "Flick power price"
                    }
                }
            }
        },
        "flipr": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_flipr_id_found": "No flipr id associated to your account for now. You should verify it is working with the Flipr's mobile app first.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "flipr_id": {
                        "data": {
                            "flipr_id": "Flipr ID"
                        },
                        "description": "Choose your Flipr ID in the list",
                        "title": "Choose your Flipr"
                    },
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        },
                        "description": "Connect using your Flipr account.",
                        "title": "Connect to Flipr"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "chlorine_status": {
                        "name": "Chlorine status"
                    },
                    "ph_status": {
                        "name": "pH status"
                    }
                },
                "sensor": {
                    "chlorine": {
                        "name": "Chlorine"
                    },
                    "last_measured": {
                        "name": "Last measured"
                    },
                    "ph": {
                        "name": "pH"
                    },
                    "red_ox": {
                        "name": "Red OX"
                    },
                    "water_temperature": {
                        "name": "Water temperature"
                    }
                }
            }
        },
        "flo": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "pending_system_alerts": {
                        "name": "Pending system alerts"
                    },
                    "water_detected": {
                        "name": "Water detected"
                    }
                },
                "sensor": {
                    "current_flow_rate": {
                        "name": "Water flow rate"
                    },
                    "current_system_mode": {
                        "name": "Current system mode"
                    },
                    "daily_consumption": {
                        "name": "Today's water usage"
                    },
                    "water_pressure": {
                        "name": "Water pressure"
                    },
                    "water_temperature": {
                        "name": "Water temperature"
                    }
                },
                "switch": {
                    "shutoff_valve": {
                        "name": "Shutoff valve"
                    }
                }
            },
            "services": {
                "run_health_test": {
                    "description": "Have the Flo device run a health test.",
                    "name": "Run health test"
                },
                "set_away_mode": {
                    "description": "Sets the location into away mode.",
                    "name": "Set away mode"
                },
                "set_home_mode": {
                    "description": "Sets the location into home mode.",
                    "name": "Set home mode"
                },
                "set_sleep_mode": {
                    "description": "Sets the location into sleep mode.",
                    "fields": {
                        "revert_to_mode": {
                            "description": "The mode to revert to after sleep_minutes has elapsed.",
                            "name": "Revert to mode"
                        },
                        "sleep_minutes": {
                            "description": "The time to sleep in minutes.",
                            "name": "Sleep minutes"
                        }
                    },
                    "name": "Set sleep mode"
                }
            }
        },
        "flume": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password for {username} is no longer valid.",
                        "title": "Reauthenticate your Flume Account"
                    },
                    "user": {
                        "data": {
                            "client_id": "Client ID",
                            "client_secret": "Client Secret",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "In order to access the Flume Personal API, you will need to request a 'Client ID' and 'Client Secret' at https:\/\/portal.flumetech.com\/settings#token",
                        "title": "Connect to your Flume Account"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "flow": {
                        "name": "High flow"
                    },
                    "leak": {
                        "name": "Leak detected"
                    }
                },
                "sensor": {
                    "current_interval": {
                        "name": "Current"
                    },
                    "last_24_hrs": {
                        "name": "24 hours"
                    },
                    "last_30_days": {
                        "name": "30 days"
                    },
                    "last_60_min": {
                        "name": "60 minutes"
                    },
                    "month_to_date": {
                        "name": "Current month"
                    },
                    "today": {
                        "name": "Current day"
                    },
                    "week_to_date": {
                        "name": "Current week"
                    }
                }
            }
        },
        "flux_led": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{model} {id} ({ipaddr})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {model} {id} ({ipaddr})?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "If you leave the host empty, discovery will be used to find devices."
                    }
                }
            },
            "entity": {
                "button": {
                    "unpair_remotes": {
                        "name": "Unpair remotes"
                    }
                },
                "number": {
                    "effect_speed": {
                        "name": "Effect speed"
                    },
                    "music_pixels_per_segment": {
                        "name": "Music pixels per segment"
                    },
                    "music_segments": {
                        "name": "Music segments"
                    },
                    "pixels_per_segment": {
                        "name": "Pixels per segment"
                    },
                    "segments": {
                        "name": "Segments"
                    }
                },
                "select": {
                    "ic_type": {
                        "name": "IC type"
                    },
                    "operating_mode": {
                        "name": "Operating mode"
                    },
                    "power_restored": {
                        "name": "Power restored"
                    },
                    "remote_config": {
                        "name": "Remote config"
                    },
                    "white_channel": {
                        "name": "White channel"
                    },
                    "wiring": {
                        "name": "Wiring"
                    }
                },
                "sensor": {
                    "paired_remotes": {
                        "name": "Paired remotes"
                    }
                },
                "switch": {
                    "music": {
                        "name": "Music"
                    },
                    "remote_access": {
                        "name": "Remote access"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "custom_effect_colors": "Custom Effect: List of 1 to 16 [R,G,B] colors. Example: [255,0,255],[60,128,0]",
                            "custom_effect_speed_pct": "Custom Effect: Speed in percentage for the effects that switch colors.",
                            "custom_effect_transition": "Custom Effect: Type of transition between the colors.",
                            "mode": "The chosen brightness mode."
                        }
                    }
                }
            },
            "services": {
                "set_custom_effect": {
                    "description": "Sets a custom light effect.",
                    "fields": {
                        "colors": {
                            "description": "List of colors for the custom effect (RGB). (Max 16 Colors).",
                            "name": "Colors"
                        },
                        "speed_pct": {
                            "description": "Effect speed for the custom effect (0-100).",
                            "name": "Speed"
                        },
                        "transition": {
                            "description": "Effect transition.",
                            "name": "Transition"
                        }
                    },
                    "name": "Set custom effect"
                },
                "set_music_mode": {
                    "description": "Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.",
                    "fields": {
                        "background_color": {
                            "description": "The background RGB color (Addressable models only).",
                            "name": "Background color"
                        },
                        "brightness": {
                            "description": "Light brightness (0-100).",
                            "name": "Brightness"
                        },
                        "effect": {
                            "description": "Effect (1-16 on Addressable models, 0-3 on RGB with MIC models).",
                            "name": "Effect"
                        },
                        "foreground_color": {
                            "description": "The foreground RGB color.",
                            "name": "Foreground color"
                        },
                        "light_screen": {
                            "description": "Light screen mode for 2 dimensional pixels (Addressable models only).",
                            "name": "Light screen"
                        },
                        "sensitivity": {
                            "description": "Microphone sensitivity (0-100).",
                            "name": "Sensitivity"
                        }
                    },
                    "name": "Set music mode"
                },
                "set_zones": {
                    "description": "Sets strip zones for Addressable v3 controllers (0xA3).",
                    "fields": {
                        "colors": {
                            "description": "List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors).",
                            "name": "Colors"
                        },
                        "effect": {
                            "description": "Effect.",
                            "name": "Effect"
                        },
                        "speed_pct": {
                            "description": "Effect speed for the custom effect (0-100).",
                            "name": "Speed"
                        }
                    },
                    "name": "Set zones"
                }
            }
        },
        "forecast_solar": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "azimuth": "Azimuth (360 degrees, 0 = North, 90 = East, 180 = South, 270 = West)",
                            "declination": "Declination (0 = Horizontal, 90 = Vertical)",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "modules power": "Total Watt peak power of your solar modules",
                            "modules_power": "Total Watt peak power of your solar modules",
                            "name": "Name"
                        },
                        "description": "Fill in the data of your solar panels. Please refer to the documentation if a field is unclear."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "energy_current_hour": {
                        "name": "Estimated energy production - this hour"
                    },
                    "energy_next_hour": {
                        "name": "Estimated energy production - next hour"
                    },
                    "energy_production_today": {
                        "name": "Estimated energy production - today"
                    },
                    "energy_production_today_remaining": {
                        "name": "Estimated energy production - remaining today"
                    },
                    "energy_production_tomorrow": {
                        "name": "Estimated energy production - tomorrow"
                    },
                    "power_highest_peak_time_today": {
                        "name": "Highest power peak time - today"
                    },
                    "power_highest_peak_time_tomorrow": {
                        "name": "Highest power peak time - tomorrow"
                    },
                    "power_production_next_12hours": {
                        "name": "Estimated power production - next 12 hours"
                    },
                    "power_production_next_24hours": {
                        "name": "Estimated power production - next 24 hours"
                    },
                    "power_production_next_hour": {
                        "name": "Estimated power production - next hour"
                    },
                    "power_production_now": {
                        "name": "Estimated power production - now"
                    }
                }
            },
            "options": {
                "error": {
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "init": {
                        "data": {
                            "api_key": "API Key",
                            "azimuth": "Azimuth (360 degrees, 0 = North, 90 = East, 180 = South, 270 = West)",
                            "damping": "Damping factor: adjusts the results in the morning and evening",
                            "damping_evening": "Damping factor: adjusts the results in the evening",
                            "damping_morning": "Damping factor: adjusts the results in the morning",
                            "declination": "Declination (0 = Horizontal, 90 = Vertical)",
                            "inverter_size": "Inverter size (Watt)",
                            "modules power": "Total Watt peak power of your solar modules",
                            "modules_power": "Total Watt peak power of your solar modules"
                        },
                        "description": "These values allow tweaking the Forecast.Solar result. Please refer to the documentation if a field is unclear."
                    }
                }
            }
        },
        "forked_daapd": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "not_forked_daapd": "Device is not an OwnTone server."
                },
                "error": {
                    "forbidden": "Unable to connect. Please check your OwnTone network permissions.",
                    "unknown_error": "Unexpected error",
                    "websocket_not_enabled": "OwnTone server websocket not enabled.",
                    "wrong_host_or_port": "Unable to connect. Please check host and port.",
                    "wrong_password": "Incorrect password.",
                    "wrong_server_type": "The OwnTone integration requires an OwnTone server with version >= 27.0."
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Friendly name",
                            "password": "API password (leave blank if no password)",
                            "port": "API port"
                        },
                        "title": "Set up OwnTone device"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "librespot_java_port": "Port for librespot-java pipe control (if used)",
                            "max_playlists": "Max number of playlists used as sources",
                            "tts_pause_time": "Seconds to pause before and after TTS",
                            "tts_volume": "TTS volume (float in range [0,1])"
                        },
                        "description": "Set various options for the OwnTone integration.",
                        "title": "Configure OwnTone options"
                    }
                }
            }
        },
        "foscam": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_response": "Invalid response from the device",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "rtsp_port": "RTSP port",
                            "stream": "Stream",
                            "username": "Username"
                        }
                    }
                }
            },
            "services": {
                "ptz": {
                    "description": "Pan\/Tilt service for Foscam camera.",
                    "fields": {
                        "movement": {
                            "description": "Direction of the movement.",
                            "name": "Movement"
                        },
                        "travel_time": {
                            "description": "Travel time in seconds.",
                            "name": "Travel time"
                        }
                    },
                    "name": "PTZ"
                },
                "ptz_preset": {
                    "description": "PTZ Preset service for Foscam camera.",
                    "fields": {
                        "preset_name": {
                            "description": "The name of the preset to move to. Presets can be created from within the official Foscam apps.",
                            "name": "Preset name"
                        }
                    },
                    "name": "PTZ preset"
                }
            }
        },
        "freebox": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "register_failed": "Failed to register, please try again",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "link": {
                        "description": "Click \"Submit\", then touch the right arrow on the router to register Freebox with Home Assistant.\n\n![Location of button on the router](\/static\/images\/config_freebox.png)",
                        "title": "Link Freebox router"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            },
            "services": {
                "reboot": {
                    "description": "Reboots the Freebox.",
                    "name": "Reboot"
                }
            }
        },
        "freedompro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "Please enter the API key obtained from https:\/\/home.freedompro.eu",
                        "title": "Freedompro API key"
                    }
                }
            }
        },
        "fritz": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "ignore_ip6_link_local": "IPv6 link local address is not supported.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "upnp_not_configured": "Missing UPnP settings on device."
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Discovered FRITZ!Box: {name}\n\nSet up FRITZ!Box Tools to control your {name}",
                        "title": "Set up FRITZ!Box Tools"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Update FRITZ!Box Tools credentials for: {host}.\n\nFRITZ!Box Tools is unable to log in to your FRITZ!Box.",
                        "title": "Updating FRITZ!Box Tools - credentials"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "description": "Set up FRITZ!Box Tools to control your FRITZ!Box.\nMinimum needed: username, password.",
                        "title": "Set up FRITZ!Box Tools"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "is_connected": {
                        "name": "Connection"
                    },
                    "is_linked": {
                        "name": "Link"
                    }
                },
                "button": {
                    "cleanup": {
                        "name": "Cleanup"
                    },
                    "firmware_update": {
                        "name": "Firmware update"
                    },
                    "reboot": {
                        "name": "Restart"
                    },
                    "reconnect": {
                        "name": "Reconnect"
                    }
                },
                "sensor": {
                    "connection_uptime": {
                        "name": "Connection uptime"
                    },
                    "device_uptime": {
                        "name": "Last restart"
                    },
                    "external_ip": {
                        "name": "External IP"
                    },
                    "external_ipv6": {
                        "name": "External IPv6"
                    },
                    "gb_received": {
                        "name": "GB received"
                    },
                    "gb_sent": {
                        "name": "GB sent"
                    },
                    "kb_s_received": {
                        "name": "Download throughput"
                    },
                    "kb_s_sent": {
                        "name": "Upload throughput"
                    },
                    "link_attenuation_received": {
                        "name": "Link download power attenuation"
                    },
                    "link_attenuation_sent": {
                        "name": "Link upload power attenuation"
                    },
                    "link_kb_s_received": {
                        "name": "Link download throughput"
                    },
                    "link_kb_s_sent": {
                        "name": "Link upload throughput"
                    },
                    "link_noise_margin_received": {
                        "name": "Link download noise margin"
                    },
                    "link_noise_margin_sent": {
                        "name": "Link upload noise margin"
                    },
                    "max_kb_s_received": {
                        "name": "Max connection download throughput"
                    },
                    "max_kb_s_sent": {
                        "name": "Max connection upload throughput"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "consider_home": "Seconds to consider a device at 'home'",
                            "old_discovery": "Enable old discovery method"
                        }
                    }
                }
            },
            "services": {
                "cleanup": {
                    "description": "Remove FRITZ!Box stale device_tracker entities.",
                    "fields": {
                        "device_id": {
                            "description": "Select the Fritz!Box to check.",
                            "name": "Fritz!Box Device"
                        }
                    },
                    "name": "Remove stale device tracker entities"
                },
                "reboot": {
                    "description": "Reboots your FRITZ!Box.",
                    "fields": {
                        "device_id": {
                            "description": "Select the Fritz!Box to reboot.",
                            "name": "Fritz!Box Device"
                        }
                    },
                    "name": "Reboot"
                },
                "reconnect": {
                    "description": "Reconnects your FRITZ!Box internet connection.",
                    "fields": {
                        "device_id": {
                            "description": "Select the Fritz!Box to reconnect.",
                            "name": "Fritz!Box Device"
                        }
                    },
                    "name": "Reconnect"
                },
                "set_guest_wifi_password": {
                    "description": "Sets a new password for the guest Wi-Fi. The password must be between 8 and 63 characters long. If no additional parameter is set, the password will be auto-generated with a length of 12 characters.",
                    "fields": {
                        "device_id": {
                            "description": "Select the Fritz!Box to configure.",
                            "name": "Fritz!Box Device"
                        },
                        "length": {
                            "description": "Length of the new password. The password will be auto-generated, if no password is set.",
                            "name": "Password length"
                        },
                        "password": {
                            "description": "New password for the guest Wi-Fi.",
                            "name": "Password"
                        }
                    },
                    "name": "Set guest Wi-Fi password"
                }
            }
        },
        "fritzbox": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "ignore_ip6_link_local": "IPv6 link local address is not supported.",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Connected to AVM FRITZ!Box but it's unable to control Smart Home devices.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Do you want to set up {name}?"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Update your login information for {name}."
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Enter your AVM FRITZ!Box information."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "alarm": {
                        "name": "Alarm"
                    },
                    "device_lock": {
                        "name": "Button lock via UI"
                    },
                    "lock": {
                        "name": "Button lock on device"
                    }
                },
                "sensor": {
                    "battery": {
                        "name": "Battery"
                    },
                    "comfort_temperature": {
                        "name": "Comfort temperature"
                    },
                    "eco_temperature": {
                        "name": "Eco temperature"
                    },
                    "electric_current": {
                        "name": "Current"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "nextchange_preset": {
                        "name": "Next scheduled preset"
                    },
                    "nextchange_temperature": {
                        "name": "Next scheduled temperature"
                    },
                    "nextchange_time": {
                        "name": "Next scheduled change time"
                    },
                    "power_consumption": {
                        "name": "Power"
                    },
                    "scheduled_preset": {
                        "name": "Current scheduled preset"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "total_energy": {
                        "name": "Energy"
                    },
                    "voltage": {
                        "name": "Voltage"
                    }
                }
            }
        },
        "fritzbox_callmonitor": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "insufficient_permissions": "User has insufficient permissions to access AVM FRITZ!Box settings and its phonebooks.",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{name}",
                "step": {
                    "phonebook": {
                        "data": {
                            "phonebook": "Phonebook"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "fritzbox_callmonitor": {
                        "state": {
                            "dialing": "Dialing",
                            "idle": "Idle",
                            "ringing": "Ringing",
                            "talking": "Talking"
                        }
                    }
                }
            },
            "options": {
                "error": {
                    "malformed_prefixes": "Prefixes are malformed, please check their format."
                },
                "step": {
                    "init": {
                        "data": {
                            "prefixes": "Prefixes (comma separated list)"
                        },
                        "title": "Configure Prefixes"
                    }
                }
            }
        },
        "fronius": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "invalid_host": "Invalid hostname or IP address"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{device}",
                "step": {
                    "confirm_discovery": {
                        "description": "Do you want to add {device} to Home Assistant?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Configure the IP address or local hostname of your Fronius device.",
                        "title": "Fronius SolarNet"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "capacity_designed": {
                        "name": "Designed capacity"
                    },
                    "capacity_maximum": {
                        "name": "Maximum capacity "
                    },
                    "cash_factor": {
                        "name": "Grid export tariff"
                    },
                    "co2_factor": {
                        "name": "CO₂ factor"
                    },
                    "current_ac": {
                        "name": "AC current"
                    },
                    "current_ac_phase_1": {
                        "name": "Current phase 1"
                    },
                    "current_ac_phase_2": {
                        "name": "Current phase 2"
                    },
                    "current_ac_phase_3": {
                        "name": "Current phase 3"
                    },
                    "current_dc": {
                        "name": "DC current"
                    },
                    "current_dc_2": {
                        "name": "DC current 2"
                    },
                    "delivery_factor": {
                        "name": "Grid import tariff"
                    },
                    "energy_day": {
                        "name": "Energy day"
                    },
                    "energy_reactive_ac_consumed": {
                        "name": "Reactive energy consumed"
                    },
                    "energy_reactive_ac_produced": {
                        "name": "Reactive energy produced"
                    },
                    "energy_real_ac_consumed": {
                        "name": "Energy consumed"
                    },
                    "energy_real_ac_minus": {
                        "name": "Real energy minus"
                    },
                    "energy_real_ac_plus": {
                        "name": "Real energy plus"
                    },
                    "energy_real_consumed": {
                        "name": "Real energy consumed"
                    },
                    "energy_real_produced": {
                        "name": "Real energy produced"
                    },
                    "energy_total": {
                        "name": "Total energy"
                    },
                    "energy_year": {
                        "name": "Energy year"
                    },
                    "error_code": {
                        "name": "Error code"
                    },
                    "frequency_ac": {
                        "name": "Frequency"
                    },
                    "frequency_phase_average": {
                        "name": "Frequency phase average"
                    },
                    "inverter_state": {
                        "name": "Inverter state"
                    },
                    "led_color": {
                        "name": "LED color"
                    },
                    "led_state": {
                        "name": "LED state"
                    },
                    "meter_location": {
                        "name": "Meter location"
                    },
                    "meter_mode": {
                        "name": "Meter mode"
                    },
                    "power_ac": {
                        "name": "AC power"
                    },
                    "power_apparent": {
                        "name": "Apparent power"
                    },
                    "power_apparent_phase_1": {
                        "name": "Apparent power phase 1"
                    },
                    "power_apparent_phase_2": {
                        "name": "Apparent power phase 2"
                    },
                    "power_apparent_phase_3": {
                        "name": "Apparent power phase 3"
                    },
                    "power_battery": {
                        "name": "Power battery"
                    },
                    "power_factor": {
                        "name": "Power factor"
                    },
                    "power_factor_phase_1": {
                        "name": "Power factor phase 1"
                    },
                    "power_factor_phase_2": {
                        "name": "Power factor phase 2"
                    },
                    "power_factor_phase_3": {
                        "name": "Power factor phase 3"
                    },
                    "power_grid": {
                        "name": "Power grid"
                    },
                    "power_load": {
                        "name": "Power load"
                    },
                    "power_photovoltaics": {
                        "name": "Power photovoltaics"
                    },
                    "power_reactive": {
                        "name": "Reactive power"
                    },
                    "power_reactive_phase_1": {
                        "name": "Reactive power phase 1"
                    },
                    "power_reactive_phase_2": {
                        "name": "Reactive power phase 2"
                    },
                    "power_reactive_phase_3": {
                        "name": "Reactive power phase 3"
                    },
                    "power_real": {
                        "name": "Real power"
                    },
                    "power_real_ac": {
                        "name": "Power"
                    },
                    "power_real_phase_1": {
                        "name": "Real power phase 1"
                    },
                    "power_real_phase_2": {
                        "name": "Real power phase 2"
                    },
                    "power_real_phase_3": {
                        "name": "Real power phase 3"
                    },
                    "relative_autonomy": {
                        "name": "Relative autonomy"
                    },
                    "relative_self_consumption": {
                        "name": "Relative self consumption"
                    },
                    "state_code": {
                        "name": "State code"
                    },
                    "state_message": {
                        "name": "State message"
                    },
                    "state_of_charge": {
                        "name": "State of charge"
                    },
                    "status_code": {
                        "name": "Status code"
                    },
                    "temperature_cell": {
                        "name": "Temperature"
                    },
                    "temperature_channel_1": {
                        "name": "Temperature"
                    },
                    "voltage_ac": {
                        "name": "AC voltage"
                    },
                    "voltage_ac_phase_1": {
                        "name": "Voltage phase 1"
                    },
                    "voltage_ac_phase_2": {
                        "name": "Voltage phase 2"
                    },
                    "voltage_ac_phase_3": {
                        "name": "Voltage phase 3"
                    },
                    "voltage_ac_phase_to_phase_12": {
                        "name": "Voltage phase 1-2"
                    },
                    "voltage_ac_phase_to_phase_23": {
                        "name": "Voltage phase 2-3"
                    },
                    "voltage_ac_phase_to_phase_31": {
                        "name": "Voltage phase 3-1"
                    },
                    "voltage_dc": {
                        "name": "DC voltage"
                    },
                    "voltage_dc_2": {
                        "name": "DC voltage 2"
                    },
                    "voltage_dc_maximum_cell": {
                        "name": "Maximum cell voltage"
                    },
                    "voltage_dc_minimum_cell": {
                        "name": "Minimum cell voltage"
                    }
                }
            }
        },
        "frontend": {
            "selector": {
                "mode": {
                    "options": {
                        "dark": "Dark",
                        "light": "Light"
                    }
                }
            },
            "services": {
                "reload_themes": {
                    "description": "Reloads themes from the YAML-configuration.",
                    "name": "Reload themes"
                },
                "set_theme": {
                    "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
                    "fields": {
                        "mode": {
                            "description": "Theme mode.",
                            "name": "Mode"
                        },
                        "name": {
                            "description": "Name of a theme.",
                            "name": "Theme"
                        }
                    },
                    "name": "Set the default theme"
                }
            }
        },
        "frontier_silicon": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "device_config": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "The pin can be found via 'MENU button > Main Menu > System setting > Network > NetRemote PIN setup'",
                        "title": "Device Configuration"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Frontier Silicon using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Frontier Silicon YAML configuration has been removed"
                }
            }
        },
        "fully_kiosk": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "discovery_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Do you want to set up {name} ({host})?"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "device_admin": {
                        "name": "Device admin"
                    },
                    "kiosk_mode": {
                        "name": "Kiosk mode"
                    },
                    "plugged_in": {
                        "name": "Plugged in"
                    }
                },
                "button": {
                    "load_start_url": {
                        "name": "Load start URL"
                    },
                    "restart_browser": {
                        "name": "Restart browser"
                    },
                    "restart_device": {
                        "name": "Restart device"
                    },
                    "to_background": {
                        "name": "Send to background"
                    },
                    "to_foreground": {
                        "name": "Bring to foreground"
                    }
                },
                "number": {
                    "screen_brightness": {
                        "name": "Screen brightness"
                    },
                    "screen_off_time": {
                        "name": "Screen off timer"
                    },
                    "screensaver_brightness": {
                        "name": "Screensaver brightness"
                    },
                    "screensaver_time": {
                        "name": "Screensaver timer"
                    }
                },
                "sensor": {
                    "current_page": {
                        "name": "Current page"
                    },
                    "foreground_app": {
                        "name": "Foreground app"
                    },
                    "internal_storage_free_space": {
                        "name": "Internal storage free space"
                    },
                    "internal_storage_total_space": {
                        "name": "Internal storage total space"
                    },
                    "ram_free_memory": {
                        "name": "Free memory"
                    },
                    "ram_total_memory": {
                        "name": "Total memory"
                    },
                    "screen_orientation": {
                        "name": "Screen orientation"
                    }
                },
                "switch": {
                    "kiosk": {
                        "name": "Kiosk lock"
                    },
                    "maintenance": {
                        "name": "Maintenance mode"
                    },
                    "motion_detection": {
                        "name": "Motion detection"
                    },
                    "screen_on": {
                        "name": "Screen"
                    },
                    "screensaver": {
                        "name": "Screensaver"
                    }
                }
            },
            "services": {
                "load_url": {
                    "description": "Loads a URL on Fully Kiosk Browser.",
                    "fields": {
                        "url": {
                            "description": "URL to load.",
                            "name": "URL"
                        }
                    },
                    "name": "Load URL"
                },
                "set_config": {
                    "description": "Sets a configuration parameter on Fully Kiosk Browser.",
                    "fields": {
                        "key": {
                            "description": "Configuration parameter to set.",
                            "name": "Key"
                        },
                        "value": {
                            "description": "Value for the configuration parameter.",
                            "name": "Value"
                        }
                    },
                    "name": "Set Configuration"
                },
                "start_application": {
                    "description": "Starts an application on the device running Fully Kiosk Browser.",
                    "fields": {
                        "application": {
                            "description": "Package name of the application to start.",
                            "name": "Application"
                        }
                    },
                    "name": "Start Application"
                }
            }
        },
        "garages_amsterdam": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "garage_name": "Garage name"
                        },
                        "title": "Pick a garage to monitor"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "free_space_long": {
                        "name": "Long parking free space"
                    },
                    "free_space_short": {
                        "name": "Short parking free space"
                    },
                    "long_capacity": {
                        "name": "Long parking capacity"
                    },
                    "short_capacity": {
                        "name": "Short parking capacity"
                    }
                }
            },
            "title": "Garages Amsterdam"
        },
        "gardena_bluetooth": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "cannot_connect": "Failed to connect: {error}"
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "sensor_connected_state": {
                        "name": "Sensor connection"
                    },
                    "valve_connected_state": {
                        "name": "Valve connection"
                    }
                },
                "button": {
                    "factory_reset": {
                        "name": "Factory reset"
                    }
                },
                "number": {
                    "manual_watering_time": {
                        "name": "Manual watering time"
                    },
                    "rain_pause": {
                        "name": "Rain pause"
                    },
                    "remaining_open_set": {
                        "name": "Open for"
                    },
                    "remaining_open_time": {
                        "name": "Remaining open time"
                    },
                    "season_pause": {
                        "name": "Season pause"
                    },
                    "seasonal_adjust": {
                        "name": "Seasonal adjust"
                    },
                    "sensor_threshold": {
                        "name": "Sensor threshold"
                    }
                },
                "sensor": {
                    "activation_reason": {
                        "name": "Activation reason"
                    },
                    "remaining_open_timestamp": {
                        "name": "Valve closing"
                    },
                    "sensor_battery_level": {
                        "name": "Sensor battery"
                    },
                    "sensor_measurement_timestamp": {
                        "name": "Sensor timestamp"
                    },
                    "sensor_type": {
                        "name": "Sensor type"
                    }
                },
                "switch": {
                    "state": {
                        "name": "Open"
                    }
                }
            }
        },
        "gdacs": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "radius": "Radius"
                        },
                        "title": "Fill in your filter details."
                    }
                }
            }
        },
        "generic": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "already_exists": "A camera with these URL settings already exists.",
                    "invalid_still_image": "URL did not return a valid still image",
                    "malformed_url": "Malformed URL",
                    "no_still_image_or_stream_url": "You must specify at least a still image or stream URL",
                    "relative_url": "Relative URLs are not allowed",
                    "stream_io_error": "Input\/Output error while trying to connect to stream. Wrong RTSP transport protocol?",
                    "stream_no_route_to_host": "Could not find host while trying to connect to stream",
                    "stream_not_permitted": "Operation not permitted while trying to connect to stream. Wrong RTSP transport protocol?",
                    "template_error": "Error rendering template. Review log for more info.",
                    "timeout": "Timeout while loading URL",
                    "unable_still_load": "Unable to load valid image from still image URL (e.g. invalid host, URL or authentication failure).  Review log for more info.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "authentication": "Authentication",
                            "framerate": "Frame Rate (Hz)",
                            "limit_refetch_to_url_change": "Limit refetch to url change",
                            "password": "Password",
                            "rtsp_transport": "RTSP transport protocol",
                            "still_image_url": "Still Image URL (e.g. http:\/\/...)",
                            "stream_source": "Stream Source URL (e.g. rtsp:\/\/...)",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Enter the settings to connect to the camera."
                    },
                    "user_confirm_still": {
                        "data": {
                            "confirmed_ok": "This image looks good."
                        },
                        "description": "![Camera Still Image Preview]({preview_url})",
                        "title": "Preview"
                    }
                }
            },
            "options": {
                "error": {
                    "already_exists": "A camera with these URL settings already exists.",
                    "invalid_still_image": "URL did not return a valid still image",
                    "malformed_url": "Malformed URL",
                    "no_still_image_or_stream_url": "You must specify at least a still image or stream URL",
                    "relative_url": "Relative URLs are not allowed",
                    "stream_io_error": "Input\/Output error while trying to connect to stream. Wrong RTSP transport protocol?",
                    "stream_no_route_to_host": "Could not find host while trying to connect to stream",
                    "stream_not_permitted": "Operation not permitted while trying to connect to stream. Wrong RTSP transport protocol?",
                    "template_error": "Error rendering template. Review log for more info.",
                    "timeout": "Timeout while loading URL",
                    "unable_still_load": "Unable to load valid image from still image URL (e.g. invalid host, URL or authentication failure).  Review log for more info.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "confirm_still": {
                        "data": {
                            "confirmed_ok": "This image looks good."
                        },
                        "description": "![Camera Still Image Preview]({preview_url})",
                        "title": "Preview"
                    },
                    "init": {
                        "data": {
                            "authentication": "Authentication",
                            "framerate": "Frame Rate (Hz)",
                            "limit_refetch_to_url_change": "Limit refetch to url change",
                            "password": "Password",
                            "rtsp_transport": "RTSP transport protocol",
                            "still_image_url": "Still Image URL (e.g. http:\/\/...)",
                            "stream_source": "Stream Source URL (e.g. rtsp:\/\/...)",
                            "use_wallclock_as_timestamps": "Use wallclock as timestamps",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "data_description": {
                            "use_wallclock_as_timestamps": "This option may correct segmenting or crashing issues arising from buggy timestamp implementations on some cameras"
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads generic cameras from the YAML-configuration.",
                    "name": "Reload"
                }
            },
            "title": "Generic Camera"
        },
        "generic_thermostat": {
            "services": {
                "reload": {
                    "description": "Reloads generic thermostats from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "geniushub": {
            "services": {
                "set_switch_override": {
                    "description": "Overrides switch for a given duration.",
                    "fields": {
                        "duration": {
                            "description": "The duration of the override. Optional, default 1 hour, maximum 24 hours.",
                            "name": "Duration"
                        }
                    },
                    "name": "Set switch override"
                },
                "set_zone_mode": {
                    "description": "Set the zone to an operating mode.",
                    "fields": {
                        "entity_id": {
                            "description": "The zone's entity_id.",
                            "name": "Entity"
                        },
                        "mode": {
                            "description": "One of: off, timer or footprint.",
                            "name": "Mode"
                        }
                    },
                    "name": "Set zone mode"
                },
                "set_zone_override": {
                    "description": "Overrides the zone's set point for a given duration.",
                    "fields": {
                        "duration": {
                            "description": "The duration of the override. Optional, default 1 hour, maximum 24 hours.",
                            "name": "Duration"
                        },
                        "entity_id": {
                            "description": "The zone's entity_id.",
                            "name": "Entity"
                        },
                        "temperature": {
                            "description": "The target temperature.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set zone override"
                }
            }
        },
        "geo_json_events": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "location": "Location",
                            "url": "URL"
                        },
                        "title": "Fill in your GeoJSON feed details."
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring a GeoJSON feed using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the GeoJSON feed YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The GeoJSON feed YAML configuration is being removed"
                }
            }
        },
        "geo_location": {
            "entity_component": {
                "_": {
                    "name": "Geolocation",
                    "state_attributes": {
                        "latitude": {
                            "name": "Latitude"
                        },
                        "longitude": {
                            "name": "Longitude"
                        },
                        "source": {
                            "name": "Source"
                        }
                    }
                }
            },
            "title": "Geolocation"
        },
        "geocaching": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Geocaching integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "awarded_favorite_points": {
                        "name": "Awarded favorite points"
                    },
                    "favorite_points": {
                        "name": "Favorite points"
                    },
                    "find_count": {
                        "name": "Total finds"
                    },
                    "hide_count": {
                        "name": "Total hides"
                    },
                    "souvenir_count": {
                        "name": "Total souvenirs"
                    }
                }
            }
        },
        "geofency": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to set up the webhook feature in Geofency.\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n\nSee [the documentation]({docs_url}) for further details."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up the Geofency Webhook?",
                        "title": "Set up the Geofency Webhook"
                    }
                }
            }
        },
        "geonetnz_quakes": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "mmi": "MMI",
                            "radius": "Radius"
                        },
                        "title": "Fill in your filter details."
                    }
                }
            }
        },
        "geonetnz_volcano": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "radius": "Radius"
                        },
                        "title": "Fill in your filter details."
                    }
                }
            }
        },
        "gios": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_sensors_data": "Invalid sensors' data for this measuring station.",
                    "wrong_station_id": "ID of the measuring station is not correct."
                },
                "step": {
                    "user": {
                        "data": {
                            "name": "Name",
                            "station_id": "ID of the measuring station"
                        },
                        "title": "GIOŚ (Polish Chief Inspectorate Of Environmental Protection)"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "aqi": {
                        "name": "Air quality index",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "moderate": "Moderate",
                            "sufficient": "Sufficient",
                            "very_bad": "Very bad",
                            "very_good": "Very good"
                        }
                    },
                    "c6h6": {
                        "name": "Benzene"
                    },
                    "co": {
                        "name": "Carbon monoxide"
                    },
                    "no2": {
                        "name": "Nitrogen dioxide"
                    },
                    "no2_index": {
                        "name": "Nitrogen dioxide index",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "moderate": "Moderate",
                            "sufficient": "Sufficient",
                            "very_bad": "Very bad",
                            "very_good": "Very good"
                        }
                    },
                    "o3": {
                        "name": "Ozone"
                    },
                    "o3_index": {
                        "name": "Ozone index",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "moderate": "Moderate",
                            "sufficient": "Sufficient",
                            "very_bad": "Very bad",
                            "very_good": "Very good"
                        }
                    },
                    "pm10": {
                        "name": "PM10"
                    },
                    "pm10_index": {
                        "name": "PM10 index",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "moderate": "Moderate",
                            "sufficient": "Sufficient",
                            "very_bad": "Very bad",
                            "very_good": "Very good"
                        }
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "pm25_index": {
                        "name": "PM2.5 index",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "moderate": "Moderate",
                            "sufficient": "Sufficient",
                            "very_bad": "Very bad",
                            "very_good": "Very good"
                        }
                    },
                    "so2": {
                        "name": "Sulphur dioxide"
                    },
                    "so2_index": {
                        "name": "Sulphur dioxide index",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "moderate": "Moderate",
                            "sufficient": "Sufficient",
                            "very_bad": "Very bad",
                            "very_good": "Very good"
                        }
                    }
                }
            },
            "system_health": {
                "info": {
                    "can_reach_server": "Reach GIOŚ server"
                }
            }
        },
        "github": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "could_not_register": "Could not register integration with GitHub"
                },
                "progress": {
                    "wait_for_device": "1. Open {url} \n2.Paste the following key to authorize the integration: \n```\n{code}\n```\n"
                },
                "step": {
                    "repositories": {
                        "data": {
                            "repositories": "Select repositories to track."
                        },
                        "title": "Configure repositories"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "discussions_count": {
                        "name": "Discussions"
                    },
                    "forks_count": {
                        "name": "Forks"
                    },
                    "issues_count": {
                        "name": "Issues"
                    },
                    "latest_commit": {
                        "name": "Latest commit"
                    },
                    "latest_discussion": {
                        "name": "Latest discussion"
                    },
                    "latest_issue": {
                        "name": "Latest issue"
                    },
                    "latest_pull_request": {
                        "name": "Latest pull request"
                    },
                    "latest_release": {
                        "name": "Latest release"
                    },
                    "latest_tag": {
                        "name": "Latest tag"
                    },
                    "pulls_count": {
                        "name": "Pull requests"
                    },
                    "stargazers_count": {
                        "name": "Stars"
                    },
                    "subscribers_count": {
                        "name": "Watchers"
                    }
                }
            }
        },
        "glances": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password for {username} is invalid."
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate",
                            "version": "Glances API Version (2 or 3)"
                        }
                    }
                }
            }
        },
        "goalzero": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "invalid_host": "Invalid hostname or IP address",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "confirm_discovery": {
                        "description": "DHCP reservation on your router is recommended. If not set up, the device may become unavailable until Home Assistant detects the new ip address. Refer to your router's user manual."
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        },
                        "description": "Please refer to the documentation to make sure all requirements are met."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "app_online": {
                        "name": "App online"
                    },
                    "backlight": {
                        "name": "Backlight"
                    },
                    "input_detected": {
                        "name": "Input detected"
                    }
                },
                "sensor": {
                    "amps_in": {
                        "name": "Current in"
                    },
                    "amps_out": {
                        "name": "Current out"
                    },
                    "ip_addr": {
                        "name": "IP address"
                    },
                    "soc_percent": {
                        "name": "State of charge percent"
                    },
                    "ssid": {
                        "name": "Wi-Fi SSID"
                    },
                    "time_to_empty_full": {
                        "name": "Time to empty\/full"
                    },
                    "timestamp": {
                        "name": "Total run time"
                    },
                    "watts_in": {
                        "name": "Power in"
                    },
                    "watts_out": {
                        "name": "Power out"
                    },
                    "wh_out": {
                        "name": "Energy out"
                    },
                    "wh_stored": {
                        "name": "Energy stored"
                    },
                    "wifi_strength": {
                        "name": "Wi-Fi strength"
                    }
                },
                "switch": {
                    "ac_port_status": {
                        "name": "AC port status"
                    },
                    "usb_port_status": {
                        "name": "USB port status"
                    },
                    "v12_port_status": {
                        "name": "12V port status"
                    }
                }
            }
        },
        "gogogate2": {
            "config": {
                "abort": {
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{device} ({ip_address})",
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Provide requisite information below.",
                        "title": "Set up Gogogate2 or ismartgate"
                    }
                }
            }
        },
        "goodwe": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress"
                },
                "error": {
                    "connection_error": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "IP Address"
                        },
                        "description": "Connect to inverter",
                        "title": "GoodWe inverter"
                    }
                }
            },
            "entity": {
                "button": {
                    "synchronize_clock": {
                        "name": "Synchronize inverter clock"
                    }
                },
                "number": {
                    "battery_discharge_depth": {
                        "name": "Depth of discharge (on-grid)"
                    },
                    "grid_export_limit": {
                        "name": "Grid export limit"
                    }
                },
                "select": {
                    "operation_mode": {
                        "name": "Inverter operation mode",
                        "state": {
                            "backup": "Backup mode",
                            "eco": "Eco mode",
                            "eco_charge": "Eco charge mode",
                            "eco_discharge": "Eco discharge mode",
                            "general": "General mode",
                            "off_grid": "Off grid mode",
                            "peak_shaving": "Peak shaving mode"
                        }
                    }
                }
            }
        },
        "google": {
            "application_credentials": {
                "description": "Follow the [instructions]({more_info_url}) for [OAuth consent screen]({oauth_consent_url}) to give Home Assistant access to your Google Calendar. You also need to create Application Credentials linked to your Calendar:\n1. Go to [Credentials]({oauth_creds_url}) and click **Create Credentials**.\n1. From the drop-down list select **OAuth client ID**.\n1. Select **TV and Limited Input devices** for the Application Type.\n\n"
            },
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "api_disabled": "You must enable the Google Calendar API in the Google Cloud Console",
                    "cannot_connect": "Failed to connect",
                    "code_expired": "Authentication code expired or credential setup is invalid, please try again.",
                    "invalid_access_token": "Invalid access token",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful",
                    "timeout_connect": "Timeout establishing connection"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "progress": {
                    "exchange": "To link your Google account, visit the [{url}]({url}) and enter code:\n\n{user_code}"
                },
                "step": {
                    "auth": {
                        "title": "Link Google Account"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Google Calendar integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "calendar_access": "Home Assistant access to Google Calendar"
                        }
                    }
                }
            },
            "services": {
                "add_event": {
                    "description": "Adds a new calendar event.",
                    "fields": {
                        "calendar_id": {
                            "description": "The id of the calendar you want.",
                            "name": "Calendar ID"
                        },
                        "description": {
                            "description": "The description of the event. Optional.",
                            "name": "Description"
                        },
                        "end_date": {
                            "description": "The date the whole day event should end.",
                            "name": "End date"
                        },
                        "end_date_time": {
                            "description": "The date and time the event should end.",
                            "name": "End time"
                        },
                        "in": {
                            "description": "Days or weeks that you want to create the event in.",
                            "name": "In"
                        },
                        "start_date": {
                            "description": "The date the whole day event should start.",
                            "name": "Start date"
                        },
                        "start_date_time": {
                            "description": "The date and time the event should start.",
                            "name": "Start time"
                        },
                        "summary": {
                            "description": "Acts as the title of the event.",
                            "name": "Summary"
                        }
                    },
                    "name": "Add event"
                },
                "create_event": {
                    "description": "Add a new calendar event.",
                    "fields": {
                        "description": {
                            "description": "The description of the event. Optional.",
                            "name": "Description"
                        },
                        "end_date": {
                            "description": "The date the whole day event should end.",
                            "name": "End date"
                        },
                        "end_date_time": {
                            "description": "The date and time the event should end.",
                            "name": "End time"
                        },
                        "in": {
                            "description": "Days or weeks that you want to create the event in.",
                            "name": "In"
                        },
                        "location": {
                            "description": "The location of the event. Optional.",
                            "name": "Location"
                        },
                        "start_date": {
                            "description": "The date the whole day event should start.",
                            "name": "Start date"
                        },
                        "start_date_time": {
                            "description": "The date and time the event should start.",
                            "name": "Start time"
                        },
                        "summary": {
                            "description": "Acts as the title of the event.",
                            "name": "Summary"
                        }
                    },
                    "name": "Creates event"
                }
            }
        },
        "google_assistant": {
            "entity": {
                "button": {
                    "sync_devices": {
                        "name": "Synchronize devices"
                    }
                }
            },
            "services": {
                "request_sync": {
                    "description": "Sends a request_sync command to Google.",
                    "fields": {
                        "agent_user_id": {
                            "description": "Only needed for automations. Specific Home Assistant user id (not username, ID in configuration > users > under username) to sync with Google Assistant. Do not need when you call this service through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing.",
                            "name": "Agent user ID"
                        }
                    },
                    "name": "Request sync"
                }
            }
        },
        "google_assistant_sdk": {
            "application_credentials": {
                "description": "Follow the [instructions]({more_info_url}) for [OAuth consent screen]({oauth_consent_url}) to give Home Assistant access to your Google Assistant SDK. You also need to create Application Credentials linked to your account:\n1. Go to [Credentials]({oauth_creds_url}) and click **Create Credentials**.\n1. From the drop-down list select **OAuth client ID**.\n1. Select **Web application** for the Application Type.\n\n"
            },
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_access_token": "Invalid access token",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful",
                    "timeout_connect": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "auth": {
                        "title": "Link Google Account"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Google Assistant SDK integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "enable_conversation_agent": "Enable the conversation agent",
                            "language_code": "Language code"
                        },
                        "description": "Set language for interactions with Google Assistant and whether you want to enable the conversation agent."
                    }
                }
            },
            "services": {
                "send_text_command": {
                    "description": "Sends a command as a text query to Google Assistant.",
                    "fields": {
                        "command": {
                            "description": "Command(s) to send to Google Assistant.",
                            "name": "Command"
                        },
                        "media_player": {
                            "description": "Name(s) of media player entities to play response on.",
                            "name": "Media player entity"
                        }
                    },
                    "name": "Send text command"
                }
            }
        },
        "google_generative_ai_conversation": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "model": "Model",
                            "prompt": "Prompt Template",
                            "temperature": "Temperature",
                            "top_k": "Top K",
                            "top_p": "Top P"
                        }
                    }
                }
            }
        },
        "google_mail": {
            "application_credentials": {
                "description": "Follow the [instructions]({more_info_url}) for [OAuth consent screen]({oauth_consent_url}) to give Home Assistant access to your Google Mail. You also need to create Application Credentials linked to your account:\n1. Go to [Credentials]({oauth_creds_url}) and click **Create Credentials**.\n1. From the drop-down list select **OAuth client ID**.\n1. Select **Web application** for the Application Type.\n\n"
            },
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "invalid_access_token": "Invalid access token",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful",
                    "timeout_connect": "Timeout establishing connection",
                    "unknown": "Unexpected error",
                    "wrong_account": "Wrong account: Please authenticate with {email}."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "auth": {
                        "title": "Link Google Account"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Google Mail integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "vacation_end_date": {
                        "name": "Vacation end date"
                    }
                }
            },
            "services": {
                "set_vacation": {
                    "description": "Sets vacation responder settings for Google Mail.",
                    "fields": {
                        "enabled": {
                            "description": "Turn this off to end vacation responses.",
                            "name": "Enabled"
                        },
                        "end": {
                            "description": "Last day of the vacation.",
                            "name": "End"
                        },
                        "message": {
                            "description": "Body of the email.",
                            "name": "Message"
                        },
                        "plain_text": {
                            "description": "Choose to send message in plain text or HTML.",
                            "name": "Plain text"
                        },
                        "restrict_contacts": {
                            "description": "Restrict automatic reply to contacts.",
                            "name": "Restrict to contacts"
                        },
                        "restrict_domain": {
                            "description": "Restrict automatic reply to domain. This only affects GSuite accounts.",
                            "name": "Restrict to domain"
                        },
                        "start": {
                            "description": "First day of the vacation.",
                            "name": "Start"
                        },
                        "title": {
                            "description": "The subject for the email.",
                            "name": "Title"
                        }
                    },
                    "name": "Set vacation"
                }
            }
        },
        "google_sheets": {
            "application_credentials": {
                "description": "Follow the [instructions]({more_info_url}) for [OAuth consent screen]({oauth_consent_url}) to give Home Assistant access to your Google Sheets. You also need to create Application Credentials linked to your account:\n1. Go to [Credentials]({oauth_creds_url}) and click **Create Credentials**.\n1. From the drop-down list select **OAuth client ID**.\n1. Select **Web application** for the Application Type.\n\n"
            },
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "create_spreadsheet_failure": "Error while creating spreadsheet, see error log for details",
                    "invalid_access_token": "Invalid access token",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "oauth_error": "Received invalid token data.",
                    "open_spreadsheet_failure": "Error while opening spreadsheet, see error log for details",
                    "reauth_successful": "Re-authentication was successful",
                    "timeout_connect": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "create_entry": {
                    "default": "Successfully authenticated and spreadsheet created at: {url}"
                },
                "step": {
                    "auth": {
                        "title": "Link Google Account"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Google Sheets integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "services": {
                "append_sheet": {
                    "description": "Appends data to a worksheet in Google Sheets.",
                    "fields": {
                        "config_entry": {
                            "description": "The sheet to add data to.",
                            "name": "Sheet"
                        },
                        "data": {
                            "description": "Data to be appended to the worksheet. This puts the values on a new row underneath the matching column (key). Any new key is placed on the top of a new column.",
                            "name": "Data"
                        },
                        "worksheet": {
                            "description": "Name of the worksheet. Defaults to the first one in the document.",
                            "name": "Worksheet"
                        }
                    },
                    "name": "Append to sheet"
                }
            }
        },
        "google_translate": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "language": "Language",
                            "tld": "TLD"
                        }
                    }
                }
            }
        },
        "google_travel_time": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "destination": "Destination",
                            "name": "Name",
                            "origin": "Origin"
                        },
                        "description": "You can specify the origin and destination in the form of an address, latitude\/longitude coordinates, or a Google place ID. When specifying the location using a Google place ID, the ID must be prefixed with `place_id:`."
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "avoid": "Avoid",
                            "language": "Language",
                            "mode": "Travel Mode",
                            "time": "Time",
                            "time_type": "Time Type",
                            "traffic_mode": "Traffic Mode",
                            "traffic_model": "Traffic Model",
                            "transit_mode": "Transit Mode",
                            "transit_routing_preference": "Transit Routing Preference",
                            "units": "Units"
                        },
                        "description": "You can optionally specify either a Departure Time or Arrival Time. If specifying a departure time, you can enter `now`, a Unix timestamp, or a 24 hour time string like `08:00:00`. If specifying an arrival time, you can use a Unix timestamp or a 24 hour time string like `08:00:00`"
                    }
                }
            },
            "selector": {
                "avoid": {
                    "options": {
                        "ferries": "Ferries",
                        "highways": "Highways",
                        "indoor": "Indoor",
                        "none": "Avoid nothing",
                        "tolls": "Tolls"
                    }
                },
                "mode": {
                    "options": {
                        "bicycling": "Bicycling",
                        "driving": "Driving",
                        "transit": "Transit",
                        "walking": "Walking"
                    }
                },
                "time_type": {
                    "options": {
                        "arrival_time": "Arrival Time",
                        "departure_time": "Departure Time"
                    }
                },
                "traffic_model": {
                    "options": {
                        "best_guess": "Best Guess",
                        "optimistic": "Optimistic",
                        "pessimistic": "Pessimistic"
                    }
                },
                "transit_mode": {
                    "options": {
                        "bus": "Bus",
                        "rail": "Rail",
                        "subway": "Subway",
                        "train": "Train",
                        "tram": "Tram"
                    }
                },
                "transit_routing_preference": {
                    "options": {
                        "fewer_transfers": "Fewer Transfers",
                        "less_walking": "Less Walking"
                    }
                },
                "units": {
                    "options": {
                        "imperial": "Imperial System",
                        "metric": "Metric System"
                    }
                }
            },
            "title": "Google Maps Travel Time"
        },
        "govee_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "gpslogger": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to set up the webhook feature in GPSLogger.\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n\nSee [the documentation]({docs_url}) for further details."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up the GPSLogger Webhook?",
                        "title": "Set up the GPSLogger Webhook"
                    }
                }
            }
        },
        "gree": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            }
        },
        "group": {
            "config": {
                "step": {
                    "binary_sensor": {
                        "data": {
                            "all": "All entities",
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "description": "If \"all entities\" is enabled, the group's state is on only if all members are on. If \"all entities\" is disabled, the group's state is on if any member is on.",
                        "title": "Add Group"
                    },
                    "cover": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "event": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "fan": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "light": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "lock": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "media_player": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "sensor": {
                        "data": {
                            "device_class": "Device class",
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "ignore_non_numeric": "Ignore non-numeric",
                            "name": "Name",
                            "round_digits": "Round value to number of decimals",
                            "state_class": "State class",
                            "type": "Type",
                            "unit_of_measurement": "Unit of Measurement"
                        },
                        "title": "Add Group"
                    },
                    "switch": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "name": "Name"
                        },
                        "title": "Add Group"
                    },
                    "user": {
                        "description": "Groups allow you to create a new entity that represents multiple entities of the same type.",
                        "menu_options": {
                            "binary_sensor": "Binary sensor group",
                            "cover": "Cover group",
                            "event": "Event group",
                            "fan": "Fan group",
                            "light": "Light group",
                            "lock": "Lock group",
                            "media_player": "Media player group",
                            "sensor": "Sensor group",
                            "switch": "Switch group"
                        },
                        "title": "Add Group"
                    }
                }
            },
            "entity_component": {
                "_": {
                    "name": "Group",
                    "state": {
                        "closed": "Closed",
                        "home": "Home",
                        "locked": "Locked",
                        "not_home": "Away",
                        "off": "Off",
                        "ok": "OK",
                        "on": "On",
                        "open": "Open",
                        "problem": "Problem",
                        "unlocked": "Unlocked"
                    },
                    "state_attributes": {
                        "entity_id": {
                            "name": "Members"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "binary_sensor": {
                        "data": {
                            "all": "All entities",
                            "entities": "Members",
                            "hide_members": "Hide members"
                        },
                        "description": "If \"all entities\" is enabled, the group's state is on only if all members are on. If \"all entities\" is disabled, the group's state is on if any member is on."
                    },
                    "cover": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members"
                        }
                    },
                    "fan": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members"
                        }
                    },
                    "light": {
                        "data": {
                            "all": "All entities",
                            "entities": "Members",
                            "hide_members": "Hide members"
                        },
                        "description": "If \"all entities\" is enabled, the group's state is on only if all members are on. If \"all entities\" is disabled, the group's state is on if any member is on."
                    },
                    "lock": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members"
                        }
                    },
                    "media_player": {
                        "data": {
                            "entities": "Members",
                            "hide_members": "Hide members"
                        }
                    },
                    "sensor": {
                        "data": {
                            "device_class": "Device class",
                            "entities": "Members",
                            "hide_members": "Hide members",
                            "ignore_non_numeric": "Ignore non-numeric",
                            "round_digits": "Round value to number of decimals",
                            "state_class": "State class",
                            "type": "Type",
                            "unit_of_measurement": "Unit of Measurement"
                        },
                        "description": "If \"ignore non-numeric\" is enabled, the group's state is calculated if at least one member has a numerical value. If \"ignore non-numeric\" is disabled, the group's state is calculated only if all group members have numerical values."
                    },
                    "switch": {
                        "data": {
                            "all": "All entities",
                            "entities": "Members",
                            "hide_members": "Hide members"
                        },
                        "description": "If \"all entities\" is enabled, the group's state is on only if all members are on. If \"all entities\" is disabled, the group's state is on if any member is on."
                    }
                }
            },
            "selector": {
                "type": {
                    "options": {
                        "last": "Most recently updated",
                        "max": "Maximum",
                        "mean": "Arithmetic mean",
                        "median": "Median",
                        "min": "Minimum",
                        "product": "Product",
                        "range": "Statistical range",
                        "sum": "Sum"
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
                    "name": "Reload"
                },
                "remove": {
                    "description": "Removes a group.",
                    "fields": {
                        "object_id": {
                            "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id].",
                            "name": "Object ID"
                        }
                    },
                    "name": "Remove"
                },
                "set": {
                    "description": "Creates\/Updates a user group.",
                    "fields": {
                        "add_entities": {
                            "description": "List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`.",
                            "name": "Add entities"
                        },
                        "all": {
                            "description": "Enable this option if the group should only be used when all entities are in state `on`.",
                            "name": "All"
                        },
                        "entities": {
                            "description": "List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`.",
                            "name": "Entities"
                        },
                        "icon": {
                            "description": "Name of the icon for the group.",
                            "name": "Icon"
                        },
                        "name": {
                            "description": "Name of the group.",
                            "name": "Name"
                        },
                        "object_id": {
                            "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id].",
                            "name": "Object ID"
                        },
                        "remove_entities": {
                            "description": "List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`.",
                            "name": "Remove entities"
                        }
                    },
                    "name": "Set"
                }
            },
            "title": "Group"
        },
        "growatt_server": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_plants": "No plants have been found on this account"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "plant": {
                        "data": {
                            "plant_id": "Plant"
                        },
                        "title": "Select your plant"
                    },
                    "user": {
                        "data": {
                            "name": "Name",
                            "password": "Password",
                            "url": "URL",
                            "username": "Username"
                        },
                        "title": "Enter your Growatt information"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "inverter_amperage_input_1": {
                        "name": "Input 1 Amperage"
                    },
                    "inverter_amperage_input_2": {
                        "name": "Input 2 Amperage"
                    },
                    "inverter_amperage_input_3": {
                        "name": "Input 3 Amperage"
                    },
                    "inverter_current_reactive_wattage": {
                        "name": "Reactive wattage"
                    },
                    "inverter_current_wattage": {
                        "name": "Output power"
                    },
                    "inverter_energy_today": {
                        "name": "Energy today"
                    },
                    "inverter_energy_total": {
                        "name": "Lifetime energy output"
                    },
                    "inverter_frequency": {
                        "name": "AC frequency"
                    },
                    "inverter_internal_wattage": {
                        "name": "Internal wattage"
                    },
                    "inverter_ipm_temperature": {
                        "name": "Intelligent Power Management temperature"
                    },
                    "inverter_reactive_amperage": {
                        "name": "Reactive amperage"
                    },
                    "inverter_reactive_voltage": {
                        "name": "Reactive voltage"
                    },
                    "inverter_temperature": {
                        "name": "Inverter temperature"
                    },
                    "inverter_voltage_input_1": {
                        "name": "Input 1 voltage"
                    },
                    "inverter_voltage_input_2": {
                        "name": "Input 2 voltage"
                    },
                    "inverter_voltage_input_3": {
                        "name": "Input 3 voltage"
                    },
                    "inverter_wattage_input_1": {
                        "name": "Input 1 Wattage"
                    },
                    "inverter_wattage_input_2": {
                        "name": "Input 2 Wattage"
                    },
                    "inverter_wattage_input_3": {
                        "name": "Input 3 Wattage"
                    },
                    "mix_battery_charge": {
                        "name": "Battery charging"
                    },
                    "mix_battery_charge_lifetime": {
                        "name": "Lifetime battery charged"
                    },
                    "mix_battery_charge_today": {
                        "name": "Battery charged today"
                    },
                    "mix_battery_discharge_kw": {
                        "name": "Battery discharging kW"
                    },
                    "mix_battery_discharge_lifetime": {
                        "name": "Lifetime battery discharged"
                    },
                    "mix_battery_discharge_today": {
                        "name": "Battery discharged today"
                    },
                    "mix_battery_discharge_w": {
                        "name": "Battery discharging W"
                    },
                    "mix_battery_voltage": {
                        "name": "Battery voltage"
                    },
                    "mix_export_to_grid": {
                        "name": "Export to grid"
                    },
                    "mix_export_to_grid_lifetime": {
                        "name": "Lifetime export to grid"
                    },
                    "mix_export_to_grid_today": {
                        "name": "Export to grid today"
                    },
                    "mix_grid_voltage": {
                        "name": "Grid voltage"
                    },
                    "mix_import_from_grid": {
                        "name": "Import from grid"
                    },
                    "mix_import_from_grid_today": {
                        "name": "Import from grid today (load)"
                    },
                    "mix_import_from_grid_today_combined": {
                        "name": "Import from grid today (load + charging)"
                    },
                    "mix_last_update": {
                        "name": "Last Data Update"
                    },
                    "mix_load_consumption": {
                        "name": "Load consumption"
                    },
                    "mix_load_consumption_battery_today": {
                        "name": "Load consumption today (battery)"
                    },
                    "mix_load_consumption_lifetime": {
                        "name": "Lifetime load consumption"
                    },
                    "mix_load_consumption_solar_today": {
                        "name": "Load consumption today (solar)"
                    },
                    "mix_load_consumption_today": {
                        "name": "Load consumption today"
                    },
                    "mix_load_consumption_total": {
                        "name": "Lifetime total load consumption"
                    },
                    "mix_pv1_voltage": {
                        "name": "PV1 voltage"
                    },
                    "mix_pv2_voltage": {
                        "name": "PV2 voltage"
                    },
                    "mix_self_consumption_today": {
                        "name": "Self consumption today (solar + battery)"
                    },
                    "mix_solar_generation_lifetime": {
                        "name": "Lifetime solar energy"
                    },
                    "mix_solar_generation_today": {
                        "name": "Solar energy today"
                    },
                    "mix_statement_of_charge": {
                        "name": "Statement of charge"
                    },
                    "mix_system_production_today": {
                        "name": "System production today (self-consumption + export)"
                    },
                    "mix_wattage_pv_1": {
                        "name": "PV1 Wattage"
                    },
                    "mix_wattage_pv_2": {
                        "name": "PV2 Wattage"
                    },
                    "mix_wattage_pv_all": {
                        "name": "All PV Wattage"
                    },
                    "storage_ac_input_frequency_out": {
                        "name": "AC input frequency"
                    },
                    "storage_ac_output_frequency": {
                        "name": "Ac output frequency"
                    },
                    "storage_battery_percentage": {
                        "name": "Battery percentage"
                    },
                    "storage_battery_voltage": {
                        "name": "Battery voltage"
                    },
                    "storage_charge_storage_lifetime": {
                        "name": "Lifetime stored charged"
                    },
                    "storage_charge_today": {
                        "name": "Charge today"
                    },
                    "storage_current_1": {
                        "name": "Solar current to storage"
                    },
                    "storage_current_pv": {
                        "name": "Solar charge current"
                    },
                    "storage_grid_amperage_input": {
                        "name": "Grid charge current"
                    },
                    "storage_grid_charged_today": {
                        "name": "Grid charged today"
                    },
                    "storage_grid_discharge_today": {
                        "name": "Grid discharged today"
                    },
                    "storage_grid_out_current": {
                        "name": "Grid out current"
                    },
                    "storage_grid_voltage": {
                        "name": "AC input voltage"
                    },
                    "storage_import_from_grid": {
                        "name": "Import from grid"
                    },
                    "storage_import_from_grid_today": {
                        "name": "Import from grid today"
                    },
                    "storage_import_from_grid_total": {
                        "name": "Import from grid total"
                    },
                    "storage_load_consumption": {
                        "name": "Load consumption"
                    },
                    "storage_load_consumption_lifetime": {
                        "name": "Lifetime load consumption"
                    },
                    "storage_load_consumption_solar_storage": {
                        "name": "Load consumption (Solar + Storage)"
                    },
                    "storage_load_consumption_today": {
                        "name": "Load consumption today"
                    },
                    "storage_load_percentage": {
                        "name": "Load percentage"
                    },
                    "storage_output_voltage": {
                        "name": "Output voltage"
                    },
                    "storage_power_flow": {
                        "name": "Storage charging\/ discharging(-ve)"
                    },
                    "storage_pv_charging_voltage": {
                        "name": "PV charging voltage"
                    },
                    "storage_solar_production": {
                        "name": "Solar power production"
                    },
                    "storage_storage_production_lifetime": {
                        "name": "Lifetime Storage production"
                    },
                    "storage_storage_production_today": {
                        "name": "Storage production today"
                    },
                    "tlx_all_batteries_charge_today": {
                        "name": "All batteries charged today"
                    },
                    "tlx_all_batteries_charge_total": {
                        "name": "Lifetime total all batteries charged"
                    },
                    "tlx_all_batteries_discharge_today": {
                        "name": "All batteries discharged today"
                    },
                    "tlx_all_batteries_discharge_total": {
                        "name": "Lifetime total all batteries discharged"
                    },
                    "tlx_amperage_input_1": {
                        "name": "Input 1 Amperage"
                    },
                    "tlx_amperage_input_2": {
                        "name": "Input 2 Amperage"
                    },
                    "tlx_amperage_input_3": {
                        "name": "Input 3 Amperage"
                    },
                    "tlx_amperage_input_4": {
                        "name": "Input 4 Amperage"
                    },
                    "tlx_battery_1_charge_total": {
                        "name": "Lifetime total battery 1 charged"
                    },
                    "tlx_battery_1_charge_w": {
                        "name": "Battery 1 charging W"
                    },
                    "tlx_battery_1_discharge_total": {
                        "name": "Lifetime total battery 1 discharged"
                    },
                    "tlx_battery_1_discharge_w": {
                        "name": "Battery 1 discharging W"
                    },
                    "tlx_battery_2_charge_total": {
                        "name": "Lifetime total battery 2 charged"
                    },
                    "tlx_battery_2_charge_w": {
                        "name": "Battery 2 charging W"
                    },
                    "tlx_battery_2_discharge_total": {
                        "name": "Lifetime total battery 2 discharged"
                    },
                    "tlx_battery_2_discharge_w": {
                        "name": "Battery 2 discharging W"
                    },
                    "tlx_current_wattage": {
                        "name": "Output power"
                    },
                    "tlx_energy_today": {
                        "name": "Energy today"
                    },
                    "tlx_energy_today_input_1": {
                        "name": "Energy Today Input 1"
                    },
                    "tlx_energy_today_input_2": {
                        "name": "Energy Today Input 2"
                    },
                    "tlx_energy_today_input_3": {
                        "name": "Energy Today Input 3"
                    },
                    "tlx_energy_today_input_4": {
                        "name": "Energy Today Input 4"
                    },
                    "tlx_energy_total": {
                        "name": "Lifetime energy output"
                    },
                    "tlx_energy_total_input_1": {
                        "name": "Lifetime total energy input 1"
                    },
                    "tlx_energy_total_input_2": {
                        "name": "Lifetime total energy input 2"
                    },
                    "tlx_energy_total_input_3": {
                        "name": "Lifetime total energy input 3"
                    },
                    "tlx_energy_total_input_4": {
                        "name": "Lifetime total energy input 4"
                    },
                    "tlx_export_to_grid_today": {
                        "name": "Export to grid today"
                    },
                    "tlx_export_to_grid_total": {
                        "name": "Lifetime total export to grid"
                    },
                    "tlx_frequency": {
                        "name": "AC frequency"
                    },
                    "tlx_internal_wattage": {
                        "name": "Internal wattage"
                    },
                    "tlx_load_consumption_today": {
                        "name": "Load consumption today"
                    },
                    "tlx_reactive_voltage": {
                        "name": "Reactive voltage"
                    },
                    "tlx_solar_generation_total": {
                        "name": "Lifetime total solar energy"
                    },
                    "tlx_statement_of_charge": {
                        "name": "Statement of charge (SoC)"
                    },
                    "tlx_temperature_1": {
                        "name": "Temperature 1"
                    },
                    "tlx_temperature_2": {
                        "name": "Temperature 2"
                    },
                    "tlx_temperature_3": {
                        "name": "Temperature 3"
                    },
                    "tlx_temperature_4": {
                        "name": "Temperature 4"
                    },
                    "tlx_temperature_5": {
                        "name": "Temperature 5"
                    },
                    "tlx_voltage_input_1": {
                        "name": "Input 1 voltage"
                    },
                    "tlx_voltage_input_2": {
                        "name": "Input 2 voltage"
                    },
                    "tlx_voltage_input_3": {
                        "name": "Input 3 voltage"
                    },
                    "tlx_voltage_input_4": {
                        "name": "Input 4 voltage"
                    },
                    "tlx_wattage_input_1": {
                        "name": "Input 1 Wattage"
                    },
                    "tlx_wattage_input_2": {
                        "name": "Input 2 Wattage"
                    },
                    "tlx_wattage_input_3": {
                        "name": "Input 3 Wattage"
                    },
                    "tlx_wattage_input_4": {
                        "name": "Input 4 Wattage"
                    },
                    "total_energy_output": {
                        "name": "Lifetime energy output"
                    },
                    "total_energy_today": {
                        "name": "Energy Today"
                    },
                    "total_maximum_output": {
                        "name": "Maximum power"
                    },
                    "total_money_today": {
                        "name": "Total money today"
                    },
                    "total_money_total": {
                        "name": "Money lifetime"
                    },
                    "total_output_power": {
                        "name": "Output Power"
                    }
                }
            },
            "title": "Growatt Server"
        },
        "guardian": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up this Guardian device?"
                    },
                    "user": {
                        "data": {
                            "ip_address": "IP Address",
                            "port": "Port"
                        },
                        "description": "Configure a local Elexa Guardian device."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "leak": {
                        "name": "Leak detected"
                    },
                    "moved": {
                        "name": "Recently moved"
                    }
                },
                "button": {
                    "reset_diagnostics": {
                        "name": "Reset valve diagnostics"
                    }
                },
                "sensor": {
                    "uptime": {
                        "name": "Uptime"
                    }
                },
                "switch": {
                    "onboard_access_point": {
                        "name": "Onboard access point"
                    },
                    "valve_controller": {
                        "name": "Valve controller"
                    }
                }
            },
            "issues": {
                "deprecated_service": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Update any automations or scripts that use this service to instead use the `{alternate_service}` service with a target entity ID of `{alternate_target}`.",
                                "title": "The {deprecated_service} service will be removed"
                            }
                        }
                    },
                    "title": "The {deprecated_service} service will be removed"
                }
            },
            "services": {
                "pair_sensor": {
                    "description": "Adds a new paired sensor to the valve controller.",
                    "fields": {
                        "device_id": {
                            "description": "The valve controller to add the sensor to.",
                            "name": "Valve controller"
                        },
                        "uid": {
                            "description": "The UID of the paired sensor.",
                            "name": "UID"
                        }
                    },
                    "name": "Pair sensor"
                },
                "unpair_sensor": {
                    "description": "Removes a paired sensor from the valve controller.",
                    "fields": {
                        "device_id": {
                            "description": "The valve controller to remove the sensor from.",
                            "name": "Valve controller"
                        },
                        "uid": {
                            "description": "The UID of the paired sensor.",
                            "name": "UID"
                        }
                    },
                    "name": "Unpair sensor"
                },
                "upgrade_firmware": {
                    "description": "Upgrades the device firmware.",
                    "fields": {
                        "device_id": {
                            "description": "The valve controller whose firmware should be upgraded.",
                            "name": "Valve controller"
                        },
                        "filename": {
                            "description": "The firmware filename.",
                            "name": "Filename"
                        },
                        "port": {
                            "description": "The port on which the firmware file is served.",
                            "name": "Port"
                        },
                        "url": {
                            "description": "The URL of the server hosting the firmware file.",
                            "name": "URL"
                        }
                    },
                    "name": "Upgrade firmware"
                }
            }
        },
        "habitica": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "invalid_credentials": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "api_user": "Habitica’s API user ID",
                            "name": "Override for Habitica’s username. Will be used for service calls",
                            "url": "URL"
                        },
                        "description": "Connect your Habitica profile to allow monitoring of your user's profile and tasks. Note that api_id and api_key must be gotten from https:\/\/habitica.com\/user\/settings\/api"
                    }
                }
            },
            "services": {
                "api_call": {
                    "description": "Calls Habitica API.",
                    "fields": {
                        "args": {
                            "description": "Any additional JSON or URL parameter arguments. See apidoc mentioned for path. Example uses same API endpoint.",
                            "name": "Args"
                        },
                        "name": {
                            "description": "Habitica's username to call for.",
                            "name": "Name"
                        },
                        "path": {
                            "description": "Items from API URL in form of an array with method attached at the end. Consult https:\/\/habitica.com\/apidoc\/. Example uses https:\/\/habitica.com\/apidoc\/#api-Task-CreateUserTasks.",
                            "name": "Path"
                        }
                    },
                    "name": "API name"
                }
            }
        },
        "harmony": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "link": {
                        "description": "Do you want to set up {name} ({host})?",
                        "title": "Set up Logitech Harmony Hub"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Hub Name"
                        },
                        "title": "Set up Logitech Harmony Hub"
                    }
                }
            },
            "entity": {
                "select": {
                    "activities": {
                        "state": {
                            "power_off": "Power Off"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "activity": "The default activity to execute when none is specified.",
                            "delay_secs": "The delay between sending commands."
                        },
                        "description": "Adjust Harmony Hub Options"
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "harmony__activities": {
                            "power_off": "Power Off"
                        }
                    }
                }
            },
            "services": {
                "change_channel": {
                    "description": "Sends change channel command to the Harmony HUB.",
                    "fields": {
                        "channel": {
                            "description": "Channel number to change to.",
                            "name": "Channel"
                        }
                    },
                    "name": "Change channel"
                },
                "sync": {
                    "description": "Syncs the remote's configuration.",
                    "name": "Sync"
                }
            }
        },
        "hassio": {
            "entity": {
                "binary_sensor": {
                    "state": {
                        "name": "Running"
                    }
                },
                "sensor": {
                    "agent_version": {
                        "name": "OS Agent version"
                    },
                    "apparmor_version": {
                        "name": "Apparmor version"
                    },
                    "cpu_percent": {
                        "name": "CPU percent"
                    },
                    "disk_free": {
                        "name": "Disk free"
                    },
                    "disk_total": {
                        "name": "Disk total"
                    },
                    "disk_used": {
                        "name": "Disk used"
                    },
                    "memory_percent": {
                        "name": "Memory percent"
                    },
                    "version": {
                        "name": "Version"
                    },
                    "version_latest": {
                        "name": "Newest version"
                    }
                }
            },
            "issues": {
                "issue_mount_mount_failed": {
                    "fix_flow": {
                        "abort": {
                            "apply_suggestion_fail": "Could not apply the fix. Check the Supervisor logs for more details."
                        },
                        "step": {
                            "fix_menu": {
                                "description": "Could not connect to `{reference}`. Check host logs for errors from the mount service for more details.\n\nUse reload to try to connect again. If you need to update `{reference}`, go to [storage]({storage_url}).",
                                "menu_options": {
                                    "mount_execute_reload": "Reload",
                                    "mount_execute_remove": "Remove"
                                }
                            }
                        }
                    },
                    "title": "Network storage device failed"
                },
                "issue_system_docker_config": {
                    "fix_flow": {
                        "abort": {
                            "apply_suggestion_fail": "One or more of the restarts failed. Check the Supervisor logs for more details."
                        },
                        "step": {
                            "system_execute_rebuild": {
                                "description": "The default configuration for add-ons and Home Assistant has changed. To update the configuration with the new defaults, a restart is required for the following:\n\n- {components}"
                            }
                        }
                    },
                    "title": "Restart(s) required"
                },
                "issue_system_multiple_data_disks": {
                    "fix_flow": {
                        "abort": {
                            "apply_suggestion_fail": "Could not rename the filesystem. Check the Supervisor logs for more details."
                        },
                        "step": {
                            "system_rename_data_disk": {
                                "description": "`{reference}` is a filesystem with the name hassos-data and is not the active data disk. This can cause Home Assistant to choose the wrong data disk at system reboot.\n\nUse the fix option to rename the filesystem to prevent this. Alternatively you can move the data disk to the drive (overwriting its contents) or remove the drive from the system."
                            }
                        }
                    },
                    "title": "Multiple data disks detected"
                },
                "issue_system_reboot_required": {
                    "fix_flow": {
                        "abort": {
                            "apply_suggestion_fail": "Could not reboot the system. Check the Supervisor logs for more details."
                        },
                        "step": {
                            "system_execute_reboot": {
                                "description": "Settings were changed which require a system reboot to take effect.\n\nThis fix will initiate a system reboot which will make Home Assistant and all the Add-ons inaccessible for a brief period."
                            }
                        }
                    },
                    "title": "Reboot required"
                },
                "unhealthy": {
                    "description": "System is currently unhealthy due to {reason}. Use the link to learn more and how to fix this.",
                    "title": "Unhealthy system - {reason}"
                },
                "unhealthy_docker": {
                    "description": "System is currently unhealthy because Docker is configured incorrectly. Use the link to learn more and how to fix this.",
                    "title": "Unhealthy system - Docker misconfigured"
                },
                "unhealthy_privileged": {
                    "description": "System is currently unhealthy because it does not have privileged access to the docker runtime. Use the link to learn more and how to fix this.",
                    "title": "Unhealthy system - Not privileged"
                },
                "unhealthy_setup": {
                    "description": "System is currently unhealthy because setup failed to complete. There are a number of reasons this can occur, use the link to learn more and how to fix this.",
                    "title": "Unhealthy system - Setup failed"
                },
                "unhealthy_supervisor": {
                    "description": "System is currently unhealthy because an attempt to update Supervisor to the latest version has failed. Use the link to learn more and how to fix this.",
                    "title": "Unhealthy system - Supervisor update failed"
                },
                "unhealthy_untrusted": {
                    "description": "System is currently unhealthy because it has detected untrusted code or images in use. Use the link to learn more and how to fix this.",
                    "title": "Unhealthy system - Untrusted code"
                },
                "unsupported": {
                    "description": "System is unsupported due to {reason}. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - {reason}"
                },
                "unsupported_apparmor": {
                    "description": "System is unsupported because AppArmor is working incorrectly and add-ons are running in an unprotected and insecure way. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - AppArmor issues"
                },
                "unsupported_cgroup_version": {
                    "description": "System is unsupported because the wrong version of Docker CGroup is in use. Use the link to learn the correct version and how to fix this.",
                    "title": "Unsupported system - CGroup version"
                },
                "unsupported_connectivity_check": {
                    "description": "System is unsupported because Home Assistant cannot determine when an internet connection is available. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Connectivity check disabled"
                },
                "unsupported_content_trust": {
                    "description": "System is unsupported because Home Assistant cannot verify content being run is trusted and not modified by attackers. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Content-trust check disabled"
                },
                "unsupported_dbus": {
                    "description": "System is unsupported because D-Bus is working incorrectly. Many things fail without this as Supervisor cannot communicate with the host. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - D-Bus issues"
                },
                "unsupported_dns_server": {
                    "description": "System is unsupported because the provided DNS server does not work correctly and the fallback DNS option has been disabled. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - DNS server issues"
                },
                "unsupported_docker_configuration": {
                    "description": "System is unsupported because the Docker daemon is running in an unexpected way. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Docker misconfigured"
                },
                "unsupported_docker_version": {
                    "description": "System is unsupported because the wrong version of Docker is in use. Use the link to learn the correct version and how to fix this.",
                    "title": "Unsupported system - Docker version"
                },
                "unsupported_job_conditions": {
                    "description": "System is unsupported because one or more job conditions have been disabled which protect from unexpected failures and breakages. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Protections disabled"
                },
                "unsupported_lxc": {
                    "description": "System is unsupported because it is being run in an LXC virtual machine. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - LXC detected"
                },
                "unsupported_network_manager": {
                    "description": "System is unsupported because Network Manager is missing, inactive or misconfigured. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Network Manager issues"
                },
                "unsupported_os": {
                    "description": "System is unsupported because the operating system in use is not tested or maintained for use with Supervisor. Use the link to which operating systems are supported and how to fix this.",
                    "title": "Unsupported system - Operating System"
                },
                "unsupported_os_agent": {
                    "description": "System is unsupported because OS-Agent is missing, inactive or misconfigured. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - OS-Agent issues"
                },
                "unsupported_restart_policy": {
                    "description": "System is unsupported because a Docker container has a restart policy set which could cause issues on startup. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Container restart policy"
                },
                "unsupported_software": {
                    "description": "System is unsupported because additional software outside the Home Assistant ecosystem has been detected. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Unsupported software"
                },
                "unsupported_source_mods": {
                    "description": "System is unsupported because Supervisor source code has been modified. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Supervisor source modifications"
                },
                "unsupported_supervisor_version": {
                    "description": "System is unsupported because an out-of-date version of Supervisor is in use and auto-update has been disabled. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Supervisor version"
                },
                "unsupported_systemd": {
                    "description": "System is unsupported because Systemd is missing, inactive or misconfigured. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Systemd issues"
                },
                "unsupported_systemd_journal": {
                    "description": "System is unsupported because Systemd Journal and\/or the gateway service is missing, inactive or misconfigured . Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Systemd Journal issues"
                },
                "unsupported_systemd_resolved": {
                    "description": "System is unsupported because Systemd Resolved is missing, inactive or misconfigured. Use the link to learn more and how to fix this.",
                    "title": "Unsupported system - Systemd-Resolved issues"
                }
            },
            "services": {
                "addon_restart": {
                    "description": "Restarts an add-on.",
                    "fields": {
                        "addon": {
                            "description": "The add-on slug.",
                            "name": "Add-on"
                        }
                    },
                    "name": "Restart add-on."
                },
                "addon_start": {
                    "description": "Starts an add-on.",
                    "fields": {
                        "addon": {
                            "description": "The add-on slug.",
                            "name": "Add-on"
                        }
                    },
                    "name": "Start add-on"
                },
                "addon_stdin": {
                    "description": "Writes data to add-on stdin.",
                    "fields": {
                        "addon": {
                            "description": "The add-on slug.",
                            "name": "Add-on"
                        }
                    },
                    "name": "Write data to add-on stdin."
                },
                "addon_stop": {
                    "description": "Stops an add-on.",
                    "fields": {
                        "addon": {
                            "description": "The add-on slug.",
                            "name": "Add-on"
                        }
                    },
                    "name": "Stop add-on."
                },
                "addon_update": {
                    "description": "Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes\/change logs before updating an add-on.",
                    "fields": {
                        "addon": {
                            "description": "The add-on slug.",
                            "name": "Add-on"
                        }
                    },
                    "name": "Update add-on."
                },
                "backup_full": {
                    "description": "Creates a full backup.",
                    "fields": {
                        "compressed": {
                            "description": "Compresses the backup files.",
                            "name": "Compressed"
                        },
                        "location": {
                            "description": "Name of a backup network storage to host backups.",
                            "name": "Location"
                        },
                        "name": {
                            "description": "Optional (default = current date and time).",
                            "name": "Name"
                        },
                        "password": {
                            "description": "Password to protect the backup with.",
                            "name": "Password"
                        }
                    },
                    "name": "Create a full backup."
                },
                "backup_partial": {
                    "description": "Creates a partial backup.",
                    "fields": {
                        "addons": {
                            "description": "List of add-ons to include in the backup. Use the name slug of the add-on.",
                            "name": "Add-ons"
                        },
                        "compressed": {
                            "description": "Compresses the backup files.",
                            "name": "Compressed"
                        },
                        "folders": {
                            "description": "List of directories to include in the backup.",
                            "name": "Folders"
                        },
                        "homeassistant": {
                            "description": "Includes Home Assistant settings in the backup.",
                            "name": "Home Assistant settings"
                        },
                        "location": {
                            "description": "Name of a backup network storage to host backups.",
                            "name": "Location"
                        },
                        "name": {
                            "description": "Optional (default = current date and time).",
                            "name": "Name"
                        },
                        "password": {
                            "description": "Password to protect the backup with.",
                            "name": "Password"
                        }
                    },
                    "name": "Create a partial backup."
                },
                "host_reboot": {
                    "description": "Reboots the host system.",
                    "name": "Reboot the host system."
                },
                "host_shutdown": {
                    "description": "Powers off the host system.",
                    "name": "Power off the host system."
                },
                "restore_full": {
                    "description": "Restores from full backup.",
                    "fields": {
                        "password": {
                            "description": "Optional password.",
                            "name": "Password"
                        },
                        "slug": {
                            "description": "Slug of backup to restore from.",
                            "name": "Slug"
                        }
                    },
                    "name": "Restore from full backup."
                },
                "restore_partial": {
                    "description": "Restores from a partial backup.",
                    "fields": {
                        "addons": {
                            "description": "List of add-ons to include in the backup. Use the name slug of the add-on.",
                            "name": "Add-ons"
                        },
                        "folders": {
                            "description": "List of directories to include in the backup.",
                            "name": "Folders"
                        },
                        "homeassistant": {
                            "description": "Restores Home Assistant.",
                            "name": "Home Assistant settings"
                        },
                        "password": {
                            "description": "Optional password.",
                            "name": "Password"
                        },
                        "slug": {
                            "description": "Slug of backup to restore from.",
                            "name": "Slug"
                        }
                    },
                    "name": "Restore from partial backup."
                }
            },
            "system_health": {
                "info": {
                    "agent_version": "Agent Version",
                    "board": "Board",
                    "disk_total": "Disk Total",
                    "disk_used": "Disk Used",
                    "docker_version": "Docker Version",
                    "healthy": "Healthy",
                    "host_os": "Host Operating System",
                    "installed_addons": "Installed Add-ons",
                    "supervisor_api": "Supervisor API",
                    "supervisor_version": "Supervisor Version",
                    "supported": "Supported",
                    "update_channel": "Update Channel",
                    "version_api": "Version API"
                }
            }
        },
        "hdmi_cec": {
            "services": {
                "power_on": {
                    "description": "Power on all devices which supports it.",
                    "name": "Power on"
                },
                "select_device": {
                    "description": "Select HDMI device.",
                    "fields": {
                        "device": {
                            "description": "Address of device to select. Can be entity_id, physical address or alias from configuration.",
                            "name": "Device"
                        }
                    },
                    "name": "Select device"
                },
                "send_command": {
                    "description": "Sends CEC command into HDMI CEC capable adapter.",
                    "fields": {
                        "att": {
                            "description": "Optional parameters.",
                            "name": "Att"
                        },
                        "cmd": {
                            "description": "Command itself. Could be decimal number or string with hexadeximal notation: \"0x10\".",
                            "name": "Command"
                        },
                        "dst": {
                            "description": "Destination for command. Could be decimal number or string with hexadeximal notation: \"0x10\".",
                            "name": "Destination"
                        },
                        "raw": {
                            "description": "Raw CEC command in format \"00:00:00:00\" where first two digits are source and destination, second byte is command and optional other bytes are command parameters. If raw command specified, other params are ignored.",
                            "name": "Raw"
                        },
                        "src": {
                            "description": "Source of command. Could be decimal number or string with hexadeximal notation: \"0x10\".",
                            "name": "Source"
                        }
                    },
                    "name": "Send command"
                },
                "standby": {
                    "description": "Standby all devices which supports it.",
                    "name": "Standby"
                },
                "update": {
                    "description": "Updates devices state from network.",
                    "name": "Update"
                },
                "volume": {
                    "description": "Increases or decreases volume of system.",
                    "fields": {
                        "down": {
                            "description": "Decreases volume x levels.",
                            "name": "Down"
                        },
                        "mute": {
                            "description": "Mutes audio system.",
                            "name": "Mute"
                        },
                        "up": {
                            "description": "Increases volume x levels.",
                            "name": "Up"
                        }
                    },
                    "name": "Volume"
                }
            }
        },
        "heos": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Please enter the host name or IP address of a Heos device (preferably one connected via wire to the network).",
                        "title": "Connect to Heos"
                    }
                }
            },
            "services": {
                "sign_in": {
                    "description": "Signs the controller in to a HEOS account.",
                    "fields": {
                        "password": {
                            "description": "The password of the HEOS account.",
                            "name": "Password"
                        },
                        "username": {
                            "description": "The username or email of the HEOS account.",
                            "name": "Username"
                        }
                    },
                    "name": "Sign in"
                },
                "sign_out": {
                    "description": "Signs the controller out of the HEOS account.",
                    "name": "Sign out"
                }
            }
        },
        "here_travel_time": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "destination_coordinates": {
                        "data": {
                            "destination": "Destination as GPS coordinates"
                        },
                        "title": "Choose Destination"
                    },
                    "destination_entity_id": {
                        "data": {
                            "destination_entity_id": "Destination using an entity"
                        },
                        "title": "Choose Destination"
                    },
                    "destination_menu": {
                        "menu_options": {
                            "destination_coordinates": "Using a map location",
                            "destination_entity": "Using an entity"
                        },
                        "title": "Choose Destination"
                    },
                    "origin_coordinates": {
                        "data": {
                            "origin": "Origin as GPS coordinates"
                        },
                        "title": "Choose Origin"
                    },
                    "origin_entity_id": {
                        "data": {
                            "origin_entity_id": "Origin using an entity"
                        },
                        "title": "Choose Origin"
                    },
                    "origin_menu": {
                        "menu_options": {
                            "origin_coordinates": "Using a map location",
                            "origin_entity": "Using an entity"
                        },
                        "title": "Choose Origin"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "mode": "Travel Mode",
                            "name": "Name"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "destination": {
                        "name": "Destination"
                    },
                    "distance": {
                        "name": "Distance"
                    },
                    "duration": {
                        "name": "Duration"
                    },
                    "duration_in_traffic": {
                        "name": "Duration in traffic"
                    },
                    "origin": {
                        "name": "Origin"
                    }
                }
            },
            "options": {
                "step": {
                    "arrival_time": {
                        "data": {
                            "arrival_time": "Arrival Time"
                        },
                        "title": "Choose Arrival Time"
                    },
                    "departure_time": {
                        "data": {
                            "departure_time": "Departure Time"
                        },
                        "title": "Choose Departure Time"
                    },
                    "init": {
                        "data": {
                            "route_mode": "Route Mode",
                            "traffic_mode": "Traffic Mode",
                            "unit_system": "Unit system"
                        }
                    },
                    "time_menu": {
                        "menu_options": {
                            "arrival_time": "Configure an arrival time",
                            "departure_time": "Configure a departure time",
                            "no_time": "Do not configure a time"
                        },
                        "title": "Choose Time Type"
                    }
                }
            }
        },
        "hisense_aehw4a1": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up Hisense AEH-W4A1?"
                    }
                }
            }
        },
        "history_stats": {
            "services": {
                "reload": {
                    "description": "Reloads history stats sensors from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "hive": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown_entry": "Unable to find existing entry."
                },
                "error": {
                    "invalid_code": "Failed to sign into Hive. Your two-factor authentication code was incorrect.",
                    "invalid_password": "Failed to sign into Hive. Incorrect password please try again.",
                    "invalid_username": "Failed to sign into Hive. Your email address is not recognised.",
                    "no_internet_available": "An internet connection is required to connect to Hive.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "2fa": {
                        "data": {
                            "2fa": "Two-factor code"
                        },
                        "description": "Enter your Hive authentication code. \n \n Please enter code 0000 to request another code.",
                        "title": "Hive Two-factor Authentication."
                    },
                    "configuration": {
                        "data": {
                            "device_name": "Device Name"
                        },
                        "description": "Enter your Hive configuration ",
                        "title": "Hive Configuration."
                    },
                    "reauth": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Re-enter your Hive login information.",
                        "title": "Hive Login"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "scan_interval": "Scan Interval (seconds)",
                            "username": "Username"
                        },
                        "description": "Enter your Hive login information.",
                        "title": "Hive Login"
                    }
                }
            },
            "options": {
                "step": {
                    "user": {
                        "data": {
                            "scan_interval": "Scan Interval (seconds)"
                        },
                        "description": "Update the scan interval to poll for data more often.",
                        "title": "Options for Hive"
                    }
                }
            },
            "services": {
                "boost_heating": {
                    "description": "To be deprecated please use boost_heating_on.",
                    "fields": {
                        "temperature": {
                            "description": "Set the target temperature for the boost period.",
                            "name": "Temperature"
                        },
                        "time_period": {
                            "description": "Set the time period for the boost.",
                            "name": "Time period"
                        }
                    },
                    "name": "Boost heating (to be deprecated)"
                },
                "boost_heating_off": {
                    "description": "Sets the boost mode OFF.",
                    "fields": {
                        "entity_id": {
                            "description": "Select entity_id to turn boost off.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Boost heating off"
                },
                "boost_heating_on": {
                    "description": "Sets the boost mode ON defining the period of time and the desired target temperature for the boost.",
                    "fields": {
                        "temperature": {
                            "description": "Set the target temperature for the boost period.",
                            "name": "Temperature"
                        },
                        "time_period": {
                            "description": "Set the time period for the boost.",
                            "name": "Time Period"
                        }
                    },
                    "name": "Boost heating on"
                },
                "boost_hot_water": {
                    "description": "Sets the boost mode ON or OFF defining the period of time for the boost.",
                    "fields": {
                        "entity_id": {
                            "description": "Select entity_id to boost.",
                            "name": "Entity ID"
                        },
                        "on_off": {
                            "description": "Set the boost function on or off.",
                            "name": "Mode"
                        },
                        "time_period": {
                            "description": "Set the time period for the boost.",
                            "name": "Time period"
                        }
                    },
                    "name": "Boost hotwater"
                }
            }
        },
        "hlk_sw16": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "home_connect": {
            "config": {
                "abort": {
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            },
            "services": {
                "change_setting": {
                    "description": "Changes a setting.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        },
                        "key": {
                            "description": "Key of the setting.",
                            "name": "Key"
                        },
                        "value": {
                            "description": "Value of the setting.",
                            "name": "Value"
                        }
                    },
                    "name": "Change setting"
                },
                "pause_program": {
                    "description": "Pauses the current running program.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        }
                    },
                    "name": "Pause program"
                },
                "resume_program": {
                    "description": "Resumes a paused program.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        }
                    },
                    "name": "Resume program"
                },
                "select_program": {
                    "description": "Selects a program without starting it.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        },
                        "key": {
                            "description": "Key of the option.",
                            "name": "Option key"
                        },
                        "program": {
                            "description": "Program to select.",
                            "name": "Program"
                        },
                        "unit": {
                            "description": "Unit for the option.",
                            "name": "Option unit"
                        },
                        "value": {
                            "description": "Value of the option.",
                            "name": "Option value"
                        }
                    },
                    "name": "Select program"
                },
                "set_option_active": {
                    "description": "Sets an option for the active program.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        },
                        "key": {
                            "description": "Key of the option.",
                            "name": "Key"
                        },
                        "value": {
                            "description": "Value of the option.",
                            "name": "Value"
                        }
                    },
                    "name": "Set active program option"
                },
                "set_option_selected": {
                    "description": "Sets an option for the selected program.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        },
                        "key": {
                            "description": "Key of the option.",
                            "name": "Key"
                        },
                        "value": {
                            "description": "Value of the option.",
                            "name": "Value"
                        }
                    },
                    "name": "Set selected program option"
                },
                "start_program": {
                    "description": "Selects a program and starts it.",
                    "fields": {
                        "device_id": {
                            "description": "Id of the device.",
                            "name": "Device ID"
                        },
                        "key": {
                            "description": "Key of the option.",
                            "name": "Option key"
                        },
                        "program": {
                            "description": "Program to select.",
                            "name": "Program"
                        },
                        "unit": {
                            "description": "Unit for the option.",
                            "name": "Option unit"
                        },
                        "value": {
                            "description": "Value of the option.",
                            "name": "Option value"
                        }
                    },
                    "name": "Start program"
                }
            }
        },
        "home_plus_control": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            },
            "issues": {
                "move_to_netamo": {
                    "description": "Home Assistant has been informed that the platform the Legrand Home+ Control integration is using, will be shutting down upcoming December.\n\nOnce that happens, it means this integration is no longer functional. We advise you to remove this integration and switch to the [Netatmo]({url}) integration, which provides a replacement for controlling your Legrand Home+ Control devices.",
                    "title": "Legrand Home+ Control deprecation"
                },
                "move_to_netatmo": {
                    "description": "Home Assistant has been informed that the platform the Legrand Home+ Control integration is using, will be shutting down upcoming December.\n\nOnce that happens, it means this integration is no longer functional. We advise you to remove this integration and switch to the [Netatmo]({url}) integration, which provides a replacement for controlling your Legrand Home+ Control devices.",
                    "title": "Legrand Home+ Control deprecation"
                }
            }
        },
        "homeassistant": {
            "issues": {
                "config_entry_only": {
                    "description": "The {domain} integration does not support configuration via YAML file. You may not notice any obvious issues with the integration, but any configuration settings defined in YAML are not actually applied.\n\nTo resolve this:\n\n1. If you've not already done so, [set up the integration]({add_integration}).\n\n2. Remove `{domain}:` from your YAML configuration file.\n\n3. Restart Home Assistant.",
                    "title": "The {domain} integration does not support YAML configuration"
                },
                "country_not_configured": {
                    "description": "No country has been configured, please update the configuration by clicking on the \"learn more\" button below.",
                    "title": "The country has not been configured"
                },
                "deprecated_yaml": {
                    "description": "Configuring {integration_title} using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the `{domain}` configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The {integration_title} YAML configuration is being removed"
                },
                "historic_currency": {
                    "description": "The currency {currency} is no longer in use, please reconfigure the currency configuration.",
                    "title": "The configured currency is no longer in use"
                },
                "integration_key_no_support": {
                    "description": "The {domain} integration does not support configuration via YAML file. You may not notice any obvious issues with the integration, but any configuration settings defined in YAML are not actually applied.\n\nTo resolve this:\n\n1. If you've not already done so, [set up the integration]({add_integration}).\n\n2. Remove `{domain}:` from your YAML configuration file.\n\n3. Restart Home Assistant.",
                    "title": "The {domain} integration does not support YAML configuration"
                },
                "no_platform_setup": {
                    "description": "It's not possible to configure {platform} {domain} by adding `{platform_key}` to the {domain} configuration. Please check the documentation for more information on how to set up this integration.\n\nTo resolve this:\n1. Remove `{platform_key}` occurences from the `{domain}:` configuration in your YAML configuration file.\n2. Restart Home Assistant.\n\nExample that should be removed:\n{yaml_example}\n",
                    "title": "Unused YAML configuration for the {platform} integration"
                },
                "platform_only": {
                    "description": "The {domain} integration does not support configuration under its own key, it must be configured under its supported platforms.\n\nTo resolve this:\n\n1. Remove `{domain}:` from your YAML configuration file.\n\n2. Restart Home Assistant.",
                    "title": "The {domain} integration does not support YAML configuration under its own key"
                },
                "python_version": {
                    "description": "Support for running Home Assistant in the current used Python version {current_python_version} is deprecated and will be removed in Home Assistant {breaks_in_ha_version}. Please upgrade Python to {required_python_version} to prevent your Home Assistant instance from breaking.",
                    "title": "Support for Python {current_python_version} is being removed"
                },
                "storage_corruption": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The `{storage_key}` storage could not be parsed and has been renamed to `{corrupt_path}` to allow Home Assistant to continue.\n\nA default `{storage_key}` may have been created automatically.\n\nIf you made manual edits to the storage file, fix any syntax errors in `{corrupt_path}`, restore the file to the original path `{original_path}`, and restart Home Assistant. Otherwise, restore the system from a backup.\n\nClick SUBMIT below to confirm you have repaired the file or restored from a backup.\n\nThe exact error was: {error}",
                                "title": "Storage corruption detected for `{storage_key}`"
                            }
                        }
                    },
                    "title": "Storage corruption detected for `{storage_key}`"
                }
            },
            "services": {
                "check_config": {
                    "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
                    "name": "Check configuration"
                },
                "reload_all": {
                    "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
                    "name": "Reload all"
                },
                "reload_config_entry": {
                    "description": "Reloads the specified config entry.",
                    "fields": {
                        "entry_id": {
                            "description": "The configuration entry ID of the entry to be reloaded.",
                            "name": "Config entry ID"
                        }
                    },
                    "name": "Reload config entry"
                },
                "reload_core_config": {
                    "description": "Reloads the core configuration from the YAML-configuration.",
                    "name": "Reload core configuration"
                },
                "reload_custom_templates": {
                    "description": "Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.",
                    "name": "Reload custom Jinja2 templates"
                },
                "restart": {
                    "description": "Restarts Home Assistant.",
                    "name": "Restart"
                },
                "save_persistent_states": {
                    "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
                    "name": "Save persistent states"
                },
                "set_location": {
                    "description": "Updates the Home Assistant location.",
                    "fields": {
                        "elevation": {
                            "description": "Elevation of your location.",
                            "name": "Elevation"
                        },
                        "latitude": {
                            "description": "Latitude of your location.",
                            "name": "Latitude"
                        },
                        "longitude": {
                            "description": "Longitude of your location.",
                            "name": "Longitude"
                        }
                    },
                    "name": "Set location"
                },
                "stop": {
                    "description": "Stops Home Assistant.",
                    "name": "Stop"
                },
                "toggle": {
                    "description": "Generic service to toggle devices on\/off under any domain.",
                    "name": "Generic toggle"
                },
                "turn_off": {
                    "description": "Generic service to turn devices off under any domain.",
                    "name": "Generic turn off"
                },
                "turn_on": {
                    "description": "Generic service to turn devices on under any domain.",
                    "name": "Generic turn on"
                },
                "update_entity": {
                    "description": "Forces one or more entities to update its data.",
                    "name": "Update entity"
                }
            },
            "system_health": {
                "info": {
                    "arch": "CPU Architecture",
                    "config_dir": "Configuration Directory",
                    "dev": "Development",
                    "docker": "Docker",
                    "hassio": "Supervisor",
                    "installation_type": "Installation Type",
                    "os_name": "Operating System Family",
                    "os_version": "Operating System Version",
                    "python_version": "Python Version",
                    "timezone": "Timezone",
                    "user": "User",
                    "version": "Version",
                    "virtualenv": "Virtual Environment"
                }
            }
        },
        "homeassistant_alerts": {
            "issues": {
                "alert": {
                    "description": "{description}",
                    "title": "{title}"
                }
            }
        },
        "homeassistant_green": {
            "options": {
                "abort": {
                    "not_hassio": "The hardware options can only be configured on HassOS installations.",
                    "read_hw_settings_error": "Failed to read hardware settings",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "write_hw_settings_error": "Failed to write hardware settings"
                },
                "step": {
                    "hardware_settings": {
                        "data": {
                            "activity_led": "Green: activity LED",
                            "power_led": "White: power LED",
                            "system_health_led": "Yellow: system health LED"
                        },
                        "title": "Configure hardware settings"
                    },
                    "reboot_menu": {
                        "description": "The settings have changed, but the new settings will not take effect until the system is rebooted",
                        "menu_options": {
                            "reboot_later": "Reboot manually later",
                            "reboot_now": "Reboot now"
                        },
                        "title": "Reboot required"
                    }
                }
            }
        },
        "homeassistant_hardware": {
            "silabs_multiprotocol_hardware": {
                "options": {
                    "abort": {
                        "addon_already_running": "Failed to start the {addon_name} add-on because it is already running.",
                        "addon_info_failed": "Failed to get {addon_name} add-on info.",
                        "addon_install_failed": "Failed to install the {addon_name} add-on.",
                        "addon_set_config_failed": "Failed to set {addon_name} configuration.",
                        "addon_start_failed": "Failed to start the {addon_name} add-on.",
                        "not_hassio": "The hardware options can only be configured on HassOS installations.",
                        "zha_migration_failed": "The ZHA migration did not succeed."
                    },
                    "error": {
                        "unknown": "Unexpected error"
                    },
                    "progress": {
                        "install_addon": "Please wait while the {addon_name} add-on installation finishes. This can take several minutes.",
                        "start_addon": "Please wait while the {addon_name} add-on start completes. This may take some seconds."
                    },
                    "step": {
                        "addon_installed_other_device": {
                            "title": "Multiprotocol support is already enabled for another device"
                        },
                        "addon_menu": {
                            "menu_options": {
                                "reconfigure_addon": "Reconfigure IEEE 802.15.4 radio multiprotocol support",
                                "uninstall_addon": "Remove IEEE 802.15.4 radio multiprotocol support"
                            }
                        },
                        "addon_not_installed": {
                            "data": {
                                "enable_multi_pan": "Enable multiprotocol support"
                            },
                            "description": "When multiprotocol support is enabled, the {hardware_name}'s IEEE 802.15.4 radio can be used for both Zigbee and Thread (used by Matter) at the same time. If the radio is already used by the ZHA Zigbee integration, ZHA will be reconfigured to use the multiprotocol firmware.\n\nNote: This is an experimental feature.",
                            "title": "Enable multiprotocol support on the IEEE 802.15.4 radio"
                        },
                        "change_channel": {
                            "data": {
                                "channel": "Channel"
                            },
                            "description": "Start a channel change for your Zigbee and Thread networks.\n\nNote: this is an advanced operation and can leave your Thread and Zigbee networks inoperable if the new channel is congested. Depending on existing network conditions, many of your devices may not migrate to the new channel and will require re-joining before they start working again. Use with caution.\n\nOnce you have selected **Submit**, the channel change starts quietly in the background and will finish after a few minutes.",
                            "title": "Reconfigure IEEE 802.15.4 radio multiprotocol support"
                        },
                        "configure_flasher_addon": {
                            "title": "The Silicon Labs Flasher add-on installation has started"
                        },
                        "install_addon": {
                            "title": "The Silicon Labs Multiprotocol add-on installation has started"
                        },
                        "install_flasher_addon": {
                            "title": "The Silicon Labs Flasher add-on installation has started"
                        },
                        "notify_channel_change": {
                            "description": "A Zigbee and Thread channel change has been initiated and will finish in {delay_minutes} minutes.",
                            "title": "Channel change initiated"
                        },
                        "notify_unknown_multipan_user": {
                            "description": "Home Assistant can automatically change the channels for otbr and zha. If you have configured another integration to use the radio, for example Zigbee2MQTT, you will have to reconfigure the channel in that integration after completing this guide.",
                            "title": "Manual configuration may be needed"
                        },
                        "reconfigure_addon": {
                            "data": {
                                "channel": "Channel"
                            },
                            "title": "Reconfigure IEEE 802.15.4 radio multiprotocol support"
                        },
                        "show_revert_guide": {
                            "description": "If you want to change to Zigbee only firmware, please complete the following manual steps:\n\n  * Remove the Silicon Labs Multiprotocol addon\n\n  * Flash the Zigbee only firmware, follow the guide at https:\/\/github.com\/NabuCasa\/silabs-firmware\/wiki\/Flash-Silicon-Labs-radio-firmware-manually.\n\n  * Reconfigure ZHA to migrate settings to the reflashed radio",
                            "title": "Multiprotocol support is enabled for this device"
                        },
                        "start_addon": {
                            "title": "The Silicon Labs Multiprotocol add-on is starting."
                        },
                        "start_flasher_addon": {
                            "description": "Zigbee firmware is now being installed. This will take a few minutes.",
                            "title": "Installing firmware"
                        },
                        "uninstall_addon": {
                            "data": {
                                "disable_multi_pan": "Disable multiprotocol support"
                            },
                            "description": "Disabling multiprotocol support will revert your {hardware_name}'s radio back to Zigbee-only firmware and will disable Thread support provided by the {hardware_name}. Your Thread devices will continue working only if you have another Thread border router nearby.\n\nIt will take a few minutes to install the Zigbee firmware and restoring a backup.",
                            "title": "Remove IEEE 802.15.4 radio multiprotocol support"
                        }
                    }
                }
            }
        },
        "homeassistant_sky_connect": {
            "options": {
                "abort": {
                    "addon_already_running": "Failed to start the {addon_name} add-on because it is already running.",
                    "addon_info_failed": "Failed to get {addon_name} add-on info.",
                    "addon_install_failed": "Failed to install the {addon_name} add-on.",
                    "addon_set_config_failed": "Failed to set {addon_name} configuration.",
                    "addon_start_failed": "Failed to start the {addon_name} add-on.",
                    "not_hassio": "The hardware options can only be configured on HassOS installations.",
                    "zha_migration_failed": "The ZHA migration did not succeed."
                },
                "error": {
                    "unknown": "Unexpected error"
                },
                "progress": {
                    "install_addon": "Please wait while the {addon_name} add-on installation finishes. This can take several minutes.",
                    "start_addon": "Please wait while the {addon_name} add-on start completes. This may take some seconds."
                },
                "step": {
                    "addon_installed_other_device": {
                        "title": "Multiprotocol support is already enabled for another device"
                    },
                    "addon_menu": {
                        "menu_options": {
                            "reconfigure_addon": "Reconfigure IEEE 802.15.4 radio multiprotocol support",
                            "uninstall_addon": "Remove IEEE 802.15.4 radio multiprotocol support"
                        }
                    },
                    "addon_not_installed": {
                        "data": {
                            "enable_multi_pan": "Enable multiprotocol support"
                        },
                        "description": "When multiprotocol support is enabled, the {hardware_name}'s IEEE 802.15.4 radio can be used for both Zigbee and Thread (used by Matter) at the same time. If the radio is already used by the ZHA Zigbee integration, ZHA will be reconfigured to use the multiprotocol firmware.\n\nNote: This is an experimental feature.",
                        "title": "Enable multiprotocol support on the IEEE 802.15.4 radio"
                    },
                    "change_channel": {
                        "data": {
                            "channel": "Channel"
                        },
                        "description": "Start a channel change for your Zigbee and Thread networks.\n\nNote: this is an advanced operation and can leave your Thread and Zigbee networks inoperable if the new channel is congested. Depending on existing network conditions, many of your devices may not migrate to the new channel and will require re-joining before they start working again. Use with caution.\n\nOnce you have selected **Submit**, the channel change starts quietly in the background and will finish after a few minutes.",
                        "title": "Reconfigure IEEE 802.15.4 radio multiprotocol support"
                    },
                    "configure_flasher_addon": {
                        "title": "The Silicon Labs Flasher add-on installation has started"
                    },
                    "install_addon": {
                        "title": "The Silicon Labs Multiprotocol add-on installation has started"
                    },
                    "install_flasher_addon": {
                        "title": "The Silicon Labs Flasher add-on installation has started"
                    },
                    "notify_channel_change": {
                        "description": "A Zigbee and Thread channel change has been initiated and will finish in {delay_minutes} minutes.",
                        "title": "Channel change initiated"
                    },
                    "notify_unknown_multipan_user": {
                        "description": "Home Assistant can automatically change the channels for otbr and zha. If you have configured another integration to use the radio, for example Zigbee2MQTT, you will have to reconfigure the channel in that integration after completing this guide.",
                        "title": "Manual configuration may be needed"
                    },
                    "reconfigure_addon": {
                        "data": {
                            "channel": "Channel"
                        },
                        "title": "Reconfigure IEEE 802.15.4 radio multiprotocol support"
                    },
                    "show_revert_guide": {
                        "description": "If you want to change to Zigbee only firmware, please complete the following manual steps:\n\n  * Remove the Silicon Labs Multiprotocol addon\n\n  * Flash the Zigbee only firmware, follow the guide at https:\/\/github.com\/NabuCasa\/silabs-firmware\/wiki\/Flash-Silicon-Labs-radio-firmware-manually.\n\n  * Reconfigure ZHA to migrate settings to the reflashed radio",
                        "title": "Multiprotocol support is enabled for this device"
                    },
                    "start_addon": {
                        "title": "The Silicon Labs Multiprotocol add-on is starting."
                    },
                    "start_flasher_addon": {
                        "description": "Zigbee firmware is now being installed. This will take a few minutes.",
                        "title": "Installing firmware"
                    },
                    "uninstall_addon": {
                        "data": {
                            "disable_multi_pan": "Disable multiprotocol support"
                        },
                        "description": "Disabling multiprotocol support will revert your {hardware_name}'s radio back to Zigbee-only firmware and will disable Thread support provided by the {hardware_name}. Your Thread devices will continue working only if you have another Thread border router nearby.\n\nIt will take a few minutes to install the Zigbee firmware and restoring a backup.",
                        "title": "Remove IEEE 802.15.4 radio multiprotocol support"
                    }
                }
            }
        },
        "homeassistant_yellow": {
            "options": {
                "abort": {
                    "addon_already_running": "Failed to start the {addon_name} add-on because it is already running.",
                    "addon_info_failed": "Failed to get {addon_name} add-on info.",
                    "addon_install_failed": "Failed to install the {addon_name} add-on.",
                    "addon_set_config_failed": "Failed to set {addon_name} configuration.",
                    "addon_start_failed": "Failed to start the {addon_name} add-on.",
                    "not_hassio": "The hardware options can only be configured on HassOS installations.",
                    "read_hw_settings_error": "Failed to read hardware settings",
                    "write_hw_settings_error": "Failed to write hardware settings",
                    "zha_migration_failed": "The ZHA migration did not succeed."
                },
                "error": {
                    "unknown": "Unexpected error"
                },
                "progress": {
                    "install_addon": "Please wait while the {addon_name} add-on installation finishes. This can take several minutes.",
                    "start_addon": "Please wait while the {addon_name} add-on start completes. This may take some seconds."
                },
                "step": {
                    "addon_installed_other_device": {
                        "title": "Multiprotocol support is already enabled for another device"
                    },
                    "addon_menu": {
                        "menu_options": {
                            "reconfigure_addon": "Reconfigure IEEE 802.15.4 radio multiprotocol support",
                            "uninstall_addon": "Remove IEEE 802.15.4 radio multiprotocol support"
                        }
                    },
                    "addon_not_installed": {
                        "data": {
                            "enable_multi_pan": "Enable multiprotocol support"
                        },
                        "description": "When multiprotocol support is enabled, the {hardware_name}'s IEEE 802.15.4 radio can be used for both Zigbee and Thread (used by Matter) at the same time. If the radio is already used by the ZHA Zigbee integration, ZHA will be reconfigured to use the multiprotocol firmware.\n\nNote: This is an experimental feature.",
                        "title": "Enable multiprotocol support on the IEEE 802.15.4 radio"
                    },
                    "change_channel": {
                        "data": {
                            "channel": "Channel"
                        },
                        "description": "Start a channel change for your Zigbee and Thread networks.\n\nNote: this is an advanced operation and can leave your Thread and Zigbee networks inoperable if the new channel is congested. Depending on existing network conditions, many of your devices may not migrate to the new channel and will require re-joining before they start working again. Use with caution.\n\nOnce you have selected **Submit**, the channel change starts quietly in the background and will finish after a few minutes.",
                        "title": "Reconfigure IEEE 802.15.4 radio multiprotocol support"
                    },
                    "configure_flasher_addon": {
                        "title": "The Silicon Labs Flasher add-on installation has started"
                    },
                    "hardware_settings": {
                        "data": {
                            "disk_led": "Green: activity LED",
                            "heartbeat_led": "Yellow: system health LED",
                            "power_led": "Red: power LED"
                        },
                        "title": "Configure hardware settings"
                    },
                    "install_addon": {
                        "title": "The Silicon Labs Multiprotocol add-on installation has started"
                    },
                    "install_flasher_addon": {
                        "title": "The Silicon Labs Flasher add-on installation has started"
                    },
                    "main_menu": {
                        "menu_options": {
                            "hardware_settings": "Configure hardware settings",
                            "multipan_settings": "Configure IEEE 802.15.4 radio multiprotocol support"
                        }
                    },
                    "notify_channel_change": {
                        "description": "A Zigbee and Thread channel change has been initiated and will finish in {delay_minutes} minutes.",
                        "title": "Channel change initiated"
                    },
                    "notify_unknown_multipan_user": {
                        "description": "Home Assistant can automatically change the channels for otbr and zha. If you have configured another integration to use the radio, for example Zigbee2MQTT, you will have to reconfigure the channel in that integration after completing this guide.",
                        "title": "Manual configuration may be needed"
                    },
                    "reboot_menu": {
                        "description": "The settings have changed, but the new settings will not take effect until the system is rebooted",
                        "menu_options": {
                            "reboot_later": "Reboot manually later",
                            "reboot_now": "Reboot now"
                        },
                        "title": "Reboot required"
                    },
                    "reconfigure_addon": {
                        "data": {
                            "channel": "Channel"
                        },
                        "title": "Reconfigure IEEE 802.15.4 radio multiprotocol support"
                    },
                    "show_revert_guide": {
                        "description": "If you want to change to Zigbee only firmware, please complete the following manual steps:\n\n  * Remove the Silicon Labs Multiprotocol addon\n\n  * Flash the Zigbee only firmware, follow the guide at https:\/\/github.com\/NabuCasa\/silabs-firmware\/wiki\/Flash-Silicon-Labs-radio-firmware-manually.\n\n  * Reconfigure ZHA to migrate settings to the reflashed radio",
                        "title": "Multiprotocol support is enabled for this device"
                    },
                    "start_addon": {
                        "title": "The Silicon Labs Multiprotocol add-on is starting."
                    },
                    "start_flasher_addon": {
                        "description": "Zigbee firmware is now being installed. This will take a few minutes.",
                        "title": "Installing firmware"
                    },
                    "uninstall_addon": {
                        "data": {
                            "disable_multi_pan": "Disable multiprotocol support"
                        },
                        "description": "Disabling multiprotocol support will revert your {hardware_name}'s radio back to Zigbee-only firmware and will disable Thread support provided by the {hardware_name}. Your Thread devices will continue working only if you have another Thread border router nearby.\n\nIt will take a few minutes to install the Zigbee firmware and restoring a backup.",
                        "title": "Remove IEEE 802.15.4 radio multiprotocol support"
                    }
                }
            }
        },
        "homekit": {
            "config": {
                "abort": {
                    "port_name_in_use": "An accessory or bridge with the same name or port is already configured."
                },
                "step": {
                    "pairing": {
                        "description": "To complete pairing follow the instructions in “Notifications” under “HomeKit Pairing”.",
                        "title": "Pair HomeKit"
                    },
                    "user": {
                        "data": {
                            "include_domains": "Domains to include"
                        },
                        "description": "Choose the domains to be included. All supported entities in the domain will be included except for categorized entities. A separate HomeKit instance in accessory mode will be created for each tv\/receiver media player, activity based remote, lock, and camera.",
                        "title": "Select domains to be included"
                    }
                }
            },
            "options": {
                "step": {
                    "accessory": {
                        "data": {
                            "entities": "Entity"
                        },
                        "title": "Select the entity for the accessory"
                    },
                    "advanced": {
                        "data": {
                            "devices": "Devices (Triggers)"
                        },
                        "description": "Programmable switches are created for each selected device. When a device trigger fires, HomeKit can be configured to run an automation or scene.",
                        "title": "Advanced Configuration"
                    },
                    "cameras": {
                        "data": {
                            "camera_audio": "Cameras that support audio",
                            "camera_copy": "Cameras that support native H.264 streams"
                        },
                        "description": "Check all cameras that support native H.264 streams. If the camera does not output a H.264 stream, the system will transcode the video to H.264 for HomeKit. Transcoding requires a performant CPU and is unlikely to work on single board computers.",
                        "title": "Camera Configuration"
                    },
                    "exclude": {
                        "data": {
                            "entities": "Entities"
                        },
                        "description": "All “{domains}” entities will be included except for the excluded entities and categorized entities.",
                        "title": "Select the entities to be excluded"
                    },
                    "include": {
                        "data": {
                            "entities": "Entities"
                        },
                        "description": "Select entities from each domain in “{domains}”. The include will cover the entire domain if you do not select any entities for a given domain.",
                        "title": "Select the entities to be included"
                    },
                    "init": {
                        "data": {
                            "domains": "Domains to include",
                            "include_exclude_mode": "Inclusion Mode",
                            "mode": "HomeKit Mode"
                        },
                        "description": "HomeKit can be configured expose a bridge or a single accessory. In accessory mode, only a single entity can be used. Accessory mode is required for media players with the TV or RECEIVER device class to function properly. Entities in the “Domains to include” will be included to HomeKit. You will be able to select which entities to include or exclude from this list on the next screen.",
                        "title": "Select mode and domains."
                    },
                    "yaml": {
                        "description": "This entry is controlled via YAML",
                        "title": "Adjust HomeKit Options"
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads homekit and re-process YAML-configuration.",
                    "name": "Reload"
                },
                "reset_accessory": {
                    "description": "Resets a HomeKit accessory.",
                    "name": "Reset accessory"
                },
                "unpair": {
                    "description": "Forcefully removes all pairings from an accessory to allow re-pairing. Use this service if the accessory is no longer responsive, and you want to avoid deleting and re-adding the entry. Room locations, and accessory preferences will be lost.",
                    "name": "Unpair an accessory or bridge"
                }
            }
        },
        "homekit_controller": {
            "config": {
                "abort": {
                    "accessory_not_found_error": "Cannot add pairing as device can no longer be found.",
                    "already_configured": "Accessory is already configured with this controller.",
                    "already_in_progress": "Configuration flow is already in progress",
                    "already_paired": "This accessory is already paired to another device. Please reset the accessory and try again.",
                    "ignored_model": "HomeKit support for this model is blocked as a more feature complete native integration is available.",
                    "invalid_config_entry": "This device is showing as ready to pair but there is already a conflicting configuration entry for it in Home Assistant that must first be removed.",
                    "invalid_properties": "Invalid properties announced by device.",
                    "no_devices": "No unpaired devices could be found"
                },
                "error": {
                    "authentication_error": "Incorrect HomeKit code. Please check it and try again.",
                    "insecure_setup_code": "The requested setup code is insecure because of its trivial nature. This accessory fails to meet basic security requirements.",
                    "max_peers_error": "Device refused to add pairing as it has no free pairing storage.",
                    "pairing_failed": "An unhandled error occurred while attempting to pair with this device. This may be a temporary failure or your device may not be supported currently: {error}",
                    "unable_to_pair": "Unable to pair, please try again.",
                    "unknown_error": "Device reported an unknown error. Pairing failed."
                },
                "flow_title": "{name} ({category})",
                "step": {
                    "busy_error": {
                        "description": "Abort pairing on all controllers, or try restarting the device, then continue to resume pairing.",
                        "title": "The device is already pairing with another controller"
                    },
                    "max_tries_error": {
                        "description": "The device has received more than 100 unsuccessful authentication attempts. Try restarting the device, then continue to resume pairing.",
                        "title": "Maximum authentication attempts exceeded"
                    },
                    "pair": {
                        "data": {
                            "allow_insecure_setup_codes": "Allow pairing with insecure setup codes.",
                            "pairing_code": "Pairing Code"
                        },
                        "description": "HomeKit Device communicates with {name} ({category}) over the local area network using a secure encrypted connection without a separate HomeKit Controller or iCloud. Enter your HomeKit pairing code (in the format XXX-XX-XXX) to use this accessory. This code is usually found on the device itself or in the packaging.",
                        "title": "Pair with a device via HomeKit Accessory Protocol"
                    },
                    "protocol_error": {
                        "description": "The device may not be in pairing mode and may require a physical or virtual button press. Ensure the device is in pairing mode or try restarting the device, then continue to resume pairing.",
                        "title": "Error communicating with the accessory"
                    },
                    "user": {
                        "data": {
                            "device": "Device"
                        },
                        "description": "HomeKit Device communicates over the local area network using a secure encrypted connection without a separate HomeKit Controller or iCloud. Select the device you want to pair with:",
                        "title": "Device selection"
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "button1": "Button 1",
                    "button10": "Button 10",
                    "button2": "Button 2",
                    "button3": "Button 3",
                    "button4": "Button 4",
                    "button5": "Button 5",
                    "button6": "Button 6",
                    "button7": "Button 7",
                    "button8": "Button 8",
                    "button9": "Button 9",
                    "doorbell": "Doorbell"
                },
                "trigger_type": {
                    "double_press": "\"{subtype}\" pressed twice",
                    "long_press": "\"{subtype}\" pressed and held",
                    "single_press": "\"{subtype}\" pressed"
                }
            },
            "entity": {
                "event": {
                    "button": {
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "double_press": "Double press",
                                    "long_press": "Long press",
                                    "single_press": "Single press"
                                }
                            }
                        }
                    },
                    "doorbell": {
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "double_press": "Double press",
                                    "long_press": "Long press",
                                    "single_press": "Single press"
                                }
                            }
                        }
                    }
                },
                "select": {
                    "ecobee_mode": {
                        "state": {
                            "away": "Away",
                            "home": "Home",
                            "sleep": "Sleep"
                        }
                    },
                    "temperature_display_units": {
                        "state": {
                            "celsius": "Celsius",
                            "fahrenheit": "Fahrenheit"
                        }
                    }
                },
                "sensor": {
                    "thread_node_capabilities": {
                        "state": {
                            "border_router_capable": "Border Router Capable",
                            "full": "Full End Device",
                            "minimal": "Minimal End Device",
                            "none": "None",
                            "router_eligible": "Router Eligible End Device",
                            "sleepy": "Sleepy End Device"
                        }
                    },
                    "thread_status": {
                        "state": {
                            "border_router": "Border Router",
                            "child": "Child",
                            "detached": "Detached",
                            "disabled": "Disabled",
                            "joining": "Joining",
                            "leader": "Leader",
                            "router": "Router"
                        }
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "homekit_controller__ecobee_mode": {
                            "away": "Away",
                            "home": "Home",
                            "sleep": "Sleep"
                        }
                    }
                },
                "sensor": {
                    "state": {
                        "homekit_controller__thread_node_capabilities": {
                            "border_router_capable": "Border Router Capable",
                            "full": "Full End Device",
                            "minimal": "Minimal End Device",
                            "none": "None",
                            "router_eligible": "Router Eligible End Device",
                            "sleepy": "Sleepy End Device"
                        },
                        "homekit_controller__thread_status": {
                            "border_router": "Border Router",
                            "child": "Child",
                            "detached": "Detached",
                            "disabled": "Disabled",
                            "joining": "Joining",
                            "leader": "Leader",
                            "router": "Router"
                        }
                    }
                }
            },
            "title": "HomeKit Device"
        },
        "homematic": {
            "services": {
                "put_paramset": {
                    "description": "Calls to putParamset in the RPC XML interface.",
                    "fields": {
                        "address": {
                            "description": "Address of Homematic device.",
                            "name": "Address"
                        },
                        "interface": {
                            "description": "The interfaces name from the config.",
                            "name": "Interface"
                        },
                        "paramset": {
                            "description": "A paramset dictionary.",
                            "name": "Paramset"
                        },
                        "paramset_key": {
                            "description": "The paramset_key argument to putParamset.",
                            "name": "Paramset key"
                        },
                        "rx_mode": {
                            "description": "The receive mode used.",
                            "name": "RX mode"
                        }
                    },
                    "name": "Put paramset"
                },
                "reconnect": {
                    "description": "Reconnects to all Homematic Hubs.",
                    "name": "Reconnect"
                },
                "set_device_value": {
                    "description": "Sets a device property on RPC XML interface.",
                    "fields": {
                        "address": {
                            "description": "Address of homematic device or BidCoS-RF for virtual remote.",
                            "name": "Address"
                        },
                        "channel": {
                            "description": "Channel for calling a keypress.",
                            "name": "Channel"
                        },
                        "interface": {
                            "description": "Set an interface value.",
                            "name": "Interface"
                        },
                        "param": {
                            "description": "Event to send i.e. PRESS_LONG, PRESS_SHORT.",
                            "name": "Param"
                        },
                        "value": {
                            "description": "New value.",
                            "name": "Value"
                        },
                        "value_type": {
                            "description": "Type for new value.",
                            "name": "Value type"
                        }
                    },
                    "name": "Set device value"
                },
                "set_install_mode": {
                    "description": "Set a RPC XML interface into installation mode.",
                    "fields": {
                        "address": {
                            "description": "Address of homematic device or BidCoS-RF to learn.",
                            "name": "Address"
                        },
                        "interface": {
                            "description": "Select the given interface into install mode.",
                            "name": "Interface"
                        },
                        "mode": {
                            "description": "1= Normal mode \/ 2= Remove exists old links.",
                            "name": "Mode"
                        },
                        "time": {
                            "description": "Time to run in install mode.",
                            "name": "Time"
                        }
                    },
                    "name": "Set install mode"
                },
                "set_variable_value": {
                    "description": "Sets the name of a node.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of homematic central to set value.",
                            "name": "Entity"
                        },
                        "name": {
                            "description": "Name of the variable to set.",
                            "name": "Name"
                        },
                        "value": {
                            "description": "New value.",
                            "name": "Value"
                        }
                    },
                    "name": "Set variable value"
                },
                "virtualkey": {
                    "description": "Presses a virtual key from CCU\/Homegear or simulate keypress.",
                    "fields": {
                        "address": {
                            "description": "Address of homematic device or BidCoS-RF for virtual remote.",
                            "name": "Address"
                        },
                        "channel": {
                            "description": "Channel for calling a keypress.",
                            "name": "Channel"
                        },
                        "interface": {
                            "description": "Set an interface value.",
                            "name": "Interface"
                        },
                        "param": {
                            "description": "Event to send i.e. PRESS_LONG, PRESS_SHORT.",
                            "name": "Param"
                        }
                    },
                    "name": "Virtual key"
                }
            }
        },
        "homematicip_cloud": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "connection_aborted": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "invalid_sgtin_or_pin": "Invalid SGTIN or PIN code, please try again.",
                    "press_the_button": "Please press the blue button.",
                    "register_failed": "Failed to register, please try again.",
                    "timeout_button": "Blue button press timeout, please try again."
                },
                "step": {
                    "init": {
                        "data": {
                            "hapid": "Access point ID (SGTIN)",
                            "name": "Name (optional, used as name prefix for all devices)",
                            "pin": "PIN Code"
                        },
                        "title": "Pick HomematicIP Access point"
                    },
                    "link": {
                        "description": "Press the blue button on the access point and the submit button to register HomematicIP with Home Assistant.\n\n![Location of button on bridge](\/static\/images\/config_flows\/config_homematicip_cloud.png)",
                        "title": "Link Access point"
                    }
                }
            },
            "services": {
                "activate_eco_mode_with_duration": {
                    "description": "Activates eco mode with period.",
                    "fields": {
                        "accesspoint_id": {
                            "description": "The ID of the Homematic IP Access Point.",
                            "name": "Accesspoint ID"
                        },
                        "duration": {
                            "description": "The duration of eco mode in minutes.",
                            "name": "Duration"
                        }
                    },
                    "name": "Activate eco mode with duration"
                },
                "activate_eco_mode_with_period": {
                    "description": "Activates eco mode with period.",
                    "fields": {
                        "accesspoint_id": {
                            "description": "The ID of the Homematic IP Access Point.",
                            "name": "Accesspoint ID"
                        },
                        "endtime": {
                            "description": "The time when the eco mode should automatically be disabled.",
                            "name": "Endtime"
                        }
                    },
                    "name": "Activate eco more with period"
                },
                "activate_vacation": {
                    "description": "Activates the vacation mode until the given time.",
                    "fields": {
                        "accesspoint_id": {
                            "description": "The ID of the Homematic IP Access Point.",
                            "name": "Accesspoint ID"
                        },
                        "endtime": {
                            "description": "The time when the vacation mode should automatically be disabled.",
                            "name": "Endtime"
                        },
                        "temperature": {
                            "description": "The set temperature during the vacation mode.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Activate vacation"
                },
                "deactivate_eco_mode": {
                    "description": "Deactivates the eco mode immediately.",
                    "fields": {
                        "accesspoint_id": {
                            "description": "The ID of the Homematic IP Access Point.",
                            "name": "Accesspoint ID"
                        }
                    },
                    "name": "Deactivate eco mode"
                },
                "deactivate_vacation": {
                    "description": "Deactivates the vacation mode immediately.",
                    "fields": {
                        "accesspoint_id": {
                            "description": "The ID of the Homematic IP Access Point.",
                            "name": "Accesspoint ID"
                        }
                    },
                    "name": "Deactivate vacation"
                },
                "dump_hap_config": {
                    "description": "Dumps the configuration of the Homematic IP Access Point(s).",
                    "fields": {
                        "anonymize": {
                            "description": "Should the Configuration be anonymized?",
                            "name": "Anonymize"
                        },
                        "config_output_file_prefix": {
                            "description": "Name of the config file. The SGTIN of the AP will always be appended.",
                            "name": "Config output file prefix"
                        },
                        "config_output_path": {
                            "description": "(Default is 'Your home-assistant config directory') Path where to store the config.",
                            "name": "Config output path"
                        }
                    },
                    "name": "Dump hap config"
                },
                "reset_energy_counter": {
                    "description": "Resets the energy counter of a measuring entity.",
                    "fields": {
                        "entity_id": {
                            "description": "The ID of the measuring entity. Use 'all' keyword to reset all energy counters.",
                            "name": "Entity"
                        }
                    },
                    "name": "Reset energy counter"
                },
                "set_active_climate_profile": {
                    "description": "Sets the active climate profile index.",
                    "fields": {
                        "climate_profile_index": {
                            "description": "The index of the climate profile.",
                            "name": "Climate profile index"
                        },
                        "entity_id": {
                            "description": "The ID of the climate entity. Use 'all' keyword to switch the profile for all entities.",
                            "name": "Entity"
                        }
                    },
                    "name": "Set active climate profile"
                }
            }
        },
        "homewizard": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "device_not_supported": "This device is not supported",
                    "invalid_discovery_parameters": "Detected unsupported API version",
                    "reauth_successful": "Enabling API was successful",
                    "unknown_error": "Unexpected error"
                },
                "error": {
                    "api_not_enabled": "The API is not enabled. Enable API in the HomeWizard Energy App under settings",
                    "network_error": "Device unreachable, make sure that you have entered the correct IP address and that the device is available in your network"
                },
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {product_type} ({serial}) at {ip_address}?",
                        "title": "Confirm"
                    },
                    "reauth_confirm": {
                        "description": "The local API is disabled. Go to the HomeWizard Energy app and enable the API in the device settings."
                    },
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        },
                        "description": "Enter the IP address of your HomeWizard Energy device to integrate with Home Assistant.",
                        "title": "Configure device"
                    }
                }
            },
            "entity": {
                "number": {
                    "status_light_brightness": {
                        "name": "Status light brightness"
                    }
                },
                "sensor": {
                    "active_current_l1_a": {
                        "name": "Active current phase 1"
                    },
                    "active_current_l2_a": {
                        "name": "Active current phase 2"
                    },
                    "active_current_l3_a": {
                        "name": "Active current phase 3"
                    },
                    "active_frequency_hz": {
                        "name": "Active frequency"
                    },
                    "active_liter_lpm": {
                        "name": "Active water usage"
                    },
                    "active_power_average_w": {
                        "name": "Active average demand"
                    },
                    "active_power_l1_w": {
                        "name": "Active power phase 1"
                    },
                    "active_power_l2_w": {
                        "name": "Active power phase 2"
                    },
                    "active_power_l3_w": {
                        "name": "Active power phase 3"
                    },
                    "active_power_w": {
                        "name": "Active power"
                    },
                    "active_tariff": {
                        "name": "Active tariff"
                    },
                    "active_voltage_l1_v": {
                        "name": "Active voltage phase 1"
                    },
                    "active_voltage_l2_v": {
                        "name": "Active voltage phase 2"
                    },
                    "active_voltage_l3_v": {
                        "name": "Active voltage phase 3"
                    },
                    "any_power_fail_count": {
                        "name": "Power failures detected"
                    },
                    "dsmr_version": {
                        "name": "DSMR version"
                    },
                    "gas_unique_id": {
                        "name": "Gas meter identifier"
                    },
                    "long_power_fail_count": {
                        "name": "Long power failures detected"
                    },
                    "meter_model": {
                        "name": "Smart meter model"
                    },
                    "monthly_power_peak_w": {
                        "name": "Peak demand current month"
                    },
                    "total_gas_m3": {
                        "name": "Total gas"
                    },
                    "total_liter_m3": {
                        "name": "Total water usage"
                    },
                    "total_power_export_kwh": {
                        "name": "Total power export"
                    },
                    "total_power_export_t1_kwh": {
                        "name": "Total power export tariff 1"
                    },
                    "total_power_export_t2_kwh": {
                        "name": "Total power export tariff 2"
                    },
                    "total_power_export_t3_kwh": {
                        "name": "Total power export tariff 3"
                    },
                    "total_power_export_t4_kwh": {
                        "name": "Total power export tariff 4"
                    },
                    "total_power_import_kwh": {
                        "name": "Total power import"
                    },
                    "total_power_import_t1_kwh": {
                        "name": "Total power import tariff 1"
                    },
                    "total_power_import_t2_kwh": {
                        "name": "Total power import tariff 2"
                    },
                    "total_power_import_t3_kwh": {
                        "name": "Total power import tariff 3"
                    },
                    "total_power_import_t4_kwh": {
                        "name": "Total power import tariff 4"
                    },
                    "unique_meter_id": {
                        "name": "Smart meter identifier"
                    },
                    "voltage_sag_l1_count": {
                        "name": "Voltage sags detected phase 1"
                    },
                    "voltage_sag_l2_count": {
                        "name": "Voltage sags detected phase 2"
                    },
                    "voltage_sag_l3_count": {
                        "name": "Voltage sags detected phase 3"
                    },
                    "voltage_swell_l1_count": {
                        "name": "Voltage swells detected phase 1"
                    },
                    "voltage_swell_l2_count": {
                        "name": "Voltage swells detected phase 2"
                    },
                    "voltage_swell_l3_count": {
                        "name": "Voltage swells detected phase 3"
                    },
                    "wifi_ssid": {
                        "name": "Wi-Fi SSID"
                    },
                    "wifi_strength": {
                        "name": "Wi-Fi strength"
                    }
                },
                "switch": {
                    "cloud_connection": {
                        "name": "Cloud connection"
                    },
                    "switch_lock": {
                        "name": "Switch lock"
                    }
                }
            }
        },
        "honeywell": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The Honeywell integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter the credentials used to log into mytotalconnectcomfort.com."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "outdoor_humidity": {
                        "name": "Outdoor humidity"
                    },
                    "outdoor_temperature": {
                        "name": "Outdoor temperature"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "away_cool_temperature": "Away cool temperature",
                            "away_heat_temperature": "Away heat temperature"
                        },
                        "description": "Additional Honeywell config options. Temperatures are set in Fahrenheit."
                    }
                }
            }
        },
        "html5": {
            "services": {
                "dismiss": {
                    "description": "Dismisses a html5 notification.",
                    "fields": {
                        "data": {
                            "description": "Extended information of notification. Supports tag.",
                            "name": "Data"
                        },
                        "target": {
                            "description": "An array of targets.",
                            "name": "Target"
                        }
                    },
                    "name": "Dismiss"
                }
            }
        },
        "huawei_lte": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "reauth_successful": "Re-authentication was successful",
                    "unsupported_device": "Unsupported device"
                },
                "error": {
                    "connection_timeout": "Connection timeout",
                    "incorrect_password": "Incorrect password",
                    "incorrect_username": "Incorrect username",
                    "invalid_auth": "Invalid authentication",
                    "invalid_url": "Invalid URL",
                    "login_attempts_exceeded": "Maximum login attempts exceeded, please try again later",
                    "response_error": "Unknown error from device",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Enter device access credentials.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username"
                        },
                        "description": "Enter device access details.",
                        "title": "Configure Huawei LTE"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "24ghz_wifi_status": {
                        "name": "2.4GHz Wi-Fi status"
                    },
                    "5ghz_wifi_status": {
                        "name": "5GHz Wi-Fi status"
                    },
                    "mobile_connection": {
                        "name": "Mobile connection"
                    },
                    "sms_storage_full": {
                        "name": "SMS storage full"
                    },
                    "wifi_status": {
                        "name": "Wi-Fi status"
                    }
                },
                "sensor": {
                    "arfcn": {
                        "name": "ARFCN"
                    },
                    "band": {
                        "name": "Band"
                    },
                    "base_station_identity_code": {
                        "name": "Base station identity code"
                    },
                    "cell_id": {
                        "name": "Cell ID"
                    },
                    "cqi0": {
                        "name": "CQI 0"
                    },
                    "cqi1": {
                        "name": "CQI 1"
                    },
                    "current_connection_download": {
                        "name": "Current connection download"
                    },
                    "current_connection_duration": {
                        "name": "Current connection duration"
                    },
                    "current_connection_upload": {
                        "name": "Current connection upload"
                    },
                    "current_day_transfer": {
                        "name": "Current day transfer"
                    },
                    "current_download_rate": {
                        "name": "Current download rate"
                    },
                    "current_month_download": {
                        "name": "Current month download"
                    },
                    "current_month_upload": {
                        "name": "Current month upload"
                    },
                    "current_upload_rate": {
                        "name": "Current upload rate"
                    },
                    "downlink_bandwidth": {
                        "name": "Downlink bandwidth"
                    },
                    "downlink_frequency": {
                        "name": "Downlink frequency"
                    },
                    "downlink_mcs": {
                        "name": "Downlink MCS"
                    },
                    "earfcn": {
                        "name": "EARFCN"
                    },
                    "ecio": {
                        "name": "EC\/IO"
                    },
                    "enodeb_id": {
                        "name": "eNodeB ID"
                    },
                    "lac": {
                        "name": "LAC"
                    },
                    "lte_downlink_frequency": {
                        "name": "LTE downlink frequency"
                    },
                    "lte_uplink_frequency": {
                        "name": "LTE uplink frequency"
                    },
                    "operator_code": {
                        "name": "Operator code"
                    },
                    "operator_name": {
                        "name": "Operator name"
                    },
                    "operator_search_mode": {
                        "name": "Operator search mode"
                    },
                    "pci": {
                        "name": "PCI"
                    },
                    "plmn": {
                        "name": "PLMN"
                    },
                    "preferred_mode": {
                        "name": "Preferred mode"
                    },
                    "primary_dns_server": {
                        "name": "Primary DNS server"
                    },
                    "primary_ipv6_dns_server": {
                        "name": "Primary IPv6 DNS server"
                    },
                    "rac": {
                        "name": "RAC"
                    },
                    "rrc_status": {
                        "name": "RRC status"
                    },
                    "rscp": {
                        "name": "RSCP"
                    },
                    "rsrp": {
                        "name": "RSRP"
                    },
                    "rsrq": {
                        "name": "RSRQ"
                    },
                    "rssi": {
                        "name": "RSSI"
                    },
                    "secondary_dns_server": {
                        "name": "Secondary DNS server"
                    },
                    "secondary_ipv6_dns_server": {
                        "name": "Secondary IPv6 DNS server"
                    },
                    "sinr": {
                        "name": "SINR"
                    },
                    "sms_capacity_device": {
                        "name": "SMS capacity (device)"
                    },
                    "sms_capacity_sim": {
                        "name": "SMS capacity (SIM)"
                    },
                    "sms_deleted_device": {
                        "name": "SMS deleted (device)"
                    },
                    "sms_drafts_device": {
                        "name": "SMS drafts (device)"
                    },
                    "sms_drafts_sim": {
                        "name": "SMS drafts (SIM)"
                    },
                    "sms_inbox_device": {
                        "name": "SMS inbox (device)"
                    },
                    "sms_inbox_sim": {
                        "name": "SMS inbox (SIM)"
                    },
                    "sms_messages_sim": {
                        "name": "SMS messages (SIM)"
                    },
                    "sms_outbox_device": {
                        "name": "SMS outbox (device)"
                    },
                    "sms_outbox_sim": {
                        "name": "SMS outbox (SIM)"
                    },
                    "sms_unread": {
                        "name": "SMS unread"
                    },
                    "sms_unread_device": {
                        "name": "SMS unread (device)"
                    },
                    "sms_unread_sim": {
                        "name": "SMS unread (SIM)"
                    },
                    "tac": {
                        "name": "TAC"
                    },
                    "tdd": {
                        "name": "TDD"
                    },
                    "total_connected_duration": {
                        "name": "Total connected duration"
                    },
                    "total_download": {
                        "name": "Total download"
                    },
                    "total_upload": {
                        "name": "Total upload"
                    },
                    "transmission_mode": {
                        "name": "Transmission mode"
                    },
                    "transmit_power": {
                        "name": "Transmit power"
                    },
                    "uplink_bandwidth": {
                        "name": "Uplink bandwidth"
                    },
                    "uplink_frequency": {
                        "name": "Uplink frequency"
                    },
                    "uplink_mcs": {
                        "name": "Uplink MCS"
                    },
                    "uptime": {
                        "name": "Uptime"
                    },
                    "wan_ip_address": {
                        "name": "WAN IP address"
                    },
                    "wan_ipv6_address": {
                        "name": "WAN IPv6 address"
                    },
                    "wifi_clients_connected": {
                        "name": "Wi-Fi clients connected"
                    }
                },
                "switch": {
                    "mobile_data": {
                        "name": "Mobile data"
                    },
                    "wifi_guest_network": {
                        "name": "Wi-Fi guest network"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "name": "Notification service name (change requires restart)",
                            "recipient": "SMS notification recipients",
                            "track_wired_clients": "Track wired network clients",
                            "unauthenticated_mode": "Unauthenticated mode (change requires reload)"
                        }
                    }
                }
            },
            "services": {
                "clear_traffic_statistics": {
                    "description": "Clears traffic statistics.",
                    "fields": {
                        "url": {
                            "description": "URL of router to clear; optional when only one is configured.",
                            "name": "URL"
                        }
                    },
                    "name": "Clear traffic statistics"
                },
                "reboot": {
                    "description": "Reboots router.",
                    "fields": {
                        "url": {
                            "description": "URL of router to reboot; optional when only one is configured.",
                            "name": "URL"
                        }
                    },
                    "name": "Reboot"
                },
                "resume_integration": {
                    "description": "Resumes suspended integration.",
                    "fields": {
                        "url": {
                            "description": "URL of router to resume integration for; optional when only one is configured.",
                            "name": "URL"
                        }
                    },
                    "name": "Resume integration"
                },
                "suspend_integration": {
                    "description": "Suspends integration. Suspending logs the integration out from the router, and stops accessing it. Useful e.g. if accessing the router web interface from another source such as a web browser is temporarily required. Invoke the resume_integration service to resume.\n.",
                    "fields": {
                        "url": {
                            "description": "URL of router to suspend integration for; optional when only one is configured.",
                            "name": "URL"
                        }
                    },
                    "name": "Suspend integration"
                }
            }
        },
        "hue": {
            "config": {
                "abort": {
                    "all_configured": "All Philips Hue bridges are already configured",
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "discover_timeout": "Unable to discover Hue bridges",
                    "invalid_host": "Invalid hostname or IP address",
                    "no_bridges": "No Philips Hue bridges discovered",
                    "not_hue_bridge": "Not a Hue bridge",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "linking": "Unexpected error",
                    "register_failed": "Failed to register, please try again"
                },
                "step": {
                    "init": {
                        "data": {
                            "host": "Host"
                        },
                        "title": "Pick Hue bridge"
                    },
                    "link": {
                        "description": "Press the button on the bridge to register Philips Hue with Home Assistant.\n\n![Location of button on bridge](\/static\/images\/config_philips_hue.jpg)",
                        "title": "Link Hub"
                    },
                    "manual": {
                        "data": {
                            "host": "Host"
                        },
                        "title": "Manual configure a Hue bridge"
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "1": "First button",
                    "2": "Second button",
                    "3": "Third button",
                    "4": "Fourth button",
                    "button_1": "First button",
                    "button_2": "Second button",
                    "button_3": "Third button",
                    "button_4": "Fourth button",
                    "clock_wise": "Rotation clockwise",
                    "counter_clock_wise": "Rotation counter-clockwise",
                    "dim_down": "Dim down",
                    "dim_up": "Dim up",
                    "double_buttons_1_3": "First and Third buttons",
                    "double_buttons_2_4": "Second and Fourth buttons",
                    "turn_off": "Turn off",
                    "turn_on": "Turn on"
                },
                "trigger_type": {
                    "double_short_release": "Both \"{subtype}\" released",
                    "initial_press": "\"{subtype}\" pressed initially",
                    "long_release": "\"{subtype}\" released after long press",
                    "remote_button_long_release": "\"{subtype}\" released after long press",
                    "remote_button_short_press": "\"{subtype}\" pressed",
                    "remote_button_short_release": "\"{subtype}\" released",
                    "remote_double_button_long_press": "Both \"{subtype}\" released after long press",
                    "remote_double_button_short_press": "Both \"{subtype}\" released",
                    "repeat": "\"{subtype}\" held down",
                    "short_release": "\"{subtype}\" released after short press",
                    "start": "\"{subtype}\" pressed initially"
                }
            },
            "entity": {
                "event": {
                    "button": {
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "double_short_release": "Double press",
                                    "initial_press": "Initial press",
                                    "long_press": "Long press",
                                    "long_release": "Long release",
                                    "repeat": "Repeat",
                                    "short_release": "Short press"
                                }
                            }
                        }
                    },
                    "rotary": {
                        "name": "Rotary",
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "clock_wise": "Clockwise",
                                    "counter_clock_wise": "Counter clockwise"
                                }
                            }
                        }
                    }
                },
                "sensor": {
                    "zigbee_connectivity": {
                        "name": "Zigbee connectivity",
                        "state": {
                            "connected": "Connected",
                            "connectivity_issue": "Connectivity issue",
                            "disconnected": "Disconnected",
                            "unidirectional_incoming": "Unidirectional incoming"
                        }
                    }
                },
                "switch": {
                    "automation": {
                        "state": {
                            "off": "Disabled",
                            "on": "Enabled"
                        }
                    },
                    "light_sensor_enabled": {
                        "name": "Light sensor enabled"
                    },
                    "motion_sensor_enabled": {
                        "name": "Motion sensor enabled"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "allow_hue_groups": "Allow Hue groups",
                            "allow_hue_scenes": "Allow Hue scenes",
                            "allow_unreachable": "Allow unreachable bulbs to report their state correctly",
                            "ignore_availability": "Ignore connectivity status for the given devices"
                        }
                    }
                }
            },
            "services": {
                "activate_scene": {
                    "description": "Activates a Hue scene with more control over the options.",
                    "fields": {
                        "brightness": {
                            "description": "Set brightness for the scene.",
                            "name": "Brightness"
                        },
                        "dynamic": {
                            "description": "Enable dynamic mode of the scene.",
                            "name": "Dynamic"
                        },
                        "speed": {
                            "description": "Speed of dynamic palette for this scene.",
                            "name": "Speed"
                        },
                        "transition": {
                            "description": "Transition duration it takes to bring devices to the state defined in the scene.",
                            "name": "Transition"
                        }
                    },
                    "name": "Activate Hue scene"
                },
                "hue_activate_scene": {
                    "description": "Activates a hue scene stored in the hue hub.",
                    "fields": {
                        "dynamic": {
                            "description": "Enable dynamic mode of the scene (V2 bridges and supported scenes only).",
                            "name": "Dynamic"
                        },
                        "group_name": {
                            "description": "Name of hue group\/room from the hue app.",
                            "name": "Group"
                        },
                        "scene_name": {
                            "description": "Name of hue scene from the hue app.",
                            "name": "Scene"
                        }
                    },
                    "name": "Activate scene"
                }
            }
        },
        "huisbaasje": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "current_gas": {
                        "name": "Current gas"
                    },
                    "current_power": {
                        "name": "Current power"
                    },
                    "current_power_off_peak": {
                        "name": "Current power in off peak"
                    },
                    "current_power_out_off_peak": {
                        "name": "Current power out off peak"
                    },
                    "current_power_out_peak": {
                        "name": "Current power out peak"
                    },
                    "current_power_peak": {
                        "name": "Current power in peak"
                    },
                    "energy_consumption_off_peak_today": {
                        "name": "Energy consumption off peak today"
                    },
                    "energy_consumption_peak_today": {
                        "name": "Energy consumption peak today"
                    },
                    "energy_month": {
                        "name": "Energy this month"
                    },
                    "energy_production_off_peak_today": {
                        "name": "Energy production off peak today"
                    },
                    "energy_production_peak_today": {
                        "name": "Energy production peak today"
                    },
                    "energy_today": {
                        "name": "Energy today"
                    },
                    "energy_week": {
                        "name": "Energy this week"
                    },
                    "energy_year": {
                        "name": "Energy this year"
                    },
                    "gas_month": {
                        "name": "Gas this month"
                    },
                    "gas_today": {
                        "name": "Gas today"
                    },
                    "gas_week": {
                        "name": "Gas this week"
                    },
                    "gas_year": {
                        "name": "Gas this year"
                    }
                }
            }
        },
        "humidifier": {
            "device_automation": {
                "action_type": {
                    "set_humidity": "Set humidity for {entity_name}",
                    "set_mode": "Change mode on {entity_name}",
                    "toggle": "Toggle {entity_name}",
                    "turn_off": "Turn off {entity_name}",
                    "turn_on": "Turn on {entity_name}"
                },
                "condition_type": {
                    "is_mode": "{entity_name} is set to a specific mode",
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on"
                },
                "trigger_type": {
                    "changed_states": "{entity_name} turned on or off",
                    "target_humidity_changed": "{entity_name} target humidity changed",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Humidifier",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "action": {
                            "name": "Action",
                            "state": {
                                "drying": "Drying",
                                "humidifying": "Humidifying",
                                "idle": "Idle",
                                "off": "Off"
                            }
                        },
                        "available_modes": {
                            "name": "Available modes"
                        },
                        "current_humidity": {
                            "name": "Current humidity"
                        },
                        "humidity": {
                            "name": "Target humidity"
                        },
                        "max_humidity": {
                            "name": "Max target humidity"
                        },
                        "min_humidity": {
                            "name": "Min target humidity"
                        },
                        "mode": {
                            "name": "Mode",
                            "state": {
                                "auto": "Auto",
                                "away": "Away",
                                "baby": "Baby",
                                "boost": "Boost",
                                "comfort": "Comfort",
                                "eco": "Eco",
                                "home": "Home",
                                "normal": "Normal",
                                "sleep": "Sleep"
                            }
                        }
                    }
                },
                "dehumidifier": {
                    "name": "Dehumidifier"
                },
                "humidifier": {
                    "name": "Humidifier"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "set_humidity": {
                    "description": "Sets the target humidity.",
                    "fields": {
                        "humidity": {
                            "description": "Target humidity.",
                            "name": "Humidity"
                        }
                    },
                    "name": "Set humidity"
                },
                "set_mode": {
                    "description": "Sets the humidifier operation mode.",
                    "fields": {
                        "mode": {
                            "description": "Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation.",
                            "name": "Mode"
                        }
                    },
                    "name": "Set mode"
                },
                "toggle": {
                    "description": "Toggles the humidifier on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns the humidifier off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns the humidifier on.",
                    "name": "Turn on"
                }
            },
            "title": "Humidifier"
        },
        "hunterdouglas_powerview": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "link": {
                        "description": "Do you want to set up {name} ({host})?",
                        "title": "Connect to the PowerView Hub"
                    },
                    "user": {
                        "data": {
                            "host": "IP Address"
                        },
                        "title": "Connect to the PowerView Hub"
                    }
                }
            },
            "entity": {
                "button": {
                    "calibrate": {
                        "name": "Calibrate"
                    },
                    "favorite": {
                        "name": "Favorite"
                    }
                },
                "cover": {
                    "bottom": {
                        "name": "Bottom"
                    },
                    "combined": {
                        "name": "Combined"
                    },
                    "front": {
                        "name": "Front"
                    },
                    "rear": {
                        "name": "Rear"
                    },
                    "top": {
                        "name": "Top"
                    }
                },
                "select": {
                    "power_source": {
                        "name": "Power source"
                    }
                },
                "sensor": {
                    "signal_strength": {
                        "name": "Signal strength"
                    }
                }
            }
        },
        "hvv_departures": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_results": "No results. Try with a different station\/address"
                },
                "step": {
                    "station": {
                        "data": {
                            "station": "Station\/Address"
                        },
                        "title": "Enter Station\/Address"
                    },
                    "station_select": {
                        "data": {
                            "station": "Station\/Address"
                        },
                        "title": "Select Station\/Address"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Connect to the HVV API"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "departures": {
                        "name": "Departures"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "filter": "Select lines",
                            "offset": "Offset (minutes)",
                            "real_time": "Use real time data"
                        },
                        "description": "Change options for this departure sensor",
                        "title": "Options"
                    }
                }
            }
        },
        "hydrawise": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "timeout_connect": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "watering": {
                        "name": "Watering"
                    }
                },
                "sensor": {
                    "next_cycle": {
                        "name": "Next cycle"
                    },
                    "watering_time": {
                        "name": "Watering time"
                    }
                },
                "switch": {
                    "auto_watering": {
                        "name": "Automatic watering"
                    },
                    "manual_watering": {
                        "name": "Manual watering"
                    }
                }
            },
            "issues": {
                "deprecated_yaml_import_issue": {
                    "description": "Configuring Hydrawise using YAML is being removed but there was an {error_type} error importing your YAML configuration.\n\nEnsure connection to Hydrawise works and restart Home Assistant to try again or remove the Hydrawise YAML configuration from your configuration.yaml file and continue to [set up the integration]({url}) manually.",
                    "title": "The Hydrawise YAML configuration import failed"
                }
            }
        },
        "hyperion": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "auth_new_token_not_granted_error": "Newly created token was not approved on Hyperion UI",
                    "auth_new_token_not_work_error": "Failed to authenticate using newly created token",
                    "auth_required_error": "Failed to determine if authorization is required",
                    "cannot_connect": "Failed to connect",
                    "no_id": "The Hyperion Ambilight instance did not report its id",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_access_token": "Invalid access token"
                },
                "step": {
                    "auth": {
                        "data": {
                            "create_token": "Automatically create new token",
                            "token": "Or provide pre-existing token"
                        },
                        "description": "Configure authorization to your Hyperion Ambilight server"
                    },
                    "confirm": {
                        "description": "Do you want to add this Hyperion Ambilight to Home Assistant?\n\n**Host:** {host}\n**Port:** {port}\n**ID**: {id}",
                        "title": "Confirm addition of Hyperion Ambilight service"
                    },
                    "create_token": {
                        "description": "Choose **Submit** below to request a new authentication token. You will be redirected to the Hyperion UI to approve the request. Please verify the shown id is \"{auth_id}\"",
                        "title": "Automatically create new authentication token"
                    },
                    "create_token_external": {
                        "title": "Accept new token in Hyperion UI"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            },
            "entity": {
                "switch": {
                    "all": {
                        "name": "Component all"
                    },
                    "blackbar_detection": {
                        "name": "Component blackbar detection"
                    },
                    "boblight_server": {
                        "name": "Component boblight server"
                    },
                    "forwarder": {
                        "name": "Component forwarder"
                    },
                    "led_device": {
                        "name": "Component LED device"
                    },
                    "platform_capture": {
                        "name": "Component platform capture"
                    },
                    "smoothing": {
                        "name": "Component smoothing"
                    },
                    "usb_capture": {
                        "name": "Component USB capture"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "effect_show_list": "Hyperion effects to show",
                            "priority": "Hyperion priority to use for colors and effects"
                        }
                    }
                }
            }
        },
        "ialarm": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            }
        },
        "iaqualink": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter the username and password for your iAqualink account.",
                        "title": "Connect to iAqualink"
                    }
                }
            }
        },
        "ibeacon": {
            "config": {
                "abort": {
                    "bluetooth_not_available": "At least one Bluetooth adapter or remote must be configured to use iBeacon Tracker.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to set up iBeacon Tracker?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "estimated_distance": {
                        "name": "Estimated distance"
                    },
                    "power": {
                        "name": "Power"
                    },
                    "vendor": {
                        "name": "Vendor"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "min_rssi": "Minimum RSSI"
                        },
                        "description": "iBeacons with an RSSI value lower than the Minimum RSSI will be ignored. If the integration is seeing neighboring iBeacons, increasing this value may help."
                    }
                }
            }
        },
        "icloud": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "no_device": "None of your devices have \"Find my iPhone\" activated",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "send_verification_code": "Failed to send verification code",
                    "validate_verification_code": "Failed to verify your verification code, try again"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Your previously entered password for {username} is no longer working. Update your password to keep using this integration.",
                        "title": "Reauthenticate Integration"
                    },
                    "trusted_device": {
                        "data": {
                            "trusted_device": "Trusted device"
                        },
                        "description": "Select your trusted device",
                        "title": "iCloud trusted device"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email",
                            "with_family": "With family"
                        },
                        "description": "Enter your credentials",
                        "title": "iCloud credentials"
                    },
                    "verification_code": {
                        "data": {
                            "verification_code": "Verification code"
                        },
                        "description": "Please enter the verification code you just received from iCloud",
                        "title": "iCloud verification code"
                    }
                }
            },
            "services": {
                "display_message": {
                    "description": "Displays a message on an Apple device.",
                    "fields": {
                        "account": {
                            "description": "Your iCloud account username (email) or account name.",
                            "name": "Account"
                        },
                        "device_name": {
                            "description": "The name of the Apple device to display the message.",
                            "name": "Device name"
                        },
                        "message": {
                            "description": "The content of your message.",
                            "name": "Message"
                        },
                        "sound": {
                            "description": "To make a sound when displaying the message.",
                            "name": "Sound"
                        }
                    },
                    "name": "Display message"
                },
                "lost_device": {
                    "description": "Makes an Apple device in lost state.",
                    "fields": {
                        "account": {
                            "description": "Your iCloud account username (email) or account name.",
                            "name": "Account"
                        },
                        "device_name": {
                            "description": "The name of the Apple device to set lost.",
                            "name": "Device name"
                        },
                        "message": {
                            "description": "The message to display in lost mode.",
                            "name": "Message"
                        },
                        "number": {
                            "description": "The phone number to call in lost mode (must contain country code).",
                            "name": "Number"
                        }
                    },
                    "name": "Lost device"
                },
                "play_sound": {
                    "description": "Plays sound on an Apple device.",
                    "fields": {
                        "account": {
                            "description": "Your iCloud account username (email) or account name.",
                            "name": "Account"
                        },
                        "device_name": {
                            "description": "The name of the Apple device to play a sound.",
                            "name": "Device name"
                        }
                    },
                    "name": "Play sound"
                },
                "update": {
                    "description": "Updates iCloud devices.",
                    "fields": {
                        "account": {
                            "description": "Your iCloud account username (email) or account name.",
                            "name": "Account"
                        }
                    },
                    "name": "Update"
                }
            }
        },
        "idasen_desk": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No unconfigured devices found. Make sure that the desk is in Bluetooth pairing mode. Enter pairing mode by pressing the small button with the Bluetooth logo on the controller for about 3 seconds, until it starts blinking.",
                    "not_supported": "Device not supported"
                },
                "error": {
                    "auth_failed": "Unable to authenticate with the desk. This is usually solved by using an ESPHome Bluetooth Proxy. Please check the integration documentation for alternative workarounds.",
                    "cannot_connect": "Cannot connect. Make sure that the desk is in Bluetooth pairing mode. If not already, you can also use an ESPHome Bluetooth Proxy, as it provides a better connection.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "address": "Bluetooth address"
                        }
                    }
                }
            }
        },
        "ifttt": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to use the \"Make a web request\" action from the [IFTTT Webhook applet]({applet_url}).\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n- Content Type: application\/json\n\nSee [the documentation]({docs_url}) on how to configure automations to handle incoming data."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up IFTTT?",
                        "title": "Set up the IFTTT Webhook Applet"
                    }
                }
            },
            "services": {
                "push_alarm_state": {
                    "description": "Updates the alarm state to the specified value.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the alarm control panel which state has to be updated.",
                            "name": "Entity ID"
                        },
                        "state": {
                            "description": "The state to which the alarm control panel has to be set.",
                            "name": "State"
                        }
                    },
                    "name": "Push alarm state"
                },
                "trigger": {
                    "description": "Triggers the configured IFTTT Webhook.",
                    "fields": {
                        "event": {
                            "description": "The name of the event to send.",
                            "name": "Event"
                        },
                        "value1": {
                            "description": "Generic field to send data via the event.",
                            "name": "Value 1"
                        },
                        "value2": {
                            "description": "Generic field to send data via the event.",
                            "name": "Value 2"
                        },
                        "value3": {
                            "description": "Generic field to send data via the event.",
                            "name": "Value 3"
                        }
                    },
                    "name": "Trigger"
                }
            }
        },
        "ihc": {
            "services": {
                "pulse": {
                    "description": "Pulses an input on the IHC controller.",
                    "fields": {
                        "controller_id": {
                            "description": "If you have multiple controller, this is the index of you controller\nstarting with 0.\n.",
                            "name": "Controller ID"
                        },
                        "ihc_id": {
                            "description": "The integer IHC resource ID.",
                            "name": "IHC ID"
                        }
                    },
                    "name": "Pulse"
                },
                "set_runtime_value_bool": {
                    "description": "Sets a boolean runtime value on the IHC controller.",
                    "fields": {
                        "controller_id": {
                            "description": "If you have multiple controller, this is the index of you controller\nstarting with 0.\n.",
                            "name": "Controller ID"
                        },
                        "ihc_id": {
                            "description": "The integer IHC resource ID.",
                            "name": "IHC ID"
                        },
                        "value": {
                            "description": "The boolean value to set.",
                            "name": "Value"
                        }
                    },
                    "name": "Set runtime value boolean"
                },
                "set_runtime_value_float": {
                    "description": "Sets a float runtime value on the IHC controller.",
                    "fields": {
                        "controller_id": {
                            "description": "If you have multiple controller, this is the index of you controller\nstarting with 0.\n.",
                            "name": "Controller ID"
                        },
                        "ihc_id": {
                            "description": "The integer IHC resource ID.",
                            "name": "IHC ID"
                        },
                        "value": {
                            "description": "The float value to set.",
                            "name": "Value"
                        }
                    },
                    "name": "Set runtime value float"
                },
                "set_runtime_value_int": {
                    "description": "Sets an integer runtime value on the IHC controller.",
                    "fields": {
                        "controller_id": {
                            "description": "If you have multiple controller, this is the index of you controller\nstarting with 0.\n.",
                            "name": "Controller ID"
                        },
                        "ihc_id": {
                            "description": "The integer IHC resource ID.",
                            "name": "IHC ID"
                        },
                        "value": {
                            "description": "The integer value to set.",
                            "name": "Value"
                        }
                    },
                    "name": "Set runtime value integer"
                }
            }
        },
        "image": {
            "entity_component": {
                "_": {
                    "name": "Image"
                }
            },
            "title": "Image"
        },
        "image_processing": {
            "entity_component": {
                "_": {
                    "name": "Image processing",
                    "state_attributes": {
                        "faces": {
                            "name": "Faces"
                        },
                        "total_faces": {
                            "name": "Total faces"
                        }
                    }
                }
            },
            "services": {
                "scan": {
                    "description": "Processes an image immediately.",
                    "name": "Scan"
                }
            },
            "title": "Image processing"
        },
        "imap": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_charset": "The specified charset is not supported",
                    "invalid_folder": "The selected folder is invalid",
                    "invalid_search": "The selected search is invalid",
                    "ssl_error": "An SSL error occurred. Change SSL cipher list and try again."
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password for {username} is invalid.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "charset": "Character set",
                            "folder": "Folder",
                            "password": "Password",
                            "port": "Port",
                            "search": "IMAP search",
                            "server": "Server",
                            "ssl_cipher_list": "SSL cipher list (Advanced)",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "options": {
                "error": {
                    "already_configured": "An entry with these folder and search options already exists.",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_charset": "The specified charset is not supported",
                    "invalid_folder": "The selected folder is invalid",
                    "invalid_search": "The selected search is invalid",
                    "invalid_template": "Invalid template"
                },
                "step": {
                    "init": {
                        "data": {
                            "custom_event_data_template": "Template to create custom event data",
                            "enable_push": "Enable Push-IMAP if the server supports it. Turn off if Push-IMAP updates are unreliable.",
                            "folder": "Folder",
                            "max_message_size": "Max message size (2048 < size < 30000)",
                            "search": "IMAP search"
                        }
                    }
                }
            },
            "selector": {
                "ssl_cipher_list": {
                    "options": {
                        "intermediate": "Intermediate ciphers",
                        "modern": "Modern ciphers",
                        "python_default": "Default settings"
                    }
                }
            }
        },
        "imap_email_content": {
            "issues": {
                "deprecation": {
                    "description": "The IMAP email content integration is deprecated. Your IMAP server configuration was already migrated to the [imap integration](https:\/\/my.home-assistant.io\/redirect\/config_flow_start?domain=imap). To set up a sensor for the IMAP email content, set up a template sensor with the config:\n\n```yaml\n{yaml_example}```\n\nPlease remove the deprecated `imap_email_plaform` sensor configuration from your `configuration.yaml`.\n\nNote that the event filter only filters on the first of the configured allowed senders, customize the filter if needed.\n\nYou can skip this part if you have already set up a template sensor.",
                    "title": "The IMAP email content integration is deprecated"
                },
                "migration": {
                    "fix_flow": {
                        "abort": {
                            "already_configured": "The IMAP server config was already migrated to the imap integration. Remove the `imap_email_plaform` sensor configuration from your `configuration.yaml`.",
                            "cannot_connect": "Migration failed. Failed to connect to the IMAP server. Perform a manual migration."
                        },
                        "step": {
                            "confirm": {
                                "description": "In this step an `imap` config entry will be set up with the following configuration:\n\n```text\nServer\t{server}\nPort\t{port}\nUsername\t{username}\nPassword\t*****\nFolder\t{folder}\n```\n\nSee also: (https:\/\/www.home-assistant.io\/integrations\/imap\/)\n\nFitering configuration on allowed `sender` is part of the template sensor config that can copied and placed in your `configuration.yaml.\n\nNote that the event filter only filters on the first of the configured allowed senders, customize the filter if needed.\n\n```yaml\n{yaml_example}```\nDo not forget to cleanup the your `configuration.yaml` after migration.\n\nSubmit to migrate your IMAP server configuration to an `imap` configuration entry.",
                                "title": "Your IMAP server settings will be migrated"
                            },
                            "start": {
                                "description": "The IMAP email content integration is deprecated. Your IMAP server configuration can be migrated automatically to the [imap integration](https:\/\/my.home-assistant.io\/redirect\/config_flow_start?domain=imap), this will enable using a custom `imap` event trigger. To set up a sensor that has an IMAP content state, a template sensor can be used. Remove the `imap_email_plaform` sensor configuration from your `configuration.yaml` after migration.\n\nSubmit to start migration of your IMAP server configuration to the `imap` integration.",
                                "title": "Migrate your IMAP email configuration"
                            }
                        }
                    },
                    "title": "The IMAP email content integration needs attention"
                }
            }
        },
        "inkbird": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "input_boolean": {
            "entity_component": {
                "_": {
                    "name": "Input boolean",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads helpers from the YAML-configuration.",
                    "name": "Reload"
                },
                "toggle": {
                    "description": "Toggles the helper on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns off the helper.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns on the helper.",
                    "name": "Turn on"
                }
            },
            "title": "Input boolean"
        },
        "input_button": {
            "entity_component": {
                "_": {
                    "name": "Input button",
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        }
                    }
                }
            },
            "services": {
                "press": {
                    "description": "Mimics the physical button press on the device.",
                    "name": "Press"
                },
                "reload": {
                    "description": "Reloads helpers from the YAML-configuration.",
                    "name": "Reload"
                }
            },
            "title": "Input button"
        },
        "input_datetime": {
            "entity_component": {
                "_": {
                    "name": "Input datetime",
                    "state_attributes": {
                        "day": {
                            "name": "Day"
                        },
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "hour": {
                            "name": "Hour"
                        },
                        "minute": {
                            "name": "Minute"
                        },
                        "month": {
                            "name": "Month"
                        },
                        "second": {
                            "name": "Second"
                        },
                        "timestamp": {
                            "name": "Timestamp"
                        },
                        "year": {
                            "name": "Year"
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads helpers from the YAML-configuration.",
                    "name": "Reload"
                },
                "set_datetime": {
                    "description": "Sets the date and\/or time.",
                    "fields": {
                        "date": {
                            "description": "The target date.",
                            "name": "Date"
                        },
                        "datetime": {
                            "description": "The target date & time.",
                            "name": "Date & time"
                        },
                        "time": {
                            "description": "The target time.",
                            "name": "Time"
                        },
                        "timestamp": {
                            "description": "The target date & time, expressed by a UNIX timestamp.",
                            "name": "Timestamp"
                        }
                    },
                    "name": "Set"
                }
            },
            "title": "Input datetime"
        },
        "input_number": {
            "entity_component": {
                "_": {
                    "name": "Input number",
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "initial": {
                            "name": "Initial value"
                        },
                        "max": {
                            "name": "Maximum"
                        },
                        "min": {
                            "name": "Minimum"
                        },
                        "mode": {
                            "name": "Mode",
                            "state": {
                                "auto": "Automatic",
                                "box": "Box",
                                "slider": "Slider"
                            }
                        },
                        "step": {
                            "name": "Step"
                        }
                    }
                }
            },
            "services": {
                "decrement": {
                    "description": "Decrements the current value by 1 step.",
                    "name": "Decrement"
                },
                "increment": {
                    "description": "Increments the value by 1 step.",
                    "name": "Increment"
                },
                "reload": {
                    "description": "Reloads helpers from the YAML-configuration.",
                    "name": "Reload"
                },
                "set_value": {
                    "description": "Sets the value.",
                    "fields": {
                        "value": {
                            "description": "The target value.",
                            "name": "Value"
                        }
                    },
                    "name": "Set"
                }
            },
            "title": "Input number"
        },
        "input_select": {
            "entity_component": {
                "_": {
                    "name": "Input select",
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "options": {
                            "name": "Options"
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads helpers from the YAML-configuration.",
                    "name": "Reload"
                },
                "select_first": {
                    "description": "Selects the first option.",
                    "name": "First"
                },
                "select_last": {
                    "description": "Selects the last option.",
                    "name": "Last"
                },
                "select_next": {
                    "description": "Select the next option.",
                    "fields": {
                        "cycle": {
                            "description": "If the option should cycle from the last to the first option on the list.",
                            "name": "Cycle"
                        }
                    },
                    "name": "Next"
                },
                "select_option": {
                    "description": "Selects an option.",
                    "fields": {
                        "option": {
                            "description": "Option to be selected.",
                            "name": "Option"
                        }
                    },
                    "name": "Select"
                },
                "select_previous": {
                    "description": "Selects the previous option.",
                    "fields": {
                        "cycle": {
                            "description": "If the option should cycle from the last to the first option on the list.",
                            "name": "Cycle"
                        }
                    },
                    "name": "Previous"
                },
                "set_options": {
                    "description": "Sets the options.",
                    "fields": {
                        "options": {
                            "description": "List of options.",
                            "name": "Options"
                        }
                    },
                    "name": "Set options"
                }
            },
            "title": "Input select"
        },
        "input_text": {
            "entity_component": {
                "_": {
                    "name": "Input text",
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "max": {
                            "name": "Max length"
                        },
                        "min": {
                            "name": "Min length"
                        },
                        "mode": {
                            "name": "Mode",
                            "state": {
                                "password": "Password",
                                "text": "Text"
                            }
                        },
                        "pattern": {
                            "name": "Pattern"
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads helpers from the YAML-configuration.",
                    "name": "Reload"
                },
                "set_value": {
                    "description": "Sets the value.",
                    "fields": {
                        "value": {
                            "description": "The target value.",
                            "name": "Value"
                        }
                    },
                    "name": "Set"
                }
            },
            "title": "Input text"
        },
        "insteon": {
            "config": {
                "abort": {
                    "cannot_connect": "Failed to connect",
                    "not_insteon_device": "Discovered device not an Insteon device",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "select_single": "Select one option."
                },
                "flow_title": "{name}",
                "step": {
                    "confirm_usb": {
                        "description": "Do you want to set up {name}?"
                    },
                    "hubv1": {
                        "data": {
                            "host": "IP Address",
                            "port": "Port"
                        },
                        "description": "Configure the Insteon Hub Version 1 (pre-2014).",
                        "title": "Insteon Hub Version 1"
                    },
                    "hubv2": {
                        "data": {
                            "host": "IP Address",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "description": "Configure the Insteon Hub Version 2.",
                        "title": "Insteon Hub Version 2"
                    },
                    "plm": {
                        "data": {
                            "device": "USB Device Path"
                        },
                        "description": "Configure the Insteon PowerLink Modem (PLM).",
                        "title": "Insteon PLM"
                    },
                    "user": {
                        "data": {
                            "modem_type": "Modem type."
                        },
                        "description": "Select the Insteon modem type.",
                        "menu_options": {
                            "hubv1": "Hub version 1 (pre 2014)",
                            "hubv2": "Hub version 2",
                            "plm": "PowerLink Modem (PLM)"
                        }
                    }
                }
            },
            "options": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "input_error": "Invalid entries, please check your values.",
                    "select_single": "Select one option."
                },
                "step": {
                    "add_override": {
                        "data": {
                            "address": "Device address (i.e. 1a2b3c)",
                            "cat": "Device category (i.e. 0x10)",
                            "subcat": "Device subcategory (i.e. 0x0a)"
                        },
                        "description": "Add a device override."
                    },
                    "add_x10": {
                        "data": {
                            "housecode": "Housecode (a - p)",
                            "platform": "Platform",
                            "steps": "Dimmer steps (for light devices only, default 22)",
                            "unitcode": "Unitcode (1 - 16)"
                        },
                        "description": "Change the Insteon Hub password."
                    },
                    "change_hub_config": {
                        "data": {
                            "host": "IP Address",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "description": "Change the Insteon Hub connection information."
                    },
                    "change_plm_config": {
                        "data": {
                            "device": "USB Device Path"
                        },
                        "description": "Change the Insteon PLM connection information."
                    },
                    "init": {
                        "data": {
                            "add_override": "Add a device override.",
                            "add_x10": "Add an X10 device.",
                            "change_hub_config": "Change the Hub configuration.",
                            "change_plm_config": "Change the PLM configuration.",
                            "remove_override": "Remove a device override.",
                            "remove_x10": "Remove an X10 device."
                        },
                        "menu_options": {
                            "add_override": "Add a device override.",
                            "add_x10": "Add an X10 device.",
                            "change_hub_config": "Change the Hub configuration.",
                            "change_plm_config": "Change the PLM configuration.",
                            "remove_override": "Remove a device override.",
                            "remove_x10": "Remove an X10 device."
                        }
                    },
                    "remove_override": {
                        "data": {
                            "address": "Select a device address to remove"
                        },
                        "description": "Remove a device override"
                    },
                    "remove_x10": {
                        "data": {
                            "address": "Select a device address to remove"
                        },
                        "description": "Remove an X10 device"
                    }
                }
            },
            "services": {
                "add_all_link": {
                    "description": "Tells the Insteom Modem (IM) start All-Linking mode. Once the IM is in All-Linking mode, press the link button on the device to complete All-Linking.",
                    "fields": {
                        "group": {
                            "description": "All-Link group number.",
                            "name": "Group"
                        },
                        "mode": {
                            "description": "Linking mode   controller - IM is controller   responder - IM is responder.",
                            "name": "Mode"
                        }
                    },
                    "name": "Add all link"
                },
                "add_default_links": {
                    "description": "Adds the default links between the device and the Insteon Modem (IM).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the device to load. Use \"all\" to load the database of all devices.",
                            "name": "Entity"
                        }
                    },
                    "name": "Add default links"
                },
                "delete_all_link": {
                    "description": "Tells the Insteon Modem (IM) to remove an All-Link record from the All-Link Database of the IM and a device. Once the IM is set to delete the link, press the link button on the corresponding device to complete the process.",
                    "fields": {
                        "group": {
                            "description": "All-Link group number.",
                            "name": "Group"
                        }
                    },
                    "name": "Delete all link"
                },
                "load_all_link_database": {
                    "description": "Load the All-Link Database for a device. WARNING - Loading a device All-LInk database is very time consuming and inconsistent. This may take a LONG time and may need to be repeated to obtain all records.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the device to load. Use \"all\" to load the database of all devices.",
                            "name": "Entity"
                        },
                        "reload": {
                            "description": "Reloads all records. If true the current records are cleared from memory (does not effect the device) and the records are reloaded. If false the existing records are left in place and only missing records are added. Default is false.",
                            "name": "Reload"
                        }
                    },
                    "name": "Load all link database"
                },
                "print_all_link_database": {
                    "description": "Prints the All-Link Database for a device. Requires that the All-Link Database is loaded into memory.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the device to print.",
                            "name": "Entity"
                        }
                    },
                    "name": "Print all link database"
                },
                "print_im_all_link_database": {
                    "description": "Prints the All-Link Database for the INSTEON Modem (IM).",
                    "name": "Print IM all link database"
                },
                "scene_off": {
                    "description": "Triggers an INSTEON scene to turn OFF.",
                    "fields": {
                        "group": {
                            "description": "INSTEON group or scene number.",
                            "name": "Group"
                        }
                    },
                    "name": "Scene off"
                },
                "scene_on": {
                    "description": "Triggers an INSTEON scene to turn ON.",
                    "fields": {
                        "group": {
                            "description": "INSTEON group or scene number.",
                            "name": "Group"
                        }
                    },
                    "name": "Scene on"
                },
                "x10_all_lights_off": {
                    "description": "Sends X10 All Lights Off command.",
                    "fields": {
                        "housecode": {
                            "description": "X10 house code.",
                            "name": "Housecode"
                        }
                    },
                    "name": "X10 all lights off"
                },
                "x10_all_lights_on": {
                    "description": "Sends X10 All Lights On command.",
                    "fields": {
                        "housecode": {
                            "description": "X10 house code.",
                            "name": "Housecode"
                        }
                    },
                    "name": "X10 all lights on"
                },
                "x10_all_units_off": {
                    "description": "Tells the Insteom Modem (IM) start All-Linking mode. Once the IM is in All-Linking mode, press the link button on the device to complete All-Linking.",
                    "fields": {
                        "housecode": {
                            "description": "X10 house code.",
                            "name": "Housecode"
                        }
                    },
                    "name": "X10 all units off"
                }
            }
        },
        "integration": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "method": "Integration method",
                            "name": "Name",
                            "round": "Precision",
                            "source": "Input sensor",
                            "unit_prefix": "Metric prefix",
                            "unit_time": "Time unit"
                        },
                        "data_description": {
                            "round": "Controls the number of decimal digits in the output.",
                            "unit_prefix": "The output will be scaled according to the selected metric prefix.",
                            "unit_time": "The output will be scaled according to the selected time unit."
                        },
                        "description": "Create a sensor that calculates a Riemann sum to estimate the integral of a sensor.",
                        "title": "Add Riemann sum integral sensor"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "round": "Precision"
                        },
                        "data_description": {
                            "round": "Controls the number of decimal digits in the output."
                        }
                    }
                }
            },
            "selector": {
                "method": {
                    "options": {
                        "left": "Left Riemann sum",
                        "right": "Right Riemann sum",
                        "trapezoidal": "Trapezoidal rule"
                    }
                },
                "unit_time": {
                    "options": {
                        "d": "Days",
                        "h": "Hours",
                        "min": "Minutes",
                        "s": "Seconds"
                    }
                }
            },
            "title": "Integration - Riemann sum integral sensor"
        },
        "intellifire": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "not_intellifire_device": "Not an IntelliFire Device.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "api_error": "Login failed",
                    "cannot_connect": "Failed to connect",
                    "iftapi_connect": "Error conecting to iftapi.net"
                },
                "flow_title": "{serial} ({host})",
                "step": {
                    "api_config": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        }
                    },
                    "dhcp_confirm": {
                        "description": "Do you want to set up {host}\nSerial: {serial}?"
                    },
                    "manual_device_entry": {
                        "data": {
                            "host": "Host (IP Address)"
                        },
                        "description": "Local Configuration"
                    },
                    "pick_device": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "The following IntelliFire devices were discovered. Please select which you wish to configure.",
                        "title": "Device Selection"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "accessory_error": {
                        "name": "Accessory error"
                    },
                    "disabled_error": {
                        "name": "Disabled error"
                    },
                    "ecm_offline_error": {
                        "name": "ECM offline error"
                    },
                    "fan_delay_error": {
                        "name": "Fan delay error"
                    },
                    "fan_error": {
                        "name": "Fan error"
                    },
                    "flame": {
                        "name": "Flame"
                    },
                    "flame_error": {
                        "name": "Flame Error"
                    },
                    "lights_error": {
                        "name": "Lights error"
                    },
                    "maintenance_error": {
                        "name": "Maintenance error"
                    },
                    "offline_error": {
                        "name": "Offline error"
                    },
                    "pilot_flame_error": {
                        "name": "Pilot flame error"
                    },
                    "pilot_light_on": {
                        "name": "Pilot light on"
                    },
                    "soft_lock_out_error": {
                        "name": "Soft lock out error"
                    },
                    "thermostat_on": {
                        "name": "Thermostat on"
                    },
                    "timer_on": {
                        "name": "Timer on"
                    }
                },
                "fan": {
                    "fan": {
                        "name": "Fan"
                    }
                },
                "light": {
                    "lights": {
                        "name": "Lights"
                    }
                },
                "number": {
                    "flame_control": {
                        "name": "Flame control"
                    }
                },
                "sensor": {
                    "connection_quality": {
                        "name": "Connection quality"
                    },
                    "downtime": {
                        "name": "Downtime"
                    },
                    "ecm_latency": {
                        "name": "ECM latency"
                    },
                    "fan_speed": {
                        "name": "Fan Speed"
                    },
                    "flame_height": {
                        "name": "Flame height"
                    },
                    "ipv4_address": {
                        "name": "IP address"
                    },
                    "target_temp": {
                        "name": "Target temperature"
                    },
                    "timer_end_timestamp": {
                        "name": "Timer end"
                    },
                    "uptime": {
                        "name": "Uptime"
                    }
                },
                "switch": {
                    "flame": {
                        "name": "Flame"
                    },
                    "pilot_light": {
                        "name": "Pilot light"
                    }
                }
            }
        },
        "intent_script": {
            "services": {
                "reload": {
                    "description": "Reloads the intent script from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "ios": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "battery_state": {
                        "name": "Battery state"
                    }
                }
            }
        },
        "iotawatt": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "auth": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "The IoTawatt device requires authentication. Please enter the username and password and click the Submit button."
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            }
        },
        "iperf3": {
            "services": {
                "speedtest": {
                    "description": "Immediately executes a speed test with iperf3.",
                    "fields": {
                        "host": {
                            "description": "The host name of the iperf3 server (already configured) to run a test with.",
                            "name": "Host"
                        }
                    },
                    "name": "Speedtest"
                }
            }
        },
        "ipma": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "name_exists": "Name already exists",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "mode": "Mode",
                            "name": "Name"
                        },
                        "description": "Instituto Português do Mar e Atmosfera",
                        "title": "Location"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "fire_risk": {
                        "name": "Fire risk"
                    },
                    "uv_index": {
                        "name": "UV index"
                    }
                }
            },
            "system_health": {
                "info": {
                    "api_endpoint_reachable": "IPMA API endpoint reachable"
                }
            }
        },
        "ipp": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "connection_upgrade": "Failed to connect to printer due to connection upgrade being required.",
                    "ipp_error": "Encountered IPP error.",
                    "ipp_version_error": "IPP version not supported by printer.",
                    "parse_error": "Failed to parse response from printer.",
                    "unique_id_required": "Device missing unique identification required for discovery."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "connection_upgrade": "Failed to connect to printer. Please try again with SSL\/TLS option checked."
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "base_path": "Relative path to the printer",
                            "host": "Host",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Set up your printer via Internet Printing Protocol (IPP) to integrate with Home Assistant.",
                        "title": "Link your printer"
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to set up {name}?",
                        "title": "Discovered printer"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "printer": {
                        "state": {
                            "idle": "Idle",
                            "printing": "Printing",
                            "stopped": "Stopped"
                        }
                    },
                    "uptime": {
                        "name": "Uptime"
                    }
                }
            }
        },
        "iqvia": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "invalid_zip_code": "ZIP code is invalid"
                },
                "step": {
                    "user": {
                        "data": {
                            "zip_code": "ZIP Code"
                        },
                        "description": "Fill out your U.S. or Canadian ZIP code."
                    }
                }
            }
        },
        "islamic_prayer_times": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to set up Islamic Prayer Times?",
                        "title": "Set up Islamic Prayer Times"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "asr": {
                        "name": "Asr prayer"
                    },
                    "dhuhr": {
                        "name": "Dhuhr prayer"
                    },
                    "fajr": {
                        "name": "Fajr prayer"
                    },
                    "isha": {
                        "name": "Isha prayer"
                    },
                    "maghrib": {
                        "name": "Maghrib prayer"
                    },
                    "midnight": {
                        "name": "Midnight time"
                    },
                    "sunrise": {
                        "name": "Sunrise time"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "calculation_method": "Prayer calculation method",
                            "latitude_adjustment_method": "Latitude adjustment method",
                            "midnight_mode": "Midnight mode",
                            "school": "School"
                        }
                    }
                }
            },
            "selector": {
                "calculation_method": {
                    "options": {
                        "custom": "Custom",
                        "egypt": "Egyptian General Authority of Survey",
                        "france": "Union Organization islamic de France",
                        "gulf": "Gulf Region",
                        "isna": "Islamic Society of North America",
                        "jafari": "Shia Ithna-Ansari",
                        "karachi": "University of Islamic Sciences, Karachi",
                        "kuwait": "Kuwait",
                        "makkah": "Umm Al-Qura University, Makkah",
                        "moonsighting": "Moonsighting Committee Worldwide",
                        "mwl": "Muslim World League",
                        "qatar": "Qatar",
                        "russia": "Spiritual Administration of Muslims of Russia",
                        "singapore": "Majlis Ugama Islam Singapura, Singapore",
                        "tehran": "Institute of Geophysics, University of Tehran",
                        "turkey": "Diyanet İşleri Başkanlığı, Turkey"
                    }
                },
                "latitude_adjustment_method": {
                    "options": {
                        "angle_based": "Angle based",
                        "middle_of_the_night": "Middle of the night",
                        "one_seventh": "One seventh"
                    }
                },
                "midnight_mode": {
                    "options": {
                        "jafari": "Jafari (mid sunset to fajr)",
                        "standard": "Standard (mid sunset to sunrise)"
                    }
                },
                "school": {
                    "options": {
                        "hanafi": "Hanafi",
                        "shafi": "Shafi"
                    }
                }
            },
            "title": "Islamic Prayer Times"
        },
        "iss": {
            "config": {
                "abort": {
                    "latitude_longitude_not_defined": "Latitude and longitude are not defined in Home Assistant.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to configure International Space Station (ISS)?"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "show_on_map": "Show on map"
                        }
                    }
                }
            }
        },
        "isy994": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_host": "The host entry was not in full URL format, e.g., http:\/\/192.168.10.100:80",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "The credentials for {host} are no longer valid.",
                        "title": "Reauthenticate your ISY"
                    },
                    "user": {
                        "data": {
                            "host": "URL",
                            "password": "Password",
                            "tls": "The TLS version of the ISY controller.",
                            "username": "Username"
                        },
                        "description": "The host entry must be in full URL format, e.g., http:\/\/192.168.10.100:80",
                        "title": "Connect to your ISY"
                    }
                }
            },
            "issues": {
                "deprecated_service": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Update any automations or scripts that use this service to instead use the `{alternate_service}` service with a target entity ID of `{alternate_target}`.",
                                "title": "The {deprecated_service} service will be removed"
                            },
                            "deprecated_yaml": {
                                "description": "Configuring Universal Devices ISY\/IoX using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the `isy994` YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                                "title": "The ISY\/IoX YAML configuration is being removed"
                            }
                        }
                    },
                    "title": "The {deprecated_service} service will be removed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "ignore_string": "Ignore String",
                            "restore_light_state": "Restore Light Brightness",
                            "sensor_string": "Node Sensor String",
                            "variable_sensor_string": "Variable Sensor String"
                        },
                        "description": "Set the options for the ISY Integration: \n • Node Sensor String: Any device or folder that contains 'Node Sensor String' in the name will be treated as a sensor or binary sensor. \n • Ignore String: Any device with 'Ignore String' in the name will be ignored. \n • Variable Sensor String: Any variable that contains 'Variable Sensor String' will be added as a sensor. \n • Restore Light Brightness: If enabled, the previous brightness will be restored when turning on a light instead of the device's built-in On-Level.",
                        "title": "ISY Options"
                    }
                }
            },
            "services": {
                "delete_zwave_lock_user_code": {
                    "description": "Delete a Z-Wave Lock User Code via the ISY.",
                    "fields": {
                        "user_num": {
                            "description": "The user slot number on the lock.",
                            "name": "User Number"
                        }
                    },
                    "name": "Delete Z-Wave Lock User Code"
                },
                "get_zwave_parameter": {
                    "description": "Requests a Z-Wave Device parameter via the ISY. The parameter value will be returned as a entity extra state attribute with the name \"ZW_#\" where \"#\" is the parameter number.",
                    "fields": {
                        "parameter": {
                            "description": "The parameter number to retrieve from the device.",
                            "name": "Parameter"
                        }
                    },
                    "name": "Get Z-Wave Parameter"
                },
                "rename_node": {
                    "description": "Renames a node or group (scene) on the ISY. Note: this will not automatically change the Home Assistant Entity Name or Entity ID to match. The entity name and ID will only be updated after calling `isy994.reload` or restarting Home Assistant, and ONLY IF you have not already customized the name within Home Assistant.",
                    "fields": {
                        "name": {
                            "description": "The new name to use within the ISY.",
                            "name": "New Name"
                        }
                    },
                    "name": "Rename Node on ISY"
                },
                "send_node_command": {
                    "description": "Sends a command to an ISY Device using its Home Assistant entity ID. Valid commands are: beep, brighten, dim, disable, enable, fade_down, fade_stop, fade_up, fast_off, fast_on, and query.",
                    "fields": {
                        "command": {
                            "description": "The command to be sent to the device.",
                            "name": "Command"
                        }
                    },
                    "name": "Send node command"
                },
                "send_program_command": {
                    "description": "Sends a command to control an ISY program or folder. Valid commands are run, run_then, run_else, stop, enable, disable, enable_run_at_startup, and disable_run_at_startup.",
                    "fields": {
                        "address": {
                            "description": "The address of the program to control (use either address or name).",
                            "name": "Address"
                        },
                        "command": {
                            "description": "The ISY Program Command to be sent.",
                            "name": "Command"
                        },
                        "isy": {
                            "description": "If you have more than one ISY connected, provide the name of the ISY to query (as shown on the Device Registry or as the top-first node in the ISY Admin Console).  If you have the same program name or address on multiple ISYs, omitting this will run the command on them all.",
                            "name": "ISY"
                        },
                        "name": {
                            "description": "The name of the program to control (use either address or name).",
                            "name": "Name"
                        }
                    },
                    "name": "Send program command"
                },
                "send_raw_node_command": {
                    "description": "Set the options for the ISY Integration: \n • Node Sensor String: Any device or folder that contains 'Node Sensor String' in the name will be treated as a sensor or binary sensor. \n • Ignore String: Any device with 'Ignore String' in the name will be ignored. \n • Variable Sensor String: Any variable that contains 'Variable Sensor String' will be added as a sensor. \n • Restore Light Brightness: If enabled, the previous brightness will be restored when turning on a light instead of the device's built-in On-Level.",
                    "fields": {
                        "command": {
                            "description": "The ISY REST Command to be sent to the device.",
                            "name": "Command"
                        },
                        "parameters": {
                            "description": "A dict of parameters to be sent in the query string (e.g. for controlling colored bulbs).",
                            "name": "Parameters"
                        },
                        "unit_of_measurement": {
                            "description": "The ISY Unit of Measurement (UOM) to send with the command, if required.",
                            "name": "Unit of measurement"
                        },
                        "value": {
                            "description": "The integer value to be sent with the command.",
                            "name": "Value"
                        }
                    },
                    "name": "Send raw node command"
                },
                "set_zwave_lock_user_code": {
                    "description": "Sets a Z-Wave Lock User Code via the ISY.",
                    "fields": {
                        "code": {
                            "description": "The code to set for the user.",
                            "name": "Code"
                        },
                        "user_num": {
                            "description": "The user slot number on the lock.",
                            "name": "User Number"
                        }
                    },
                    "name": "Set Z-Wave Lock User Code"
                },
                "set_zwave_parameter": {
                    "description": "Updates a Z-Wave Device parameter via the ISY. The parameter value will also be returned as a entity extra state attribute with the name \"ZW_#\" where \"#\" is the parameter number.",
                    "fields": {
                        "parameter": {
                            "description": "The parameter number to set on the end device.",
                            "name": "Parameter"
                        },
                        "size": {
                            "description": "The size of the parameter, either 1, 2, or 4 bytes.",
                            "name": "Size"
                        },
                        "value": {
                            "description": "The value to set for the parameter. May be an integer or byte string (e.g. \"0xFFFF\").",
                            "name": "Value"
                        }
                    },
                    "name": "Set Z-Wave Parameter"
                }
            },
            "system_health": {
                "info": {
                    "device_connected": "ISY Connected",
                    "host_reachable": "Host Reachable",
                    "last_heartbeat": "Last Heartbeat Time",
                    "websocket_status": "Event Socket Status"
                }
            }
        },
        "izone": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up iZone?"
                    }
                }
            },
            "services": {
                "airflow_max": {
                    "description": "Sets the airflow maximum percent for a zone.",
                    "fields": {
                        "airflow": {
                            "description": "Airflow percent.",
                            "name": "Percent"
                        }
                    },
                    "name": "Set maximum airflow"
                },
                "airflow_min": {
                    "description": "Sets the airflow minimum percent for a zone.",
                    "fields": {
                        "airflow": {
                            "description": "Airflow percent.",
                            "name": "Percent"
                        }
                    },
                    "name": "Set minimum airflow"
                }
            }
        },
        "jellyfin": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "juicenet": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_token": "API Token"
                        },
                        "description": "You will need the API Token from https:\/\/home.juice.net\/Manage.",
                        "title": "Connect to JuiceNet"
                    }
                }
            },
            "entity": {
                "number": {
                    "amperage_limit": {
                        "name": "Amperage limit"
                    }
                },
                "sensor": {
                    "charge_time": {
                        "name": "Charge time"
                    },
                    "energy_added": {
                        "name": "Energy added"
                    }
                },
                "switch": {
                    "charge_now": {
                        "name": "Charge now"
                    }
                }
            }
        },
        "justnimbus": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "client_id": "Client ID"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "drink_flow": {
                        "name": "Drink flow"
                    },
                    "error_code": {
                        "name": "Error code"
                    },
                    "pump_flow": {
                        "name": "Pump flow"
                    },
                    "pump_hours": {
                        "name": "Pump hours"
                    },
                    "pump_pressure": {
                        "name": "Pump pressure"
                    },
                    "pump_starts": {
                        "name": "Pump starts"
                    },
                    "reservoir_content": {
                        "name": "Reservoir content"
                    },
                    "reservoir_content_max": {
                        "name": "Maximum reservoir content"
                    },
                    "reservoir_temperature": {
                        "name": "Reservoir temperature"
                    },
                    "total_replenished": {
                        "name": "Total replenished"
                    },
                    "total_saved": {
                        "name": "Total saved"
                    },
                    "total_use": {
                        "name": "Total use"
                    }
                }
            }
        },
        "jvc_projector": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_host": "Invalid hostname or IP address"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Password authentication failed",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port"
                        },
                        "data_description": {
                            "host": "IP address or hostname of projector",
                            "password": "Optional password if projector is configured for one",
                            "port": "IP port of projector (default is 20554)"
                        }
                    }
                }
            }
        },
        "kaleidescape": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "unknown": "Unexpected error",
                    "unsupported": "Unsupported device"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unsupported": "Unsupported device"
                },
                "flow_title": "{model} ({name})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up the {model} player named {name}?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "cinemascape_mask": {
                        "name": "Cinemascape mask"
                    },
                    "cinemascape_mode": {
                        "name": "Cinemascape mode"
                    },
                    "media_location": {
                        "name": "Media location"
                    },
                    "play_speed": {
                        "name": "Play speed"
                    },
                    "play_status": {
                        "name": "Play status"
                    },
                    "screen_mask_bottom_mask_abs": {
                        "name": "Screen mask bottom mask absolute"
                    },
                    "screen_mask_bottom_trim_rel": {
                        "name": "Screen mask bottom trim relative"
                    },
                    "screen_mask_conservative_ratio": {
                        "name": "Screen mask conservative ratio"
                    },
                    "screen_mask_ratio": {
                        "name": "Screen mask ratio"
                    },
                    "screen_mask_top_mask_abs": {
                        "name": "Screen mask top mask absolute"
                    },
                    "screen_mask_top_trim_rel": {
                        "name": "Screen mask top trim relative"
                    },
                    "video_color_depth": {
                        "name": "Video color depth"
                    },
                    "video_color_eotf": {
                        "name": "Video color EOTF"
                    },
                    "video_color_sampling": {
                        "name": "Video color sampling"
                    },
                    "video_color_space": {
                        "name": "Video color space"
                    },
                    "video_mode": {
                        "name": "Video mode"
                    }
                }
            }
        },
        "keba": {
            "services": {
                "authorize": {
                    "description": "Authorizes a charging process with the predefined RFID tag of the configuration file.",
                    "name": "Authorize"
                },
                "deauthorize": {
                    "description": "Deauthorizes the running charging process with the predefined RFID tag of the configuration file.",
                    "name": "Deauthorize"
                },
                "disable": {
                    "description": "Stops the charging process if charging station is authorized.",
                    "name": "Disable"
                },
                "enable": {
                    "description": "Starts a charging process if charging station is authorized.",
                    "name": "Enable"
                },
                "request_data": {
                    "description": "Requesta new data from the charging station.",
                    "name": "Request data"
                },
                "set_current": {
                    "description": "Sets the maximum current for charging processes.",
                    "fields": {
                        "current": {
                            "description": "The maximum current used for the charging process. The value is depending on the DIP-switch settings and the used cable of the charging station.",
                            "name": "Current"
                        }
                    },
                    "name": "Set current"
                },
                "set_energy": {
                    "description": "Sets the energy target after which the charging process stops.",
                    "fields": {
                        "energy": {
                            "description": "The energy target to stop charging. Setting 0 disables the limit.",
                            "name": "Energy"
                        }
                    },
                    "name": "Set energy"
                },
                "set_failsafe": {
                    "description": "Sets the failsafe mode of the charging station. If all parameters are 0, the failsafe mode will be disabled.",
                    "fields": {
                        "failsafe_fallback": {
                            "description": "Fallback current to be set after timeout.",
                            "name": "Failsafe fallback"
                        },
                        "failsafe_persist": {
                            "description": "If failsafe_persist is 0, the failsafe option is only until charging station reboot. If failsafe_persist is 1, the failsafe option will survive a reboot.",
                            "name": "Failsafe persist"
                        },
                        "failsafe_timeout": {
                            "description": "Timeout after which the failsafe mode is triggered, if set_current was not executed during this time.",
                            "name": "Failsafe timeout"
                        }
                    },
                    "name": "Set failsafe"
                }
            }
        },
        "keenetic_ndms2": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "no_udn": "SSDP discovery info has no UDN",
                    "not_keenetic_ndms2": "Discovered item is not a Keenetic router"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "Set up Keenetic NDMS2 Router"
                    }
                }
            },
            "options": {
                "step": {
                    "user": {
                        "data": {
                            "consider_home": "Consider home interval",
                            "include_arp": "Use ARP data (ignored if hotspot data used)",
                            "include_associated": "Use WiFi AP associations data (ignored if hotspot data used)",
                            "interfaces": "Choose interfaces to scan",
                            "scan_interval": "Scan interval",
                            "try_hotspot": "Use 'ip hotspot' data (most accurate)"
                        }
                    }
                }
            }
        },
        "kef": {
            "services": {
                "set_desk_db": {
                    "description": "Sets the \"Desk mode\" slider of the speaker in dB.",
                    "fields": {
                        "db_value": {
                            "description": "Value of the slider.",
                            "name": "DB value"
                        }
                    },
                    "name": "Set desk dB"
                },
                "set_high_hz": {
                    "description": "Sets the \"High-pass mode\" slider of the speaker in Hz.",
                    "fields": {
                        "hz_value": {
                            "description": "Value of the slider.",
                            "name": "Hertz value"
                        }
                    },
                    "name": "Set high hertz"
                },
                "set_low_hz": {
                    "description": "Set the \"Sub out low-pass frequency\" slider of the speaker in Hz.",
                    "fields": {
                        "hz_value": {
                            "description": "Value of the slider.",
                            "name": "Hertz value"
                        }
                    },
                    "name": "Sets low Hertz"
                },
                "set_mode": {
                    "description": "Sets the mode of the speaker.",
                    "fields": {
                        "bass_extension": {
                            "description": "Bass extension.",
                            "name": "Base extension"
                        },
                        "desk_mode": {
                            "description": "Desk mode.",
                            "name": "Desk mode"
                        },
                        "high_pass": {
                            "description": "High-pass mode\".",
                            "name": "High pass"
                        },
                        "phase_correction": {
                            "description": "Phase correction.",
                            "name": "Phase correction"
                        },
                        "sub_polarity": {
                            "description": "Sub polarity.",
                            "name": "Subwoofer polarity"
                        },
                        "wall_mode": {
                            "description": "Wall mode.",
                            "name": "Wall mode"
                        }
                    },
                    "name": "Set mode"
                },
                "set_sub_db": {
                    "description": "Set the \"Sub gain\" slider of the speaker in dB.",
                    "fields": {
                        "db_value": {
                            "description": "Value of the slider.",
                            "name": "DB value"
                        }
                    },
                    "name": "Sets subwoofer dB"
                },
                "set_treble_db": {
                    "description": "Sets desk the \"Treble trim\" slider of the speaker in dB.",
                    "fields": {
                        "db_value": {
                            "description": "Value of the slider.",
                            "name": "DB value"
                        }
                    },
                    "name": "Set treble dB"
                },
                "set_wall_db": {
                    "description": "Sets the \"Wall mode\" slider of the speaker in dB.",
                    "fields": {
                        "db_value": {
                            "description": "Value of the slider.",
                            "name": "DB value"
                        }
                    },
                    "name": "Set wall dB"
                },
                "update_dsp": {
                    "description": "Updates all DSP settings.",
                    "name": "Update DSP"
                }
            }
        },
        "kegtron": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "keyboard": {
            "services": {
                "media_next_track": {
                    "description": "Simulates a key press of the \"Media Next Track\" button on Home Assistant's host machine.",
                    "name": "Media next track"
                },
                "media_play_pause": {
                    "description": "Simulates a key press of the \"Media Play\/Pause\" button on Home Assistant's host machine.",
                    "name": "Media play\/pause"
                },
                "media_prev_track": {
                    "description": "Simulates a key press of the \"Media Previous Track\" button on Home Assistant's host machine.",
                    "name": "Media previous track"
                },
                "volume_down": {
                    "description": "Simulates a key press of the \"Volume Down\" button on Home Assistant's host machine.",
                    "name": "Volume down"
                },
                "volume_mute": {
                    "description": "Simulates a key press of the \"Volume Mute\" button on Home Assistant's host machine.",
                    "name": "Volume mute"
                },
                "volume_up": {
                    "description": "Simulates a key press of the \"Volume Up\" button on Home Assistant's host machine.",
                    "name": "Volume up"
                }
            }
        },
        "keymitt_ble": {
            "config": {
                "abort": {
                    "already_configured_device": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "linking": "Failed to pair, please try again. Is the MicroBot in pairing mode?"
                },
                "flow_title": "{name}",
                "step": {
                    "init": {
                        "data": {
                            "address": "Device address",
                            "name": "Name"
                        },
                        "title": "Set up MicroBot device"
                    },
                    "link": {
                        "description": "Press the button on the MicroBot Push when the LED is solid pink or green to register with Home Assistant.",
                        "title": "Pairing"
                    }
                }
            },
            "entity": {
                "switch": {
                    "push": {
                        "name": "Push"
                    }
                }
            },
            "services": {
                "calibrate": {
                    "description": "Calibration - Set depth, press & hold duration, and operation mode. Warning - this will send a push command to the device.",
                    "fields": {
                        "depth": {
                            "description": "Depth in percent.",
                            "name": "Depth"
                        },
                        "duration": {
                            "description": "Duration in seconds.",
                            "name": "Duration"
                        },
                        "entity_id": {
                            "description": "Name of entity to calibrate.",
                            "name": "Entity"
                        },
                        "mode": {
                            "description": "Normal | invert | toggle.",
                            "name": "Mode"
                        }
                    },
                    "name": "Calibrate"
                }
            }
        },
        "kitchen_sink": {
            "issues": {
                "bad_psu": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Press SUBMIT to confirm the power supply has been replaced",
                                "title": "The power supply needs to be replaced"
                            }
                        }
                    },
                    "title": "The power supply is not stable"
                },
                "cold_tea": {
                    "fix_flow": {
                        "abort": {
                            "not_tea_time": "Can not re-heat the tea at this time"
                        }
                    },
                    "title": "The tea is cold"
                },
                "out_of_blinker_fluid": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Press SUBMIT when blinker fluid has been refilled",
                                "title": "Blinker fluid needs to be refilled"
                            }
                        }
                    },
                    "title": "The blinker fluid is empty and needs to be refilled"
                },
                "transmogrifier_deprecated": {
                    "description": "The transmogrifier component is now deprecated due to the lack of local control available in the new API",
                    "title": "The transmogrifier component is deprecated"
                },
                "unfixable_problem": {
                    "description": "This issue is never going to give up.",
                    "title": "This is not a fixable problem"
                }
            }
        },
        "kmtronic": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "reverse": "Reverse switch logic (use NC)"
                        }
                    }
                }
            }
        },
        "knx": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_backbone_key": "Invalid backbone key. 32 hexadecimal numbers expected.",
                    "invalid_individual_address": "Value does not match pattern for KNX individual address.\n'area.line.device'",
                    "invalid_ip_address": "Invalid IPv4 address.",
                    "keyfile_invalid_signature": "The password to decrypt the `.knxkeys` file is wrong.",
                    "keyfile_no_backbone_key": "The `.knxkeys` file does not contain a backbone key for secure routing.",
                    "keyfile_no_tunnel_for_host": "The `.knxkeys` file does not contain credentials for host `{host}`.",
                    "keyfile_not_found": "The specified `.knxkeys` file was not found in the path config\/.storage\/knx\/",
                    "no_router_discovered": "No KNXnet\/IP router was discovered on the network.",
                    "no_tunnel_discovered": "Could not find a KNX tunneling server on your network.",
                    "unsupported_tunnel_type": "Selected tunnelling type not supported by gateway."
                },
                "step": {
                    "connection_type": {
                        "data": {
                            "connection_type": "KNX Connection Type"
                        },
                        "description": "Please enter the connection type we should use for your KNX connection. \n AUTOMATIC - The integration takes care of the connectivity to your KNX Bus by performing a gateway scan. \n TUNNELING - The integration will connect to your KNX bus via tunneling. \n ROUTING - The integration will connect to your KNX bus via routing.",
                        "title": "KNX connection"
                    },
                    "knxkeys_tunnel_select": {
                        "data": {
                            "user_id": "`Automatic` will use the first free tunnel endpoint."
                        },
                        "description": "Select the tunnel used for connection.",
                        "title": "Tunnel endpoint"
                    },
                    "manual_tunnel": {
                        "data": {
                            "host": "Host",
                            "local_ip": "Local IP interface",
                            "port": "Port",
                            "route_back": "Route back \/ NAT mode",
                            "tunneling_type": "KNX Tunneling Type"
                        },
                        "data_description": {
                            "host": "IP address or hostname of the KNX\/IP tunneling device.",
                            "local_ip": "Local IP or interface name used for the connection from Home Assistant. Leave blank to use auto-discovery.",
                            "port": "Port of the KNX\/IP tunneling device.",
                            "route_back": "Enable if your KNXnet\/IP tunneling server is behind NAT. Only applies for UDP connections."
                        },
                        "description": "Please enter the connection information of your tunneling device.",
                        "title": "Tunnel settings"
                    },
                    "routing": {
                        "data": {
                            "individual_address": "Individual address",
                            "local_ip": "Local IP interface",
                            "multicast_group": "Multicast group",
                            "multicast_port": "Multicast port",
                            "routing_secure": "Use KNX IP Secure"
                        },
                        "data_description": {
                            "individual_address": "KNX address to be used by Home Assistant, e.g. `0.0.4`",
                            "local_ip": "Local IP or interface name used for the connection from Home Assistant. Leave blank to use auto-discovery."
                        },
                        "description": "Please configure the routing options.",
                        "title": "Routing"
                    },
                    "secure_key_source": {
                        "description": "Select how you want to configure KNX\/IP Secure.",
                        "menu_options": {
                            "secure_knxkeys": "Use a `.knxkeys` file containing IP secure keys",
                            "secure_routing_manual": "Configure IP secure backbone key manually",
                            "secure_tunnel_manual": "Configure IP secure credentials manually"
                        },
                        "title": "KNX IP-Secure"
                    },
                    "secure_knxkeys": {
                        "data": {
                            "knxkeys_file": "Keyring file",
                            "knxkeys_password": "The password to decrypt the `.knxkeys` file"
                        },
                        "data_description": {
                            "knxkeys_password": "This was set when exporting the file from ETS."
                        },
                        "description": "Please select a `.knxkeys` file to import.",
                        "title": "Import KNX Keyring"
                    },
                    "secure_routing_manual": {
                        "data": {
                            "backbone_key": "Backbone key",
                            "sync_latency_tolerance": "Network latency tolerance"
                        },
                        "data_description": {
                            "backbone_key": "Can be seen in the 'Security' report of an ETS project. Eg. '00112233445566778899AABBCCDDEEFF'",
                            "sync_latency_tolerance": "Default is 1000."
                        },
                        "description": "Please enter your IP secure information.",
                        "title": "Secure routing"
                    },
                    "secure_tunnel_manual": {
                        "data": {
                            "device_authentication": "Device authentication password",
                            "user_id": "User ID",
                            "user_password": "User password"
                        },
                        "data_description": {
                            "device_authentication": "This is set in the 'IP' panel of the interface in ETS.",
                            "user_id": "This is often tunnel number +1. So 'Tunnel 2' would have User-ID '3'.",
                            "user_password": "Password for the specific tunnel connection set in the 'Properties' panel of the tunnel in ETS."
                        },
                        "description": "Please enter your IP secure information.",
                        "title": "Secure tunnelling"
                    },
                    "tunnel": {
                        "data": {
                            "gateway": "KNX Tunnel Connection"
                        },
                        "description": "Please select a gateway from the list.",
                        "title": "Tunnel"
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "telegram": "Telegram sent or received"
                }
            },
            "entity": {
                "sensor": {
                    "connected_since": {
                        "name": "Connection established"
                    },
                    "connection_type": {
                        "name": "Connection type"
                    },
                    "individual_address": {
                        "name": "Individual address"
                    },
                    "telegram_count": {
                        "name": "Telegrams"
                    },
                    "telegrams_incoming": {
                        "name": "Incoming telegrams"
                    },
                    "telegrams_incoming_error": {
                        "name": "Incoming telegram errors"
                    },
                    "telegrams_outgoing": {
                        "name": "Outgoing telegrams"
                    },
                    "telegrams_outgoing_error": {
                        "name": "Outgoing telegram errors"
                    }
                }
            },
            "options": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_backbone_key": "Invalid backbone key. 32 hexadecimal numbers expected.",
                    "invalid_individual_address": "Value does not match pattern for KNX individual address.\n'area.line.device'",
                    "invalid_ip_address": "Invalid IPv4 address.",
                    "keyfile_invalid_signature": "The password to decrypt the `.knxkeys` file is wrong.",
                    "keyfile_no_backbone_key": "The `.knxkeys` file does not contain a backbone key for secure routing.",
                    "keyfile_no_tunnel_for_host": "The `.knxkeys` file does not contain credentials for host `{host}`.",
                    "keyfile_not_found": "The specified `.knxkeys` file was not found in the path config\/.storage\/knx\/",
                    "no_router_discovered": "No KNXnet\/IP router was discovered on the network.",
                    "no_tunnel_discovered": "Could not find a KNX tunneling server on your network.",
                    "unsupported_tunnel_type": "Selected tunnelling type not supported by gateway."
                },
                "step": {
                    "communication_settings": {
                        "data": {
                            "rate_limit": "Rate limit",
                            "state_updater": "State updater",
                            "telegram_log_size": "Telegram history limit"
                        },
                        "data_description": {
                            "rate_limit": "Maximum outgoing telegrams per second.\n`0` to disable limit. Recommended: 0 or 20 to 40",
                            "state_updater": "Set default for reading states from the KNX Bus. When disabled, Home Assistant will not actively retrieve entity states from the KNX Bus. Can be overridden by `sync_state` entity options.",
                            "telegram_log_size": "Telegrams to keep in memory for KNX panel group monitor. Maximum: {telegram_log_size_max}"
                        },
                        "title": "Communication settings"
                    },
                    "connection_type": {
                        "data": {
                            "connection_type": "KNX Connection Type"
                        },
                        "description": "Please enter the connection type we should use for your KNX connection. \n AUTOMATIC - The integration takes care of the connectivity to your KNX Bus by performing a gateway scan. \n TUNNELING - The integration will connect to your KNX bus via tunneling. \n ROUTING - The integration will connect to your KNX bus via routing.",
                        "title": "KNX connection"
                    },
                    "knxkeys_tunnel_select": {
                        "data": {
                            "user_id": "`Automatic` will use the first free tunnel endpoint."
                        },
                        "description": "Select the tunnel used for connection.",
                        "title": "Tunnel endpoint"
                    },
                    "manual_tunnel": {
                        "data": {
                            "host": "Host",
                            "local_ip": "Local IP interface",
                            "port": "Port",
                            "route_back": "Route back \/ NAT mode",
                            "tunneling_type": "KNX Tunneling Type"
                        },
                        "data_description": {
                            "host": "IP address or hostname of the KNX\/IP tunneling device.",
                            "local_ip": "Local IP or interface name used for the connection from Home Assistant. Leave blank to use auto-discovery.",
                            "port": "Port of the KNX\/IP tunneling device.",
                            "route_back": "Enable if your KNXnet\/IP tunneling server is behind NAT. Only applies for UDP connections."
                        },
                        "description": "Please enter the connection information of your tunneling device.",
                        "title": "Tunnel settings"
                    },
                    "options_init": {
                        "menu_options": {
                            "communication_settings": "Communication settings",
                            "connection_type": "Configure KNX interface",
                            "secure_knxkeys": "Import a `.knxkeys` file"
                        },
                        "title": "KNX Settings"
                    },
                    "routing": {
                        "data": {
                            "individual_address": "Individual address",
                            "local_ip": "Local IP interface",
                            "multicast_group": "Multicast group",
                            "multicast_port": "Multicast port",
                            "routing_secure": "Use KNX IP Secure"
                        },
                        "data_description": {
                            "individual_address": "KNX address to be used by Home Assistant, e.g. `0.0.4`",
                            "local_ip": "Local IP or interface name used for the connection from Home Assistant. Leave blank to use auto-discovery."
                        },
                        "description": "Please configure the routing options.",
                        "title": "Routing"
                    },
                    "secure_key_source": {
                        "description": "Select how you want to configure KNX\/IP Secure.",
                        "menu_options": {
                            "secure_knxkeys": "Use a `.knxkeys` file containing IP secure keys",
                            "secure_routing_manual": "Configure IP secure backbone key manually",
                            "secure_tunnel_manual": "Configure IP secure credentials manually"
                        },
                        "title": "KNX IP-Secure"
                    },
                    "secure_knxkeys": {
                        "data": {
                            "knxkeys_file": "Keyring file",
                            "knxkeys_password": "The password to decrypt the `.knxkeys` file"
                        },
                        "data_description": {
                            "knxkeys_password": "This was set when exporting the file from ETS."
                        },
                        "description": "Please select a `.knxkeys` file to import.",
                        "title": "Import KNX Keyring"
                    },
                    "secure_routing_manual": {
                        "data": {
                            "backbone_key": "Backbone key",
                            "sync_latency_tolerance": "Network latency tolerance"
                        },
                        "data_description": {
                            "backbone_key": "Can be seen in the 'Security' report of an ETS project. Eg. '00112233445566778899AABBCCDDEEFF'",
                            "sync_latency_tolerance": "Default is 1000."
                        },
                        "description": "Please enter your IP secure information.",
                        "title": "Secure routing"
                    },
                    "secure_tunnel_manual": {
                        "data": {
                            "device_authentication": "Device authentication password",
                            "user_id": "User ID",
                            "user_password": "User password"
                        },
                        "data_description": {
                            "device_authentication": "This is set in the 'IP' panel of the interface in ETS.",
                            "user_id": "This is often tunnel number +1. So 'Tunnel 2' would have User-ID '3'.",
                            "user_password": "Password for the specific tunnel connection set in the 'Properties' panel of the tunnel in ETS."
                        },
                        "description": "Please enter your IP secure information.",
                        "title": "Secure tunnelling"
                    },
                    "tunnel": {
                        "data": {
                            "gateway": "KNX Tunnel Connection"
                        },
                        "description": "Please select a gateway from the list.",
                        "title": "Tunnel"
                    }
                }
            },
            "services": {
                "event_register": {
                    "description": "Add or remove group addresses to knx_event filter for triggering `knx_event`s. Only addresses added with this service can be removed.",
                    "fields": {
                        "address": {
                            "description": "Group address(es) that shall be added or removed. Lists are allowed.",
                            "name": "Group address"
                        },
                        "remove": {
                            "description": "If `True` the group address(es) will be removed.",
                            "name": "Remove event registration"
                        },
                        "type": {
                            "description": "If set, the payload will be decoded as given DPT in the event data `value` key. KNX sensor types are valid values (see https:\/\/www.home-assistant.io\/integrations\/knx\/#value-types).",
                            "name": "Value type"
                        }
                    },
                    "name": "Registers knx_event"
                },
                "exposure_register": {
                    "description": "Adds or remove exposures to KNX bus. Only exposures added with this service can be removed.",
                    "fields": {
                        "address": {
                            "description": "Group address state or attribute updates will be sent to. GroupValueRead requests will be answered. Per address only one exposure can be registered.",
                            "name": "Group address"
                        },
                        "attribute": {
                            "description": "Attribute of the entity that shall be sent to the KNX bus. If not set the state will be sent. Eg. for a light the state is eigther “on” or “off” - with attribute you can expose its “brightness”.",
                            "name": "Entity attribute"
                        },
                        "default": {
                            "description": "Default value to send to the bus if the state or attribute value is None. Eg. a light with state “off” has no brightness attribute so a default value of 0 could be used. If not set (or None) no value would be sent to the bus and a GroupReadRequest to the address would return the last known value.",
                            "name": "Default value"
                        },
                        "entity_id": {
                            "description": "Entity id whose state or attribute shall be exposed.",
                            "name": "Entity"
                        },
                        "remove": {
                            "description": "If `True` the exposure will be removed. Only `address` is required for removal.",
                            "name": "Remove exposure"
                        },
                        "type": {
                            "description": "Telegrams will be encoded as given DPT. 'binary' and all KNX sensor types are valid values (see https:\/\/www.home-assistant.io\/integrations\/knx\/#value-types).",
                            "name": "Value type"
                        }
                    },
                    "name": "Expose to KNX bus"
                },
                "read": {
                    "description": "Send GroupValueRead requests to the KNX bus. Response can be used from `knx_event` and will be processed in KNX entities.",
                    "fields": {
                        "address": {
                            "description": "Group address(es) to send read request to. Lists will read multiple group addresses.",
                            "name": "Group address"
                        }
                    },
                    "name": "Reads from KNX bus"
                },
                "reload": {
                    "description": "Reloads the KNX integration.",
                    "name": "Reload"
                },
                "send": {
                    "description": "Sends arbitrary data directly to the KNX bus.",
                    "fields": {
                        "address": {
                            "description": "Group address(es) to write to. Lists will send to multiple group addresses successively.",
                            "name": "Group address"
                        },
                        "payload": {
                            "description": "Payload to send to the bus. Integers are treated as DPT 1\/2\/3 payloads. For DPTs > 6 bits send a list. Each value represents 1 octet (0-255). Pad with 0 to DPT byte length.",
                            "name": "Payload"
                        },
                        "response": {
                            "description": "If set to `True`, the telegram will be sent as a `GroupValueResponse` instead of a `GroupValueWrite`.",
                            "name": "Send as Response"
                        },
                        "type": {
                            "description": "If set, the payload will not be sent as raw bytes, but encoded as given DPT. KNX sensor types are valid values (see https:\/\/www.home-assistant.io\/integrations\/knx\/#value-types).",
                            "name": "Value type"
                        }
                    },
                    "name": "Send to KNX bus"
                }
            }
        },
        "kodi": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_uuid": "Kodi instance does not have a unique id. This is most likely due to an old Kodi version (17.x or below). You can configure the integration manually or upgrade to a more recent Kodi version.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "credentials": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter your Kodi user name and password. These can be found in System\/Settings\/Network\/Services."
                    },
                    "discovery_confirm": {
                        "description": "Do you want to add Kodi (`{name}`) to Home Assistant?",
                        "title": "Discovered Kodi"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate"
                        },
                        "description": "Kodi connection information. Please make sure to enable \"Allow control of Kodi via HTTP\" in System\/Settings\/Network\/Services."
                    },
                    "ws_port": {
                        "data": {
                            "ws_port": "Port"
                        },
                        "description": "The WebSocket port (sometimes called TCP port in Kodi). In order to connect over WebSocket, you need to enable \"Allow programs ... to control Kodi\" in System\/Settings\/Network\/Services. If WebSocket is not enabled, remove the port and leave empty."
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "turn_off": "{entity_name} turned off",
                    "turn_on": "{entity_name} turned on"
                }
            },
            "services": {
                "add_to_playlist": {
                    "description": "Adds music to the default playlist (i.e. playlistid=0).",
                    "fields": {
                        "artist_name": {
                            "description": "Optional artist name for filtering media.",
                            "name": "Artist name"
                        },
                        "media_id": {
                            "description": "Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library.",
                            "name": "Media ID"
                        },
                        "media_name": {
                            "description": "Optional media name for filtering media. Can be 'ALL' when `media_type` is 'ALBUM' and `artist_name` is specified, to add all songs from one artist.",
                            "name": "Media name"
                        },
                        "media_type": {
                            "description": "Media type identifier. It must be one of SONG or ALBUM.",
                            "name": "Media type"
                        }
                    },
                    "name": "Add to playlist"
                },
                "call_method": {
                    "description": "Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.",
                    "fields": {
                        "method": {
                            "description": "Name of the Kodi JSONRPC API method to be called.",
                            "name": "Method"
                        }
                    },
                    "name": "Call method"
                }
            }
        },
        "konnected": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "not_konn_panel": "Not a recognized Konnected.io device",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "confirm": {
                        "description": "Model: {model}\nID: {id}\nHost: {host}\nPort: {port}\n\nYou can configure the IO and panel behavior in the Konnected Alarm Panel settings.",
                        "title": "Konnected Device Ready"
                    },
                    "import_confirm": {
                        "description": "A Konnected Alarm Panel with ID {id} has been discovered in configuration.yaml. This flow will allow you to import it into a config entry.",
                        "title": "Import Konnected Device"
                    },
                    "user": {
                        "data": {
                            "host": "IP Address",
                            "port": "Port"
                        },
                        "description": "Please enter the host information for your Konnected Panel."
                    }
                }
            },
            "options": {
                "abort": {
                    "not_konn_panel": "Not a recognized Konnected.io device"
                },
                "error": {
                    "bad_host": "Invalid Override API host URL"
                },
                "step": {
                    "options_binary": {
                        "data": {
                            "inverse": "Invert the open\/close state",
                            "name": "Name",
                            "type": "Binary Sensor Type"
                        },
                        "description": "{zone} options",
                        "title": "Configure Binary Sensor"
                    },
                    "options_digital": {
                        "data": {
                            "name": "Name",
                            "poll_interval": "Poll Interval (minutes)",
                            "type": "Sensor Type"
                        },
                        "description": "{zone} options",
                        "title": "Configure Digital Sensor"
                    },
                    "options_io": {
                        "data": {
                            "1": "Zone 1",
                            "2": "Zone 2",
                            "3": "Zone 3",
                            "4": "Zone 4",
                            "5": "Zone 5",
                            "6": "Zone 6",
                            "7": "Zone 7",
                            "out": "OUT"
                        },
                        "description": "Discovered a {model} at {host}. Select the base configuration of each I\/O below - depending on the I\/O it may allow for binary sensors (open\/close contacts), digital sensors (dht and ds18b20), or switchable outputs. You'll be able to configure detailed options in the next steps.",
                        "title": "Configure I\/O"
                    },
                    "options_io_ext": {
                        "data": {
                            "10": "Zone 10",
                            "11": "Zone 11",
                            "12": "Zone 12",
                            "8": "Zone 8",
                            "9": "Zone 9",
                            "alarm1": "ALARM1",
                            "alarm2_out2": "OUT2\/ALARM2",
                            "out1": "OUT1"
                        },
                        "description": "Select the configuration of the remaining I\/O below.  You'll be able to configure detailed options in the next steps.",
                        "title": "Configure Extended I\/O"
                    },
                    "options_misc": {
                        "data": {
                            "api_host": "Override API host URL",
                            "blink": "Blink panel LED on when sending state change",
                            "discovery": "Respond to discovery requests on your network",
                            "override_api_host": "Override default Home Assistant API host panel URL"
                        },
                        "description": "Please select the desired behavior for your panel",
                        "title": "Configure Misc"
                    },
                    "options_switch": {
                        "data": {
                            "activation": "Output when on",
                            "momentary": "Pulse duration (ms)",
                            "more_states": "Configure additional states for this zone",
                            "name": "Name",
                            "pause": "Pause between pulses (ms)",
                            "repeat": "Times to repeat (-1=infinite)"
                        },
                        "description": "{zone} options: state {state}",
                        "title": "Configure Switchable Output"
                    }
                }
            }
        },
        "kostal_plenticore": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password"
                        }
                    }
                }
            }
        },
        "kraken": {
            "config": {
                "abort": {
                    "already_configured": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "ask": {
                        "name": "Ask"
                    },
                    "ask_volume": {
                        "name": "Ask volume"
                    },
                    "bid": {
                        "name": "Bid"
                    },
                    "bid_volume": {
                        "name": "Bid volume"
                    },
                    "high_last_24h": {
                        "name": "High last 24h"
                    },
                    "high_today": {
                        "name": "High today"
                    },
                    "last_trade_closed": {
                        "name": "Last trade closed"
                    },
                    "low_last_24h": {
                        "name": "Low last 24h"
                    },
                    "low_today": {
                        "name": "Low today"
                    },
                    "number_of_trades_last_24h": {
                        "name": "Number of trades last 24h"
                    },
                    "number_of_trades_today": {
                        "name": "Number of trades today"
                    },
                    "opening_price_today": {
                        "name": "Opening price today"
                    },
                    "volume_last_24h": {
                        "name": "Volume last 24h"
                    },
                    "volume_today": {
                        "name": "Volume today"
                    },
                    "volume_weighted_average_last_24h": {
                        "name": "Volume weighted average last 24h"
                    },
                    "volume_weighted_average_today": {
                        "name": "Volume weighted average today"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Update interval",
                            "tracked_asset_pairs": "Tracked Asset Pairs"
                        }
                    }
                }
            }
        },
        "kulersky": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            }
        },
        "lacrosse_view": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "no_locations": "No locations found",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "barometric_pressure": {
                        "name": "Barometric pressure"
                    },
                    "feels_like": {
                        "name": "Feels like"
                    },
                    "flex": {
                        "name": "Flex"
                    },
                    "heat_index": {
                        "name": "Heat index"
                    },
                    "wet_dry": {
                        "name": "Wet\/Dry"
                    },
                    "wind_chill": {
                        "name": "Wind chill"
                    },
                    "wind_heading": {
                        "name": "Wind heading"
                    }
                }
            }
        },
        "lametric": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "invalid_discovery_info": "Invalid discovery information received",
                    "link_local_address": "Link local addresses are not supported",
                    "missing_configuration": "The LaMetric integration is not configured. Please follow the documentation.",
                    "no_devices": "The authorized user has no LaMetric devices",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "reauth_device_not_found": "The device you are trying to re-authenticate is not found in this LaMetric account",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "choice_enter_manual_or_fetch_cloud": {
                        "description": "A LaMetric device can be set up in Home Assistant in two different ways.\n\nYou can enter all device information and API tokens yourself, or Home Asssistant can import them from your LaMetric.com account.",
                        "menu_options": {
                            "manual_entry": "Enter manually",
                            "pick_implementation": "Import from LaMetric.com (recommended)"
                        }
                    },
                    "manual_entry": {
                        "data": {
                            "api_key": "API Key",
                            "host": "Host"
                        },
                        "data_description": {
                            "api_key": "You can find this API key in [devices page in your LaMetric developer account](https:\/\/developer.lametric.com\/user\/devices).",
                            "host": "The IP address or hostname of your LaMetric TIME on your network."
                        }
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "user_cloud_select_device": {
                        "data": {
                            "device": "Select the LaMetric device to add"
                        }
                    }
                }
            },
            "entity": {
                "button": {
                    "app_next": {
                        "name": "Next app"
                    },
                    "app_previous": {
                        "name": "Previous app"
                    },
                    "dismiss_all": {
                        "name": "Dismiss all notifications"
                    },
                    "dismiss_current": {
                        "name": "Dismiss current notification"
                    }
                },
                "select": {
                    "brightness_mode": {
                        "name": "Brightness mode",
                        "state": {
                            "auto": "Automatic",
                            "manual": "Manual"
                        }
                    }
                },
                "sensor": {
                    "rssi": {
                        "name": "Wi-Fi signal"
                    }
                },
                "switch": {
                    "bluetooth": {
                        "name": "Bluetooth"
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "lametric__brightness_mode": {
                            "auto": "Automatic",
                            "manual": "Manual"
                        }
                    }
                }
            },
            "selector": {
                "icon_type": {
                    "options": {
                        "alert": "Alert",
                        "info": "Info",
                        "none": "None"
                    }
                },
                "priority": {
                    "options": {
                        "critical": "Critical",
                        "info": "Info",
                        "warning": "Warning"
                    }
                },
                "sound": {
                    "options": {
                        "alarm1": "Alarm 1",
                        "alarm10": "Alarm 10",
                        "alarm11": "Alarm 11",
                        "alarm12": "Alarm 12",
                        "alarm13": "Alarm 13",
                        "alarm2": "Alarm 2",
                        "alarm3": "Alarm 3",
                        "alarm4": "Alarm 4",
                        "alarm5": "Alarm 5",
                        "alarm6": "Alarm 6",
                        "alarm7": "Alarm 7",
                        "alarm8": "Alarm 8",
                        "alarm9": "Alarm 9",
                        "bicycle": "Bicycle",
                        "car": "Car",
                        "cash": "Cash",
                        "cat": "Cat",
                        "dog": "Dog 1",
                        "dog2": "Dog 2",
                        "energy": "Energy",
                        "knock-knock": "Knock knock",
                        "letter_email": "Letter email",
                        "lose1": "Lose 1",
                        "lose2": "Lose 2",
                        "negative1": "Negative 1",
                        "negative2": "Negative 2",
                        "negative3": "Negative 3",
                        "negative4": "Negative 4",
                        "negative5": "Negative 5",
                        "notification": "Notification 1",
                        "notification2": "Notification 2",
                        "notification3": "Notification 3",
                        "notification4": "Notification 4",
                        "open_door": "Open door",
                        "positive1": "Positive 1",
                        "positive2": "Positive 2",
                        "positive3": "Positive 3",
                        "positive4": "Positive 4",
                        "positive5": "Positive 5",
                        "positive6": "Positive 6",
                        "statistic": "Statistic",
                        "thunder": "Thunder",
                        "water1": "Water 1",
                        "water2": "Water 2",
                        "win": "Win 1",
                        "win2": "Win 2",
                        "wind": "Wind",
                        "wind_short": "Wind short"
                    }
                }
            },
            "services": {
                "chart": {
                    "description": "Displays a chart on a LaMetric device.",
                    "fields": {
                        "cycles": {
                            "description": "The number of times to display the message. When set to 0, the message will be displayed until dismissed.",
                            "name": "Cycles"
                        },
                        "data": {
                            "description": "The list of data points in the chart.",
                            "name": "Data"
                        },
                        "device_id": {
                            "description": "The LaMetric device to display the chart on.",
                            "name": "Device"
                        },
                        "icon_type": {
                            "description": "The type of icon to display, indicating the nature of the notification.",
                            "name": "Icon type"
                        },
                        "priority": {
                            "description": "The priority of the notification. When the device is running in screensaver or kiosk mode, only critical priority notifications will be accepted.",
                            "name": "Priority"
                        },
                        "sound": {
                            "description": "The notification sound to play.",
                            "name": "Sound"
                        }
                    },
                    "name": "Display a chart"
                },
                "message": {
                    "description": "Displays a message with an optional icon on a LaMetric device.",
                    "fields": {
                        "cycles": {
                            "description": "The number of times to display the message. When set to 0, the message will be displayed until dismissed.",
                            "name": "Cycles"
                        },
                        "device_id": {
                            "description": "The LaMetric device to display the message on.",
                            "name": "Device"
                        },
                        "icon": {
                            "description": "The ID number of the icon or animation to display. List of all icons and their IDs can be found at: https:\/\/developer.lametric.com\/icons.",
                            "name": "Icon"
                        },
                        "icon_type": {
                            "description": "The type of icon to display, indicating the nature of the notification.",
                            "name": "Icon type"
                        },
                        "message": {
                            "description": "The message to display.",
                            "name": "Message"
                        },
                        "priority": {
                            "description": "The priority of the notification. When the device is running in screensaver or kiosk mode, only critical priority notifications will be accepted.",
                            "name": "Priority"
                        },
                        "sound": {
                            "description": "The notification sound to play.",
                            "name": "Sound"
                        }
                    },
                    "name": "Display a message"
                }
            }
        },
        "landisgyr_heat_meter": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "step": {
                    "setup_serial_manual_path": {
                        "data": {
                            "device": "USB Device Path"
                        }
                    },
                    "user": {
                        "data": {
                            "device": "Select device"
                        }
                    }
                }
            }
        },
        "lastfm": {
            "config": {
                "error": {
                    "invalid_account": "Invalid username",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "friends": {
                        "data": {
                            "users": "Last.fm usernames"
                        },
                        "description": "Fill in other users you want to add."
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "main_user": "Last.fm username"
                        },
                        "description": "Request an API account at {api_account_url}."
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring LastFM using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the LastFM YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The LastFM YAML configuration is being removed"
                }
            },
            "options": {
                "error": {
                    "invalid_account": "Invalid username",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "init": {
                        "data": {
                            "users": "Last.fm usernames"
                        },
                        "description": "Fill in other users you want to add."
                    }
                }
            }
        },
        "launch_library": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to configure the Launch Library?"
                    }
                }
            }
        },
        "laundrify": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_format": "Invalid format. Please specify as xxx-xxx.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "init": {
                        "data": {
                            "code": "Auth Code (xxx-xxx)"
                        },
                        "description": "Please enter your personal Auth Code that is shown in the laundrify-App."
                    },
                    "reauth_confirm": {
                        "description": "The laundrify integration needs to re-authenticate.",
                        "title": "Reauthenticate Integration"
                    }
                }
            }
        },
        "lawn_mower": {
            "entity_component": {
                "_": {
                    "name": "Lawn mower",
                    "state": {
                        "docked": "Docked",
                        "error": "Error",
                        "mowing": "Mowing",
                        "paused": "Paused"
                    }
                }
            },
            "services": {
                "dock": {
                    "description": "Stops the mowing task and returns to the dock.",
                    "name": "Return to dock"
                },
                "pause": {
                    "description": "Pauses the mowing task.",
                    "name": "Pause"
                },
                "start_mowing": {
                    "description": "Starts the mowing task.",
                    "name": "Start mowing"
                }
            },
            "title": "Lawn mower"
        },
        "lcn": {
            "device_automation": {
                "trigger_type": {
                    "codelock": "Code lock code received",
                    "fingerprint": "Fingerprint code received",
                    "send_keys": "Send keys received",
                    "transmitter": "Transmitter code received",
                    "transponder": "Transponder code received"
                }
            },
            "services": {
                "dyn_text": {
                    "description": "Sends dynamic text to LCN-GTxD displays.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "row": {
                            "description": "Text row.",
                            "name": "Row"
                        },
                        "text": {
                            "description": "Text to send (up to 60 characters encoded as UTF-8).",
                            "name": "Text"
                        }
                    },
                    "name": "Dynamic text"
                },
                "led": {
                    "description": "Sets the led state.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "led": {
                            "description": "Led.",
                            "name": "LED"
                        },
                        "state": {
                            "description": "Led state.",
                            "name": "State"
                        }
                    },
                    "name": "LED"
                },
                "lock_keys": {
                    "description": "Locks keys.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "state": {
                            "description": "Key lock states as string (1=on, 2=off, T=toggle, -=nochange).",
                            "name": "State"
                        },
                        "table": {
                            "description": "Table with keys to lock (must be A for interval).",
                            "name": "Table"
                        },
                        "time": {
                            "description": "Lock interval.",
                            "name": "Time"
                        },
                        "time_unit": {
                            "description": "Time unit of lock interval.",
                            "name": "Time unit"
                        }
                    },
                    "name": "Lock keys"
                },
                "lock_regulator": {
                    "description": "Locks a regulator setpoint.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "setpoint": {
                            "description": "Setpoint name.",
                            "name": "Setpoint"
                        },
                        "state": {
                            "description": "New setpoint state.",
                            "name": "State"
                        }
                    },
                    "name": "Lock regulator"
                },
                "output_abs": {
                    "description": "Sets absolute brightness of output port in percent.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "brightness": {
                            "description": "Absolute brightness.",
                            "name": "Brightness"
                        },
                        "output": {
                            "description": "Output port.",
                            "name": "Output"
                        },
                        "transition": {
                            "description": "Transition time.",
                            "name": "Transition"
                        }
                    },
                    "name": "Output absolute brightness"
                },
                "output_rel": {
                    "description": "Sets relative brightness of output port in percent.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "brightness": {
                            "description": "Relative brightness.",
                            "name": "Brightness"
                        },
                        "output": {
                            "description": "Output port.",
                            "name": "Output"
                        }
                    },
                    "name": "Output relative brightness"
                },
                "output_toggle": {
                    "description": "Toggles output port.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "output": {
                            "description": "Output port.",
                            "name": "Output"
                        },
                        "transition": {
                            "description": "Transition time.",
                            "name": "Transition"
                        }
                    },
                    "name": "Toggle output"
                },
                "pck": {
                    "description": "Sends arbitrary PCK command.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "pck": {
                            "description": "PCK command (without address header).",
                            "name": "PCK"
                        }
                    },
                    "name": "PCK"
                },
                "relays": {
                    "description": "Sets the relays status.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "state": {
                            "description": "Relays states as string (1=on, 2=off, t=toggle, -=no change).",
                            "name": "State"
                        }
                    },
                    "name": "Relays"
                },
                "send_keys": {
                    "description": "Sends keys (which executes bound commands).",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "keys": {
                            "description": "Keys to send.",
                            "name": "Keys"
                        },
                        "state": {
                            "description": "Key state upon sending (must be hit for deferred).",
                            "name": "State"
                        },
                        "time": {
                            "description": "Send delay.",
                            "name": "Time"
                        },
                        "time_unit": {
                            "description": "Time unit of send delay.",
                            "name": "Time unit"
                        }
                    },
                    "name": "Send keys"
                },
                "var_abs": {
                    "description": "Sets absolute value of a variable or setpoint.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "unit_of_measurement": {
                            "description": "Unit of value.",
                            "name": "Unit of measurement"
                        },
                        "value": {
                            "description": "Value to set.",
                            "name": "Value"
                        },
                        "variable": {
                            "description": "Variable or setpoint name.",
                            "name": "Variable"
                        }
                    },
                    "name": "Set absolute variable"
                },
                "var_rel": {
                    "description": "Shift value of a variable, setpoint or threshold.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "unit_of_measurement": {
                            "description": "Unit of value.",
                            "name": "Unit of measurement"
                        },
                        "value": {
                            "description": "Shift value.",
                            "name": "Value"
                        },
                        "value_reference": {
                            "description": "Reference value for setpoint and threshold.",
                            "name": "Reference value"
                        },
                        "variable": {
                            "description": "Variable or setpoint name.",
                            "name": "Variable"
                        }
                    },
                    "name": "Shift variable"
                },
                "var_reset": {
                    "description": "Resets value of variable or setpoint.",
                    "fields": {
                        "address": {
                            "description": "Module address.",
                            "name": "Address"
                        },
                        "variable": {
                            "description": "Variable or setpoint name.",
                            "name": "Variable"
                        }
                    },
                    "name": "Reset variable"
                }
            }
        },
        "ld2410_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "address": "Bluetooth address"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "detection_distance": {
                        "name": "Detection distance"
                    },
                    "max_motion_gates": {
                        "name": "Max motion gates"
                    },
                    "max_static_gates": {
                        "name": "Max static gates"
                    },
                    "motion_energy_gate_0": {
                        "name": "Motion energy gate 0"
                    },
                    "motion_energy_gate_1": {
                        "name": "Motion energy gate 1"
                    },
                    "motion_energy_gate_2": {
                        "name": "Motion energy gate 2"
                    },
                    "motion_energy_gate_3": {
                        "name": "Motion energy gate 3"
                    },
                    "motion_energy_gate_4": {
                        "name": "Motion energy gate 4"
                    },
                    "motion_energy_gate_5": {
                        "name": "Motion energy gate 5"
                    },
                    "motion_energy_gate_6": {
                        "name": "Motion energy gate 6"
                    },
                    "motion_energy_gate_7": {
                        "name": "Motion energy gate 7"
                    },
                    "motion_energy_gate_8": {
                        "name": "Motion energy gate 8"
                    },
                    "moving_target_distance": {
                        "name": "Moving target distance"
                    },
                    "moving_target_energy": {
                        "name": "Moving target energy"
                    },
                    "static_energy_gate_0": {
                        "name": "Static energy gate 0"
                    },
                    "static_energy_gate_1": {
                        "name": "Static energy gate 1"
                    },
                    "static_energy_gate_2": {
                        "name": "Static energy gate 2"
                    },
                    "static_energy_gate_3": {
                        "name": "Static energy gate 3"
                    },
                    "static_energy_gate_4": {
                        "name": "Static energy gate 4"
                    },
                    "static_energy_gate_5": {
                        "name": "Static energy gate 5"
                    },
                    "static_energy_gate_6": {
                        "name": "Static energy gate 6"
                    },
                    "static_energy_gate_7": {
                        "name": "Static energy gate 7"
                    },
                    "static_energy_gate_8": {
                        "name": "Static energy gate 8"
                    },
                    "static_target_distance": {
                        "name": "Static target distance"
                    },
                    "static_target_energy": {
                        "name": "Static target energy"
                    }
                }
            }
        },
        "led_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "address": "Bluetooth address"
                        }
                    }
                }
            }
        },
        "lg_soundbar": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_data": "Device did not return any data required to an entry."
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            }
        },
        "lidarr": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error",
                    "wrong_app": "Incorrect application reached. Please try again",
                    "zeroconf_failed": "API key not found. Please enter it manually"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "The Lidarr integration needs to be manually re-authenticated with the Lidarr API",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "url": "URL",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "API key can be retrieved automatically if login credentials were not set in application.\nYour API key can be found in Settings > General in the Lidarr Web UI."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "disk_space": {
                        "name": "Disk space"
                    },
                    "queue": {
                        "name": "Queue"
                    },
                    "wanted": {
                        "name": "Wanted"
                    }
                }
            }
        },
        "life360": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "invalid_auth": "Invalid authentication",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "already_configured": "Account is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Configure Life360 Account"
                    }
                }
            },
            "entity": {
                "button": {
                    "update_location": {
                        "name": "Update Location"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "driving": "Show driving as state",
                            "driving_speed": "Driving speed",
                            "limit_gps_acc": "Limit GPS accuracy",
                            "max_gps_accuracy": "Max GPS accuracy (meters)",
                            "set_drive_speed": "Set driving speed threshold"
                        },
                        "title": "Account Options"
                    }
                }
            }
        },
        "lifx": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{label} ({group})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {label} ({group})?"
                    },
                    "pick_device": {
                        "data": {
                            "device": "Device"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "If you leave the host empty, discovery will be used to find devices."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "clean_cycle": {
                        "name": "Clean cycle"
                    }
                },
                "select": {
                    "infrared_brightness": {
                        "name": "Infrared brightness"
                    },
                    "theme": {
                        "name": "Theme"
                    }
                },
                "sensor": {
                    "rssi": {
                        "name": "RSSI"
                    }
                }
            },
            "services": {
                "effect_colorloop": {
                    "description": "Runs an effect with looping colors.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness of the color loop, where 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
                            "name": "Brightness value"
                        },
                        "brightness_pct": {
                            "description": "Percentage indicating the brightness of the color loop, where 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
                            "name": "Brightness"
                        },
                        "change": {
                            "description": "Hue movement per period, in degrees on a color wheel.",
                            "name": "Change"
                        },
                        "period": {
                            "description": "Duration between color changes.",
                            "name": "Period"
                        },
                        "power_on": {
                            "description": "Powered off lights are temporarily turned on during the effect.",
                            "name": "Power on"
                        },
                        "saturation_max": {
                            "description": "Percentage indicating the maximum saturation of the colors in the loop.",
                            "name": "Maximum saturation"
                        },
                        "saturation_min": {
                            "description": "Percentage indicating the minimum saturation of the colors in the loop.",
                            "name": "Minimum saturation"
                        },
                        "spread": {
                            "description": "Maximum hue difference between participating lights, in degrees on a color wheel.",
                            "name": "Spread"
                        }
                    },
                    "name": "Color loop effect"
                },
                "effect_flame": {
                    "description": "Starts the firmware-based Flame effect on LIFX Tiles or Candle.",
                    "fields": {
                        "power_on": {
                            "description": "Powered off lights will be turned on before starting the effect.",
                            "name": "Power on"
                        },
                        "speed": {
                            "description": "How fast the flames will move.",
                            "name": "Speed"
                        }
                    },
                    "name": "Flame effect"
                },
                "effect_morph": {
                    "description": "Starts the firmware-based Morph effect on LIFX Tiles on Candle.",
                    "fields": {
                        "palette": {
                            "description": "List of at least 2 and at most 16 colors as hue (0-360), saturation (0-100), brightness (0-100) and kelvin (1500-900) values to use for this effect. Overrides the theme attribute.",
                            "name": "Palette"
                        },
                        "power_on": {
                            "description": "Powered off lights will be turned on before starting the effect.",
                            "name": "Power on"
                        },
                        "speed": {
                            "description": "How fast the colors will move.",
                            "name": "Speed"
                        },
                        "theme": {
                            "description": "Predefined color theme to use for the effect. Overridden by the palette attribute.",
                            "name": "Theme"
                        }
                    },
                    "name": "Morph effect"
                },
                "effect_move": {
                    "description": "Starts the firmware-based Move effect on a LIFX Z, Lightstrip or Beam.",
                    "fields": {
                        "direction": {
                            "description": "Direction the effect will move across the device.",
                            "name": "Direction"
                        },
                        "power_on": {
                            "description": "Powered off lights will be turned on before starting the effect.",
                            "name": "Power on"
                        },
                        "speed": {
                            "description": "How long in seconds for the effect to move across the length of the light.",
                            "name": "Speed"
                        },
                        "theme": {
                            "description": "(Optional) set one of the predefined themes onto the device before starting the effect.",
                            "name": "Theme"
                        }
                    },
                    "name": "Move effect"
                },
                "effect_pulse": {
                    "description": "Runs a flash effect by changing to a color and back.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness of the temporary color, where 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
                            "name": "Brightness value"
                        },
                        "brightness_pct": {
                            "description": "Percentage indicating the brightness of the temporary color, where 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
                            "name": "Brightness"
                        },
                        "color_name": {
                            "description": "A human-readable color name.",
                            "name": "Color name"
                        },
                        "cycles": {
                            "description": "Number of times the effect should run.",
                            "name": "Cycles"
                        },
                        "mode": {
                            "description": "Decides how colors are changed.",
                            "name": "Mode"
                        },
                        "period": {
                            "description": "Duration of the effect.",
                            "name": "Period"
                        },
                        "power_on": {
                            "description": "Powered off lights are temporarily turned on during the effect.",
                            "name": "Power on"
                        },
                        "rgb_color": {
                            "description": "The temporary color in RGB-format.",
                            "name": "RGB color"
                        }
                    },
                    "name": "Pulse effect"
                },
                "effect_stop": {
                    "description": "Stops a running effect.",
                    "name": "Stop effect"
                },
                "set_hev_cycle_state": {
                    "description": "Controls the HEV LEDs on a LIFX Clean bulb.",
                    "fields": {
                        "duration": {
                            "description": "How long the HEV LEDs will remain on. Uses the configured default duration if not specified.",
                            "name": "Duration"
                        },
                        "power": {
                            "description": "Start or stop a Clean cycle.",
                            "name": "Enable"
                        }
                    },
                    "name": "Set HEV cycle state"
                },
                "set_state": {
                    "description": "Sets a color\/brightness and possibly turn the light on\/off.",
                    "fields": {
                        "infrared": {
                            "description": "Automatic infrared level when light brightness is low.",
                            "name": "Infrared"
                        },
                        "power": {
                            "description": "Turn the light on or off. Leave out to keep the power as it is.",
                            "name": "Power"
                        },
                        "transition": {
                            "description": "Duration it takes to get to the final state.",
                            "name": "Transition"
                        },
                        "zones": {
                            "description": "List of zone numbers to affect (8 per LIFX Z, starts at 0).",
                            "name": "Zones"
                        }
                    },
                    "name": "Set State"
                }
            }
        },
        "light": {
            "device_automation": {
                "action_type": {
                    "brightness_decrease": "Decrease {entity_name} brightness",
                    "brightness_increase": "Increase {entity_name} brightness",
                    "flash": "Flash {entity_name}",
                    "toggle": "Toggle {entity_name}",
                    "turn_off": "Turn off {entity_name}",
                    "turn_on": "Turn on {entity_name}"
                },
                "condition_type": {
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on"
                },
                "trigger_type": {
                    "changed_states": "{entity_name} turned on or off",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Light",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "brightness": {
                            "name": "Brightness"
                        },
                        "color_mode": {
                            "name": "Color mode",
                            "state": {
                                "brightness": "Brightness only",
                                "color_temp": "Color temperature",
                                "hs": "HS",
                                "onoff": "On\/Off",
                                "rgb": "RGB",
                                "rgbw": "RGBW",
                                "rgbww": "RGBWW",
                                "unknown": "Unknown",
                                "white": "White",
                                "xy": "XY"
                            }
                        },
                        "color_temp": {
                            "name": "Color temperature (mireds)"
                        },
                        "color_temp_kelvin": {
                            "name": "Color temperature (Kelvin)"
                        },
                        "effect": {
                            "name": "Effect"
                        },
                        "effect_list": {
                            "name": "Available effects"
                        },
                        "max_color_temp_kelvin": {
                            "name": "Maximum color temperature (Kelvin)"
                        },
                        "max_mireds": {
                            "name": "Maximum color temperature (mireds)"
                        },
                        "min_color_temp_kelvin": {
                            "name": "Minimum color temperature (Kelvin)"
                        },
                        "min_mireds": {
                            "name": "Minimum color temperature (mireds)"
                        },
                        "supported_color_modes": {
                            "name": "Available color modes",
                            "state": {
                                "brightness": "Brightness only",
                                "color_temp": "Color temperature",
                                "hs": "HS",
                                "onoff": "On\/Off",
                                "rgb": "RGB",
                                "rgbw": "RGBW",
                                "rgbww": "RGBWW",
                                "unknown": "Unknown",
                                "white": "White",
                                "xy": "XY"
                            }
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "selector": {
                "color_name": {
                    "options": {
                        "aliceblue": "Alice blue",
                        "antiquewhite": "Antique white",
                        "aqua": "Aqua",
                        "aquamarine": "Aquamarine",
                        "azure": "Azure",
                        "beige": "Beige",
                        "bisque": "Bisque",
                        "blanchedalmond": "Blanched almond",
                        "blue": "Blue",
                        "blueviolet": "Blue violet",
                        "brown": "Brown",
                        "burlywood": "Burlywood",
                        "cadetblue": "Cadet blue",
                        "chartreuse": "Chartreuse",
                        "chocolate": "Chocolate",
                        "coral": "Coral",
                        "cornflowerblue": "Cornflower blue",
                        "cornsilk": "Cornsilk",
                        "crimson": "Crimson",
                        "cyan": "Cyan",
                        "darkblue": "Dark blue",
                        "darkcyan": "Dark cyan",
                        "darkgoldenrod": "Dark goldenrod",
                        "darkgray": "Dark gray",
                        "darkgreen": "Dark green",
                        "darkgrey": "Dark grey",
                        "darkkhaki": "Dark khaki",
                        "darkmagenta": "Dark magenta",
                        "darkolivegreen": "Dark olive green",
                        "darkorange": "Dark orange",
                        "darkorchid": "Dark orchid",
                        "darkred": "Dark red",
                        "darksalmon": "Dark salmon",
                        "darkseagreen": "Dark sea green",
                        "darkslateblue": "Dark slate blue",
                        "darkslategray": "Dark slate gray",
                        "darkslategrey": "Dark slate grey",
                        "darkturquoise": "Dark turquoise",
                        "darkviolet": "Dark violet",
                        "deeppink": "Deep pink",
                        "deepskyblue": "Deep sky blue",
                        "dimgray": "Dim gray",
                        "dimgrey": "Dim grey",
                        "dodgerblue": "Dodger blue",
                        "firebrick": "Fire brick",
                        "floralwhite": "Floral white",
                        "forestgreen": "Forest green",
                        "fuchsia": "Fuchsia",
                        "gainsboro": "Gainsboro",
                        "ghostwhite": "Ghost white",
                        "gold": "Gold",
                        "goldenrod": "Goldenrod",
                        "gray": "Gray",
                        "green": "Green",
                        "greenyellow": "Green yellow",
                        "grey": "Grey",
                        "homeassistant": "Home Assistant",
                        "honeydew": "Honeydew",
                        "hotpink": "Hot pink",
                        "indianred": "Indian red",
                        "indigo": "Indigo",
                        "ivory": "Ivory",
                        "khaki": "Khaki",
                        "lavender": "Lavender",
                        "lavenderblush": "Lavender blush",
                        "lawngreen": "Lawn green",
                        "lemonchiffon": "Lemon chiffon",
                        "lightblue": "Light blue",
                        "lightcoral": "Light coral",
                        "lightcyan": "Light cyan",
                        "lightgoldenrodyellow": "Light goldenrod yellow",
                        "lightgray": "Light gray",
                        "lightgreen": "Light green",
                        "lightgrey": "Light grey",
                        "lightpink": "Light pink",
                        "lightsalmon": "Light salmon",
                        "lightseagreen": "Light sea green",
                        "lightskyblue": "Light sky blue",
                        "lightslategray": "Light slate gray",
                        "lightslategrey": "Light slate grey",
                        "lightsteelblue": "Light steel blue",
                        "lightyellow": "Light yellow",
                        "lime": "Lime",
                        "limegreen": "Lime green",
                        "linen": "Linen",
                        "magenta": "Magenta",
                        "maroon": "Maroon",
                        "mediumaquamarine": "Medium aquamarine",
                        "mediumblue": "Medium blue",
                        "mediumorchid": "Medium orchid",
                        "mediumpurple": "Medium purple",
                        "mediumseagreen": "Medium sea green",
                        "mediumslateblue": "Medium slate blue",
                        "mediumspringgreen": "Medium spring green",
                        "mediumturquoise": "Medium turquoise",
                        "mediumvioletred": "Medium violet red",
                        "midnightblue": "Midnight blue",
                        "mintcream": "Mint cream",
                        "mistyrose": "Misty rose",
                        "moccasin": "Moccasin",
                        "navajowhite": "Navajo white",
                        "navy": "Navy",
                        "navyblue": "Navy blue",
                        "oldlace": "Old lace",
                        "olive": "Olive",
                        "olivedrab": "Olive drab",
                        "orange": "Orange",
                        "orangered": "Orange red",
                        "orchid": "Orchid",
                        "palegoldenrod": "Pale goldenrod",
                        "palegreen": "Pale green",
                        "paleturquoise": "Pale turquoise",
                        "palevioletred": "Pale violet red",
                        "papayawhip": "Papaya whip",
                        "peachpuff": "Peach puff",
                        "peru": "Peru",
                        "pink": "Pink",
                        "plum": "Plum",
                        "powderblue": "Powder blue",
                        "purple": "Purple",
                        "red": "Red",
                        "rosybrown": "Rosy brown",
                        "royalblue": "Royal blue",
                        "saddlebrown": "Saddle brown",
                        "salmon": "Salmon",
                        "sandybrown": "Sandy brown",
                        "seagreen": "Sea green",
                        "seashell": "Seashell",
                        "sienna": "Sienna",
                        "silver": "Silver",
                        "skyblue": "Sky blue",
                        "slateblue": "Slate blue",
                        "slategray": "Slate gray",
                        "slategrey": "Slate grey",
                        "snow": "Snow",
                        "springgreen": "Spring green",
                        "steelblue": "Steel blue",
                        "tan": "Tan",
                        "teal": "Teal",
                        "thistle": "Thistle",
                        "tomato": "Tomato",
                        "turquoise": "Turquoise",
                        "violet": "Violet",
                        "wheat": "Wheat",
                        "white": "White",
                        "whitesmoke": "White smoke",
                        "yellow": "Yellow",
                        "yellowgreen": "Yellow green"
                    }
                }
            },
            "services": {
                "toggle": {
                    "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.",
                            "name": "Brightness value"
                        },
                        "brightness_pct": {
                            "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.",
                            "name": "Brightness"
                        },
                        "color_name": {
                            "description": "A human-readable color name.",
                            "name": "Color name"
                        },
                        "color_temp": {
                            "description": "Color temperature in mireds.",
                            "name": "Color temperature"
                        },
                        "effect": {
                            "description": "Light effect.",
                            "name": "Effect"
                        },
                        "flash": {
                            "description": "Tell light to flash, can be either value short or long.",
                            "name": "Flash"
                        },
                        "hs_color": {
                            "description": "Color in hue\/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100.",
                            "name": "Hue\/Sat color"
                        },
                        "kelvin": {
                            "description": "Color temperature in Kelvin.",
                            "name": "Color temperature"
                        },
                        "profile": {
                            "description": "Name of a light profile to use.",
                            "name": "Profile"
                        },
                        "rgb_color": {
                            "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.",
                            "name": "Color"
                        },
                        "transition": {
                            "description": "Duration it takes to get to next state.",
                            "name": "Transition"
                        },
                        "white": {
                            "description": "Set the light to white mode.",
                            "name": "White"
                        },
                        "xy_color": {
                            "description": "Color in XY-format. A list of two decimal numbers between 0 and 1.",
                            "name": "XY-color"
                        }
                    },
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turn off one or more lights.",
                    "fields": {
                        "flash": {
                            "description": "Tell light to flash, can be either value short or long.",
                            "name": "Flash"
                        },
                        "transition": {
                            "description": "Duration it takes to get to next state.",
                            "name": "Transition"
                        }
                    },
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.",
                            "name": "Brightness value"
                        },
                        "brightness_pct": {
                            "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.",
                            "name": "Brightness"
                        },
                        "brightness_step": {
                            "description": "Change brightness by an amount.",
                            "name": "Brightness step value"
                        },
                        "brightness_step_pct": {
                            "description": "Change brightness by a percentage.",
                            "name": "Brightness step"
                        },
                        "color_name": {
                            "description": "A human-readable color name.",
                            "name": "Color name"
                        },
                        "color_temp": {
                            "description": "Color temperature in mireds.",
                            "name": "Color temperature"
                        },
                        "effect": {
                            "description": "Light effect.",
                            "name": "Effect"
                        },
                        "flash": {
                            "description": "Tell light to flash, can be either value short or long.",
                            "name": "Flash"
                        },
                        "hs_color": {
                            "description": "Color in hue\/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100.",
                            "name": "Hue\/Sat color"
                        },
                        "kelvin": {
                            "description": "Color temperature in Kelvin.",
                            "name": "Color temperature"
                        },
                        "profile": {
                            "description": "Name of a light profile to use.",
                            "name": "Profile"
                        },
                        "rgb_color": {
                            "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.",
                            "name": "Color"
                        },
                        "rgbw_color": {
                            "description": "The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white.",
                            "name": "RGBW-color"
                        },
                        "rgbww_color": {
                            "description": "The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white.",
                            "name": "RGBWW-color"
                        },
                        "transition": {
                            "description": "Duration it takes to get to next state.",
                            "name": "Transition"
                        },
                        "white": {
                            "description": "Set the light to white mode.",
                            "name": "White"
                        },
                        "xy_color": {
                            "description": "Color in XY-format. A list of two decimal numbers between 0 and 1.",
                            "name": "XY-color"
                        }
                    },
                    "name": "Turn on"
                }
            },
            "title": "Light"
        },
        "litejet": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "open_failed": "Cannot open the specified serial port."
                },
                "step": {
                    "user": {
                        "data": {
                            "port": "Port"
                        },
                        "description": "Connect the LiteJet's RS232-2 port to your computer and enter the path to the serial port device.\n\nThe LiteJet MCP must be configured for 19.2 K baud, 8 data bits, 1 stop bit, no parity, and to transmit a 'CR' after each response.",
                        "title": "Connect To LiteJet"
                    }
                }
            },
            "issues": {
                "deprecated_yaml_serial_exception": {
                    "description": "Configuring LiteJet using YAML is being removed but there was an error opening the serial port when importing your YAML configuration.\n\nCorrect the YAML configuration and restart Home Assistant to try again or manually continue to [set up the integration]({url}).",
                    "title": "The LiteJet YAML configuration import failed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "default_transition": "Default Transition (seconds)"
                        },
                        "title": "Configure LiteJet"
                    }
                }
            }
        },
        "litterrobot": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please update your password for {username}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "power_status": {
                        "name": "Power status"
                    },
                    "sleep_mode": {
                        "name": "Sleep mode"
                    },
                    "sleeping": {
                        "name": "Sleeping"
                    }
                },
                "button": {
                    "give_snack": {
                        "name": "Give snack"
                    },
                    "reset_waste_drawer": {
                        "name": "Reset waste drawer"
                    }
                },
                "select": {
                    "brightness_level": {
                        "name": "Panel brightness",
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium"
                        }
                    },
                    "cycle_delay": {
                        "name": "Clean cycle wait time minutes"
                    },
                    "meal_insert_size": {
                        "name": "Meal insert size"
                    }
                },
                "sensor": {
                    "food_level": {
                        "name": "Food level"
                    },
                    "last_seen": {
                        "name": "Last seen"
                    },
                    "litter_level": {
                        "name": "Litter level"
                    },
                    "pet_weight": {
                        "name": "Pet weight"
                    },
                    "sleep_mode_end_time": {
                        "name": "Sleep mode end time"
                    },
                    "sleep_mode_start_time": {
                        "name": "Sleep mode start time"
                    },
                    "status_code": {
                        "name": "Status code",
                        "state": {
                            "br": "Bonnet Removed",
                            "ccc": "Clean Cycle Complete",
                            "ccp": "Clean Cycle In Progress",
                            "cd": "Cat Detected",
                            "csf": "Cat Sensor Fault",
                            "csi": "Cat Sensor Interrupted",
                            "cst": "Cat Sensor Timing",
                            "df1": "Drawer Almost Full - 2 Cycles Left",
                            "df2": "Drawer Almost Full - 1 Cycle Left",
                            "dfs": "Drawer Full",
                            "dhf": "Dump + Home Position Fault",
                            "dpf": "Dump Position Fault",
                            "ec": "Empty Cycle",
                            "hpf": "Home Position Fault",
                            "off": "Off",
                            "offline": "Offline",
                            "otf": "Over Torque Fault",
                            "p": "Paused",
                            "pd": "Pinch Detect",
                            "pwrd": "Powering Down",
                            "pwru": "Powering Up",
                            "rdy": "Ready",
                            "scf": "Cat Sensor Fault At Startup",
                            "sdf": "Drawer Full At Startup",
                            "spf": "Pinch Detect At Startup"
                        }
                    },
                    "waste_drawer": {
                        "name": "Waste drawer"
                    }
                },
                "switch": {
                    "night_light_mode": {
                        "name": "Night light mode"
                    },
                    "panel_lockout": {
                        "name": "Panel lockout"
                    }
                },
                "time": {
                    "sleep_mode_start_time": {
                        "name": "Sleep mode start time"
                    }
                },
                "update": {
                    "firmware": {
                        "name": "Firmware"
                    }
                },
                "vacuum": {
                    "litter_box": {
                        "name": "Litter box"
                    }
                }
            },
            "issues": {
                "migrated_attributes": {
                    "description": "The vacuum entity attributes are now available as diagnostic sensors.\n\nPlease adjust any automations or scripts you may have that use these attributes.",
                    "title": "Litter-Robot attributes are now their own sensors"
                },
                "service_deprecation_turn_off": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Litter-Robot vaccum support for the {old_service} service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call {new_service} and select submit below to mark this issue as resolved.",
                                "title": "Litter-Robot vaccum support for {old_service} is being removed"
                            }
                        }
                    },
                    "title": "Litter-Robot vaccum support for {old_service} is being removed"
                },
                "service_deprecation_turn_on": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Litter-Robot vaccum support for the {old_service} service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call {new_service} and select submit below to mark this issue as resolved.",
                                "title": "Litter-Robot vaccum support for {old_service} is being removed"
                            }
                        }
                    },
                    "title": "Litter-Robot vaccum support for {old_service} is being removed"
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "litterrobot__status_code": {
                            "br": "Bonnet Removed",
                            "ccc": "Clean Cycle Complete",
                            "ccp": "Clean Cycle In Progress",
                            "cd": "Cat Detected",
                            "csf": "Cat Sensor Fault",
                            "csi": "Cat Sensor Interrupted",
                            "cst": "Cat Sensor Timing",
                            "df1": "Drawer Almost Full - 2 Cycles Left",
                            "df2": "Drawer Almost Full - 1 Cycle Left",
                            "dfs": "Drawer Full",
                            "dhf": "Dump + Home Position Fault",
                            "dpf": "Dump Position Fault",
                            "ec": "Empty Cycle",
                            "hpf": "Home Position Fault",
                            "off": "Off",
                            "offline": "Offline",
                            "otf": "Over Torque Fault",
                            "p": "Paused",
                            "pd": "Pinch Detect",
                            "pwrd": "Powering Down",
                            "pwru": "Powering Up",
                            "rdy": "Ready",
                            "scf": "Cat Sensor Fault At Startup",
                            "sdf": "Drawer Full At Startup",
                            "spf": "Pinch Detect At Startup"
                        }
                    }
                }
            },
            "services": {
                "set_sleep_mode": {
                    "description": "Sets the sleep mode and start time.",
                    "fields": {
                        "enabled": {
                            "description": "Whether sleep mode should be enabled.",
                            "name": "Enabled"
                        },
                        "start_time": {
                            "description": "The start time at which the Litter-Robot will enter sleep mode and prevent an automatic clean cycle for 8 hours.",
                            "name": "Start time"
                        }
                    },
                    "name": "Set sleep mode"
                }
            }
        },
        "livisi": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "wrong_ip_address": "The IP address is incorrect or the SHC cannot be reached locally.",
                    "wrong_password": "The password is incorrect."
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "IP Address",
                            "password": "Password"
                        },
                        "description": "Enter the IP address and the (local) password of the SHC."
                    }
                }
            }
        },
        "local_calendar": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "calendar_name": "Calendar Name"
                        },
                        "description": "Please choose a name for your new calendar"
                    }
                }
            },
            "title": "Local Calendar"
        },
        "local_file": {
            "services": {
                "update_file_path": {
                    "description": "Use this service to change the file displayed by the camera.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity_id of the camera to update.",
                            "name": "Entity"
                        },
                        "file_path": {
                            "description": "The full path to the new image file to be displayed.",
                            "name": "File path"
                        }
                    },
                    "name": "Updates file path"
                }
            }
        },
        "local_ip": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?",
                        "title": "Local IP Address"
                    }
                }
            },
            "title": "Local IP Address"
        },
        "locative": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send locations to Home Assistant, you will need to set up the webhook feature in the Locative app.\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n\nSee [the documentation]({docs_url}) for further details."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?",
                        "title": "Set up the Locative Webhook"
                    }
                }
            }
        },
        "lock": {
            "device_automation": {
                "action_type": {
                    "lock": "Lock {entity_name}",
                    "open": "Open {entity_name}",
                    "unlock": "Unlock {entity_name}"
                },
                "condition_type": {
                    "is_locked": "{entity_name} is locked",
                    "is_unlocked": "{entity_name} is unlocked"
                },
                "trigger_type": {
                    "locked": "{entity_name} locked",
                    "unlocked": "{entity_name} unlocked"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Lock",
                    "state": {
                        "jammed": "Jammed",
                        "locked": "Locked",
                        "locking": "Locking",
                        "unlocked": "Unlocked",
                        "unlocking": "Unlocking"
                    },
                    "state_attributes": {
                        "changed_by": {
                            "name": "Changed by"
                        },
                        "code_format": {
                            "name": "Code format"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "lock": {
                    "description": "Locks a lock.",
                    "fields": {
                        "code": {
                            "description": "Code used to lock the lock.",
                            "name": "Code"
                        }
                    },
                    "name": "Lock"
                },
                "open": {
                    "description": "Opens a lock.",
                    "fields": {
                        "code": {
                            "description": "Code used to open the lock.",
                            "name": "Code"
                        }
                    },
                    "name": "Open"
                },
                "unlock": {
                    "description": "Unlocks a lock.",
                    "fields": {
                        "code": {
                            "description": "Code used to unlock the lock.",
                            "name": "Code"
                        }
                    },
                    "name": "Unlock"
                }
            },
            "title": "Lock"
        },
        "logbook": {
            "services": {
                "log": {
                    "description": "Creates a custom entry in the logbook.",
                    "fields": {
                        "domain": {
                            "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry.",
                            "name": "Domain"
                        },
                        "entity_id": {
                            "description": "Entity to reference in the logbook entry.",
                            "name": "Entity ID"
                        },
                        "message": {
                            "description": "Message of the logbook entry.",
                            "name": "Message"
                        },
                        "name": {
                            "description": "Custom name for an entity, can be referenced using an `entity_id`.",
                            "name": "Name"
                        }
                    },
                    "name": "Log"
                }
            }
        },
        "logger": {
            "selector": {
                "level": {
                    "options": {
                        "critical": "Critical",
                        "debug": "Debug",
                        "error": "Error",
                        "fatal": "Fatal",
                        "info": "Info",
                        "warning": "Warning"
                    }
                }
            },
            "services": {
                "set_default_level": {
                    "description": "Sets the default log level for integrations.",
                    "fields": {
                        "level": {
                            "description": "Default severity level for all integrations.",
                            "name": "Level"
                        }
                    },
                    "name": "Set default level"
                },
                "set_level": {
                    "description": "Sets the log level for one or more integrations.",
                    "name": "Set level"
                }
            }
        },
        "logi_circle": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "external_error": "Exception occurred from another flow.",
                    "external_setup": "Logi Circle successfully configured from another flow.",
                    "missing_configuration": "The component is not configured. Please follow the documentation."
                },
                "error": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "follow_link": "Please follow the link and authenticate before pressing Submit.",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "auth": {
                        "description": "Please follow the link below and **Accept** access to your Logi Circle account, then come back and press **Submit** below.\n\n[Link]({authorization_url})",
                        "title": "Authenticate with Logi Circle"
                    },
                    "user": {
                        "data": {
                            "flow_impl": "Provider"
                        },
                        "description": "Pick via which authentication provider you want to authenticate with Logi Circle.",
                        "title": "Authentication Provider"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "last_activity": {
                        "name": "Last activity"
                    },
                    "recording_mode": {
                        "name": "Recording mode"
                    },
                    "streaming_mode": {
                        "name": "Streaming mode"
                    },
                    "wifi_signal_category": {
                        "name": "Wi-Fi signal category"
                    },
                    "wifi_signal_strength": {
                        "name": "Wi-Fi signal strength"
                    }
                }
            },
            "services": {
                "livestream_record": {
                    "description": "Takes a video recording from the camera's livestream.",
                    "fields": {
                        "duration": {
                            "description": "Recording duration.",
                            "name": "Duration"
                        },
                        "entity_id": {
                            "description": "Name(s) of entities to create recordings from.",
                            "name": "Entity"
                        },
                        "filename": {
                            "description": "Template of a Filename. Variable is entity_id.",
                            "name": "File name"
                        }
                    },
                    "name": "Livestream record"
                },
                "livestream_snapshot": {
                    "description": "Takes a snapshot from the camera's livestream. Will wake the camera from sleep if required.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to create snapshots from.",
                            "name": "Entity"
                        },
                        "filename": {
                            "description": "Template of a Filename. Variable is entity_id.",
                            "name": "File name"
                        }
                    },
                    "name": "Livestream snapshot"
                },
                "set_config": {
                    "description": "Sets a configuration property.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of entities to apply the operation mode to.",
                            "name": "Entity"
                        },
                        "mode": {
                            "description": "Operation mode. Allowed values: LED, RECORDING_MODE.",
                            "name": "Mode"
                        },
                        "value": {
                            "description": "Operation value.",
                            "name": "Value"
                        }
                    },
                    "name": "Set config"
                }
            }
        },
        "lookin": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "device_name": {
                        "data": {
                            "name": "Name"
                        }
                    },
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} ({host})?"
                    },
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        }
                    }
                }
            }
        },
        "loqed": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "LOQED Touch Smartlock setup",
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "api_token": "API Token",
                            "name": "Name of your lock in the LOQED app."
                        },
                        "description": "Login at LOQED's [personal access tokens portal]({config_url}) and: \n* Create an API-key by clicking 'Create' \n* Copy the created access token."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "ble_strength": {
                        "name": "Bluetooth signal"
                    }
                }
            }
        },
        "lovelace": {
            "services": {
                "reload_resources": {
                    "description": "Reloads dashboard resources from the YAML-configuration.",
                    "name": "Reload resources"
                }
            },
            "system_health": {
                "info": {
                    "dashboards": "Dashboards",
                    "mode": "Mode",
                    "resources": "Resources",
                    "views": "Views"
                }
            }
        },
        "luftdaten": {
            "config": {
                "error": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_sensor": "Sensor not available or invalid"
                },
                "step": {
                    "user": {
                        "data": {
                            "show_on_map": "Show on map",
                            "station_id": "Sensor ID"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "humidity": {
                        "name": "Humidity"
                    },
                    "pm10": {
                        "name": "PM10"
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "pressure": {
                        "name": "Pressure"
                    },
                    "pressure_at_sealevel": {
                        "name": "Pressure at sealevel"
                    },
                    "temperature": {
                        "name": "Temperature"
                    }
                }
            }
        },
        "lutron_caseta": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "not_lutron_device": "Discovered device is not a Lutron device"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "import_failed": {
                        "description": "Couldn’t set up bridge (host: {host}) imported from configuration.yaml.",
                        "title": "Failed to import Caséta bridge configuration."
                    },
                    "link": {
                        "description": "To pair with {name} ({host}), after submitting this form, press the black button on the back of the bridge.",
                        "title": "Pair with the bridge"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Enter the IP address of the device.",
                        "title": "Automatically connect to the bridge"
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "button_1": "First button",
                    "button_2": "Second button",
                    "button_3": "Third button",
                    "button_4": "Fourth button",
                    "button_5": "Fifth button",
                    "button_6": "Sixth button",
                    "button_7": "Seventh button",
                    "close_1": "Close 1",
                    "close_2": "Close 2",
                    "close_3": "Close 3",
                    "close_4": "Close 4",
                    "close_all": "Close all",
                    "group_1_button_1": "First Group first button",
                    "group_1_button_2": "First Group second button",
                    "group_2_button_1": "Second Group first button",
                    "group_2_button_2": "Second Group second button",
                    "lower": "Lower",
                    "lower_1": "Lower 1",
                    "lower_2": "Lower 2",
                    "lower_3": "Lower 3",
                    "lower_4": "Lower 4",
                    "lower_all": "Lower all",
                    "off": "Off",
                    "on": "On",
                    "open_1": "Open 1",
                    "open_2": "Open 2",
                    "open_3": "Open 3",
                    "open_4": "Open 4",
                    "open_all": "Open all",
                    "raise": "Raise",
                    "raise_1": "Raise 1",
                    "raise_2": "Raise 2",
                    "raise_3": "Raise 3",
                    "raise_4": "Raise 4",
                    "raise_all": "Raise all",
                    "stop": "Stop (favorite)",
                    "stop_1": "Stop 1",
                    "stop_2": "Stop 2",
                    "stop_3": "Stop 3",
                    "stop_4": "Stop 4",
                    "stop_all": "Stop all"
                },
                "trigger_type": {
                    "press": "\"{subtype}\" pressed",
                    "release": "\"{subtype}\" released"
                }
            }
        },
        "lyric": {
            "config": {
                "abort": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Lyric integration needs to re-authenticate your account.",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "indoor_humidity": {
                        "name": "Indoor humidity"
                    },
                    "indoor_temperature": {
                        "name": "Indoor temperature"
                    },
                    "next_period_time": {
                        "name": "Next period time"
                    },
                    "outdoor_humidity": {
                        "name": "Outdoor humidity"
                    },
                    "outdoor_temperature": {
                        "name": "Outdoor temperature"
                    },
                    "setpoint_status": {
                        "name": "Setpoint status"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Honeywell Lyric using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Honeywell Lyric YAML configuration has been removed"
                }
            },
            "services": {
                "set_hold_time": {
                    "description": "Sets the time to hold until.",
                    "fields": {
                        "time_period": {
                            "description": "Time to hold until.",
                            "name": "Time Period"
                        }
                    },
                    "name": "Set Hold Time"
                }
            }
        },
        "mailbox": {
            "title": "Mailbox"
        },
        "mailgun": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to set up [Webhooks with Mailgun]({mailgun_url}).\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n- Content Type: application\/json\n\nSee [the documentation]({docs_url}) on how to configure automations to handle incoming data."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up Mailgun?",
                        "title": "Set up the Mailgun Webhook"
                    }
                }
            }
        },
        "matrix": {
            "services": {
                "send_message": {
                    "description": "Sends message to target room(s).",
                    "fields": {
                        "data": {
                            "description": "Extended information of notification. Supports list of images. Supports message format. Optional.",
                            "name": "Data"
                        },
                        "message": {
                            "description": "The message to be sent.",
                            "name": "Message"
                        },
                        "target": {
                            "description": "A list of room(s) to send the message to.",
                            "name": "Target"
                        }
                    },
                    "name": "Send message"
                }
            }
        },
        "matter": {
            "config": {
                "abort": {
                    "addon_get_discovery_info_failed": "Failed to get Matter Server add-on discovery info.",
                    "addon_info_failed": "Failed to get Matter Server add-on info.",
                    "addon_install_failed": "Failed to install the Matter Server add-on.",
                    "addon_start_failed": "Failed to start the Matter Server add-on.",
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "not_matter_addon": "Discovered add-on is not the official Matter Server add-on.",
                    "reconfiguration_successful": "Successfully reconfigured the Matter integration."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_server_version": "The Matter server is not the correct version",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "progress": {
                    "install_addon": "Please wait while the Matter Server add-on installation finishes. This can take several minutes.",
                    "start_addon": "Please wait while the Matter Server add-on starts. This add-on is what powers Matter in Home Assistant. This may take some seconds."
                },
                "step": {
                    "hassio_confirm": {
                        "title": "Set up the Matter integration with the Matter Server add-on"
                    },
                    "install_addon": {
                        "title": "The add-on installation has started"
                    },
                    "manual": {
                        "data": {
                            "url": "URL"
                        }
                    },
                    "on_supervisor": {
                        "data": {
                            "use_addon": "Use the official Matter Server Supervisor add-on"
                        },
                        "description": "Do you want to use the official Matter Server Supervisor add-on?\n\nIf you are already running the Matter Server in another add-on, in a custom container, natively etc., then do not select this option.",
                        "title": "Select connection method"
                    },
                    "start_addon": {
                        "title": "Starting add-on."
                    }
                }
            },
            "entity": {
                "event": {
                    "push": {
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "initial_press": "Initial press",
                                    "long_press": "Long press",
                                    "long_release": "Long release",
                                    "multi_press_complete": "Multi press complete",
                                    "multi_press_ongoing": "Multi press ongoing",
                                    "short_release": "Short release",
                                    "switch_latched": "Switch latched"
                                }
                            }
                        }
                    }
                },
                "sensor": {
                    "flow": {
                        "name": "Flow"
                    }
                }
            },
            "services": {
                "open_commissioning_window": {
                    "description": "Allows adding one of your devices to another Matter network by opening the commissioning window for this Matter device for 60 seconds.",
                    "fields": {
                        "device_id": {
                            "description": "The Matter device to add to the other Matter network.",
                            "name": "Device"
                        }
                    },
                    "name": "Open commissioning window"
                }
            }
        },
        "mazda": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "account_locked": "Account locked. Please try again later.",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password",
                            "region": "Region"
                        },
                        "description": "Please enter the email address and password you use to log into the MyMazda mobile app."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "driver_door": {
                        "name": "Driver door"
                    },
                    "ev_plugged_in": {
                        "name": "Plugged in"
                    },
                    "hood": {
                        "name": "Hood"
                    },
                    "passenger_door": {
                        "name": "Passenger door"
                    },
                    "rear_left_door": {
                        "name": "Rear left door"
                    },
                    "rear_right_door": {
                        "name": "Rear right door"
                    },
                    "trunk": {
                        "name": "Trunk"
                    }
                },
                "button": {
                    "refresh_vehicle_status": {
                        "name": "Refresh status"
                    },
                    "start_engine": {
                        "name": "Start engine"
                    },
                    "stop_engine": {
                        "name": "Stop engine"
                    },
                    "turn_off_hazard_lights": {
                        "name": "Turn off hazard lights"
                    },
                    "turn_on_hazard_lights": {
                        "name": "Turn on hazard lights"
                    }
                },
                "climate": {
                    "climate": {
                        "name": "Climate"
                    }
                },
                "device_tracker": {
                    "device_tracker": {
                        "name": "Device tracker"
                    }
                },
                "lock": {
                    "lock": {
                        "name": "Lock"
                    }
                },
                "sensor": {
                    "ev_charge_level": {
                        "name": "Charge level"
                    },
                    "ev_remaining_range": {
                        "name": "Remaining range"
                    },
                    "front_left_tire_pressure": {
                        "name": "Front left tire pressure"
                    },
                    "front_right_tire_pressure": {
                        "name": "Front right tire pressure"
                    },
                    "fuel_distance_remaining": {
                        "name": "Fuel distance remaining"
                    },
                    "fuel_remaining_percentage": {
                        "name": "Fuel remaining percentage"
                    },
                    "odometer": {
                        "name": "Odometer"
                    },
                    "rear_left_tire_pressure": {
                        "name": "Rear left tire pressure"
                    },
                    "rear_right_tire_pressure": {
                        "name": "Rear right tire pressure"
                    }
                },
                "switch": {
                    "charging": {
                        "name": "Charging"
                    }
                }
            },
            "issues": {
                "integration_removed": {
                    "description": "The Mazda integration has been removed from Home Assistant.\n\nThe library that Home Assistant uses to connect with their services, [has been taken offline by Mazda]({dmca}).\n\nTo resolve this issue, please remove the (now defunct) integration entries from your Home Assistant setup. [Click here to see your existing Mazda integration entries]({entries}).",
                    "title": "The Mazda integration has been removed"
                }
            },
            "services": {
                "send_poi": {
                    "description": "Sends a GPS location to the vehicle's navigation system as a POI (Point of Interest). Requires a navigation SD card installed in the vehicle.",
                    "fields": {
                        "device_id": {
                            "description": "The vehicle to send the GPS location to.",
                            "name": "Vehicle"
                        },
                        "latitude": {
                            "description": "The latitude of the location to send.",
                            "name": "Latitude"
                        },
                        "longitude": {
                            "description": "The longitude of the location to send.",
                            "name": "Longitude"
                        },
                        "poi_name": {
                            "description": "A friendly name for the location.",
                            "name": "POI name"
                        }
                    },
                    "name": "Send POI"
                }
            }
        },
        "meater": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "service_unavailable_error": "The API is currently unavailable, please try again later.",
                    "unknown_auth_error": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Confirm the password for Meater Cloud account {username}."
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "data_description": {
                            "username": "Meater Cloud username, typically an email address."
                        },
                        "description": "Set up your Meater Cloud account."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "ambient": {
                        "name": "Ambient temperature"
                    },
                    "cook_name": {
                        "name": "Cooking"
                    },
                    "cook_peak_temp": {
                        "name": "Peak temperature"
                    },
                    "cook_state": {
                        "name": "Cook state"
                    },
                    "cook_target_temp": {
                        "name": "Target temperature"
                    },
                    "cook_time_elapsed": {
                        "name": "Time elapsed"
                    },
                    "cook_time_remaining": {
                        "name": "Time remaining"
                    },
                    "internal": {
                        "name": "Internal temperature"
                    }
                }
            }
        },
        "medcom_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "cpm": {
                        "name": "Counts per minute"
                    }
                }
            }
        },
        "media_extractor": {
            "services": {
                "play_media": {
                    "description": "Downloads file from given URL.",
                    "fields": {
                        "media_content_id": {
                            "description": "The ID of the content to play. Platform dependent.",
                            "name": "Media content ID"
                        },
                        "media_content_type": {
                            "description": "The type of the content to play. Must be one of MUSIC, TVSHOW, VIDEO, EPISODE, CHANNEL or PLAYLIST MUSIC.",
                            "name": "Media content type"
                        }
                    },
                    "name": "Play media"
                }
            }
        },
        "media_player": {
            "device_automation": {
                "condition_type": {
                    "is_buffering": "{entity_name} is buffering",
                    "is_idle": "{entity_name} is idle",
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on",
                    "is_paused": "{entity_name} is paused",
                    "is_playing": "{entity_name} is playing"
                },
                "trigger_type": {
                    "buffering": "{entity_name} starts buffering",
                    "changed_states": "{entity_name} turned on or off",
                    "idle": "{entity_name} becomes idle",
                    "paused": "{entity_name} is paused",
                    "playing": "{entity_name} starts playing",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Media player",
                    "state": {
                        "buffering": "Buffering",
                        "idle": "Idle",
                        "off": "Off",
                        "on": "On",
                        "paused": "Paused",
                        "playing": "Playing",
                        "standby": "Standby"
                    },
                    "state_attributes": {
                        "app_id": {
                            "name": "App ID"
                        },
                        "app_name": {
                            "name": "App"
                        },
                        "entity_picture_local": {
                            "name": "Local accessible entity picture"
                        },
                        "groups_members": {
                            "name": "Group members"
                        },
                        "is_volume_muted": {
                            "name": "Muted",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "media_album_artist": {
                            "name": "Album artist"
                        },
                        "media_album_name": {
                            "name": "Album"
                        },
                        "media_artist": {
                            "name": "Artist"
                        },
                        "media_channel": {
                            "name": "Channel"
                        },
                        "media_content_id": {
                            "name": "Content ID"
                        },
                        "media_content_type": {
                            "name": "Content type",
                            "state": {
                                "album": "Album",
                                "app": "App",
                                "artist": "Artist",
                                "channel": "Channel",
                                "channels": "Channels",
                                "composer": "Composer",
                                "contributing_artist": "Contributing artist",
                                "episode": "Episode",
                                "game": "Game",
                                "genre": "Genre",
                                "image": "Image",
                                "movie": "Movie",
                                "music": "Music",
                                "playlist": "Playlist",
                                "podcast": "Podcast",
                                "season": "Season",
                                "track": "Track",
                                "tvshow": "TV show",
                                "url": "URL",
                                "video": "Video"
                            }
                        },
                        "media_duration": {
                            "name": "Duration"
                        },
                        "media_episode": {
                            "name": "Episode"
                        },
                        "media_playlist": {
                            "name": "Playlist"
                        },
                        "media_position": {
                            "name": "Position"
                        },
                        "media_position_updated_at": {
                            "name": "Position updated"
                        },
                        "media_season": {
                            "name": "Season"
                        },
                        "media_series_title": {
                            "name": "Series"
                        },
                        "media_title": {
                            "name": "Title"
                        },
                        "media_track": {
                            "name": "Track"
                        },
                        "repeat": {
                            "name": "Repeat",
                            "state": {
                                "all": "All",
                                "off": "Off",
                                "one": "One"
                            }
                        },
                        "shuffle": {
                            "name": "Shuffle",
                            "state": {
                                "false": "Off",
                                "true": "On"
                            }
                        },
                        "sound_mode": {
                            "name": "Sound mode"
                        },
                        "sound_mode_list": {
                            "name": "Available sound modes"
                        },
                        "source": {
                            "name": "Source"
                        },
                        "source_list": {
                            "name": "Available sources"
                        },
                        "volume_level": {
                            "name": "Volume"
                        }
                    }
                },
                "receiver": {
                    "name": "Receiver"
                },
                "speaker": {
                    "name": "Speaker"
                },
                "tv": {
                    "name": "TV"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "selector": {
                "enqueue": {
                    "options": {
                        "add": "Add to queue",
                        "next": "Play next",
                        "play": "Play",
                        "replace": "Play now and clear queue"
                    }
                },
                "repeat": {
                    "options": {
                        "all": "Repeat all",
                        "off": "Off",
                        "one": "Repeat one"
                    }
                }
            },
            "services": {
                "clear_playlist": {
                    "description": "Clears the playlist.",
                    "name": "Clear playlist"
                },
                "join": {
                    "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
                    "fields": {
                        "group_members": {
                            "description": "The players which will be synced with the playback specified in `target`.",
                            "name": "Group members"
                        }
                    },
                    "name": "Join"
                },
                "media_next_track": {
                    "description": "Selects the next track.",
                    "name": "Next"
                },
                "media_pause": {
                    "description": "Pauses.",
                    "name": "Pause"
                },
                "media_play": {
                    "description": "Starts playing.",
                    "name": "Play"
                },
                "media_play_pause": {
                    "description": "Toggles play\/pause.",
                    "name": "Play\/Pause"
                },
                "media_previous_track": {
                    "description": "Selects the previous track.",
                    "name": "Previous"
                },
                "media_seek": {
                    "description": "Allows you to go to a different part of the media that is currently playing.",
                    "fields": {
                        "seek_position": {
                            "description": "Target position in the currently playing media. The format is platform dependent.",
                            "name": "Position"
                        }
                    },
                    "name": "Seek"
                },
                "media_stop": {
                    "description": "Stops playing.",
                    "name": "Stop"
                },
                "play_media": {
                    "description": "Starts playing specified media.",
                    "fields": {
                        "announce": {
                            "description": "If the media should be played as an announcement.",
                            "name": "Announce"
                        },
                        "enqueue": {
                            "description": "If the content should be played now or be added to the queue.",
                            "name": "Enqueue"
                        },
                        "media_content_id": {
                            "description": "The ID of the content to play. Platform dependent.",
                            "name": "Content ID"
                        },
                        "media_content_type": {
                            "description": "The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist.",
                            "name": "Content type"
                        }
                    },
                    "name": "Play media"
                },
                "repeat_set": {
                    "description": "Playback mode that plays the media in a loop.",
                    "fields": {
                        "repeat": {
                            "description": "Repeat mode to set.",
                            "name": "Repeat mode"
                        }
                    },
                    "name": "Repeat"
                },
                "select_sound_mode": {
                    "description": "Selects a specific sound mode.",
                    "fields": {
                        "sound_mode": {
                            "description": "Name of the sound mode to switch to.",
                            "name": "Sound mode"
                        }
                    },
                    "name": "Select sound mode"
                },
                "select_source": {
                    "description": "Sends the media player the command to change input source.",
                    "fields": {
                        "source": {
                            "description": "Name of the source to switch to. Platform dependent.",
                            "name": "Source"
                        }
                    },
                    "name": "Select source"
                },
                "shuffle_set": {
                    "description": "Playback mode that selects the media in randomized order.",
                    "fields": {
                        "shuffle": {
                            "description": "Whether or not shuffle mode is enabled.",
                            "name": "Shuffle"
                        }
                    },
                    "name": "Shuffle"
                },
                "toggle": {
                    "description": "Toggles a media player on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns off the power of the media player.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns on the power of the media player.",
                    "name": "Turn on"
                },
                "unjoin": {
                    "description": "Removes the player from a group. Only works on platforms which support player groups.",
                    "name": "Unjoin"
                },
                "volume_down": {
                    "description": "Turns down the volume.",
                    "name": "Turn down volume"
                },
                "volume_mute": {
                    "description": "Mutes or unmutes the media player.",
                    "fields": {
                        "is_volume_muted": {
                            "description": "Defines whether or not it is muted.",
                            "name": "Muted"
                        }
                    },
                    "name": "Mute\/unmute volume"
                },
                "volume_set": {
                    "description": "Sets the volume level.",
                    "fields": {
                        "volume_level": {
                            "description": "The volume. 0 is inaudible, 1 is the maximum volume.",
                            "name": "Level"
                        }
                    },
                    "name": "Set volume"
                },
                "volume_up": {
                    "description": "Turns up the volume.",
                    "name": "Turn up volume"
                }
            },
            "title": "Media player"
        },
        "melcloud": {
            "config": {
                "abort": {
                    "already_configured": "MELCloud integration already configured for this email. Access token has been refreshed."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        },
                        "description": "Connect using your MELCloud account.",
                        "title": "Connect to MELCloud"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "daily_energy": {
                        "name": "Daily energy consumed"
                    },
                    "flow_temperature": {
                        "name": "Flow temperature"
                    },
                    "outside_temperature": {
                        "name": "Outside temperature"
                    },
                    "return_temperature": {
                        "name": "Flow return temperature"
                    },
                    "room_temperature": {
                        "name": "Room temperature"
                    },
                    "tank_temperature": {
                        "name": "Tank temperature"
                    }
                }
            },
            "issues": {
                "deprecated_yaml_import_issue_cannot_connect": {
                    "description": "Configuring MELCloud using YAML is being removed but there was an connection error importing your YAML configuration.\n\nEnsure connection to MELCloud works and restart Home Assistant to try again or remove the MELCloud YAML configuration from your configuration.yaml file and continue to [set up the integration](\/config\/integrations\/dashboard\/add?domain=melcoud) manually.",
                    "title": "The MELCloud YAML configuration import failed"
                },
                "deprecated_yaml_import_issue_invalid_auth": {
                    "description": "Configuring MELCloud using YAML is being removed but there was an authentication error importing your YAML configuration.\n\nCorrect the YAML configuration and restart Home Assistant to try again or remove the MELCloud YAML configuration from your configuration.yaml file and continue to [set up the integration](\/config\/integrations\/dashboard\/add?domain=melcoud) manually.",
                    "title": "The MELCloud YAML configuration import failed"
                }
            },
            "services": {
                "set_vane_horizontal": {
                    "description": "Sets horizontal vane position.",
                    "fields": {
                        "position": {
                            "description": "Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute.",
                            "name": "Position"
                        }
                    },
                    "name": "Set vane horizontal"
                },
                "set_vane_vertical": {
                    "description": "Sets vertical vane position.",
                    "fields": {
                        "position": {
                            "description": "Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute.",
                            "name": "Position"
                        }
                    },
                    "name": "Set vane vertical"
                }
            }
        },
        "melnor": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_devices_found": "There aren't any Melnor Bluetooth devices nearby."
                },
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to add the Melnor Bluetooth valve `{name}` to Home Assistant?",
                        "title": "Discovered Melnor Bluetooth valve"
                    }
                }
            },
            "entity": {
                "number": {
                    "frequency_duration_minutes": {
                        "name": "Schedule duration"
                    },
                    "frequency_interval_hours": {
                        "name": "Schedule interval"
                    },
                    "manual_minutes": {
                        "name": "Manual duration"
                    }
                },
                "sensor": {
                    "manual_cycle_end": {
                        "name": "Manual cycle end"
                    },
                    "next_cycle": {
                        "name": "Next cycle"
                    },
                    "rssi": {
                        "name": "RSSI"
                    }
                },
                "switch": {
                    "frequency": {
                        "name": "Schedule"
                    }
                },
                "time": {
                    "frequency_start_time": {
                        "name": "Schedule start time"
                    }
                }
            }
        },
        "met": {
            "config": {
                "abort": {
                    "no_home": "No home coordinates are set in the Home Assistant configuration"
                },
                "error": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "elevation": "Elevation",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name"
                        },
                        "description": "Meteorologisk institutt",
                        "title": "Location"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "elevation": "Elevation",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name"
                        },
                        "title": "Location"
                    }
                }
            }
        },
        "met_eireann": {
            "config": {
                "error": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "elevation": "Elevation",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name"
                        },
                        "description": "Enter your location to use weather data from the Met Éireann Public Weather Forecast API",
                        "title": "Location"
                    }
                }
            }
        },
        "meteo_france": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "empty": "No result in city search: please check the city field"
                },
                "step": {
                    "cities": {
                        "data": {
                            "city": "City"
                        },
                        "description": "Choose your city from the list"
                    },
                    "user": {
                        "data": {
                            "city": "City"
                        },
                        "description": "Enter the postal code (only for France, recommended) or city name"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "mode": "Forecast mode"
                        }
                    }
                }
            }
        },
        "meteoclimatic": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "not_found": "No devices found on the network"
                },
                "step": {
                    "user": {
                        "data": {
                            "code": "Station code"
                        },
                        "data_description": {
                            "code": "Looks like ESCAT4300000043206B"
                        }
                    }
                }
            }
        },
        "metoffice": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "description": "The latitude and longitude will be used to find the closest weather station.",
                        "title": "Connect to the UK Met Office"
                    }
                }
            }
        },
        "microsoft_face": {
            "services": {
                "create_group": {
                    "description": "Creates a new person group.",
                    "fields": {
                        "name": {
                            "description": "Name of the group.",
                            "name": "Name"
                        }
                    },
                    "name": "Create group"
                },
                "create_person": {
                    "description": "Creates a new person in the group.",
                    "fields": {
                        "group": {
                            "description": "Name of the group.",
                            "name": "Group"
                        },
                        "name": {
                            "description": "Name of the person.",
                            "name": "Name"
                        }
                    },
                    "name": "Create person"
                },
                "delete_group": {
                    "description": "Deletes a new person group.",
                    "fields": {
                        "name": {
                            "description": "Name of the group.",
                            "name": "Name"
                        }
                    },
                    "name": "Delete group"
                },
                "delete_person": {
                    "description": "Deletes a person in the group.",
                    "fields": {
                        "group": {
                            "description": "Name of the group.",
                            "name": "Group"
                        },
                        "name": {
                            "description": "Name of the person.",
                            "name": "Name"
                        }
                    },
                    "name": "Delete person"
                },
                "face_person": {
                    "description": "Adds a new picture to a person.",
                    "fields": {
                        "camera_entity": {
                            "description": "Camera to take a picture.",
                            "name": "Camera entity"
                        },
                        "group": {
                            "description": "Name of the group.",
                            "name": "Group"
                        },
                        "person": {
                            "description": "Name of the person.",
                            "name": "Person"
                        }
                    },
                    "name": "Face person"
                },
                "train_group": {
                    "description": "Trains a person group.",
                    "fields": {
                        "group": {
                            "description": "Name of the group.",
                            "name": "Group"
                        }
                    },
                    "name": "Train group"
                }
            }
        },
        "miflora": {
            "issues": {
                "replaced": {
                    "description": "The Mi Flora integration stopped working in Home Assistant 2022.7 and replaced by the Xiaomi BLE integration in the 2022.8 release.\n\nThere is no migration path possible, therefore, you have to add your Mi Flora device using the new integration manually.\n\nYour existing Mi Flora YAML configuration is no longer used by Home Assistant. Remove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Mi Flora integration has been replaced"
                }
            }
        },
        "mikrotik": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "name_exists": "Name exists"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password for {username} is invalid.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username",
                            "verify_ssl": "Uses an SSL certificate"
                        },
                        "title": "Set up Mikrotik Router"
                    }
                }
            },
            "options": {
                "step": {
                    "device_tracker": {
                        "data": {
                            "arp_ping": "Enable ARP ping",
                            "detection_time": "Consider home interval",
                            "force_dhcp": "Force scanning using DHCP"
                        }
                    }
                }
            }
        },
        "mill": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "cloud": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "local": {
                        "data": {
                            "ip_address": "IP Address"
                        },
                        "description": "Local IP address of the device."
                    },
                    "user": {
                        "data": {
                            "connection_type": "Select connection type"
                        },
                        "description": "Select connection type. Local requires generation 3 heaters"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "control_signal": {
                        "name": "Control signal"
                    },
                    "current_power": {
                        "name": "Current power"
                    },
                    "day_consumption": {
                        "name": "Day consumption"
                    },
                    "estimated_co2": {
                        "name": "Estimated CO2"
                    },
                    "tvoc": {
                        "name": "TVOC"
                    },
                    "uncalibrated_temperature": {
                        "name": "Uncalibrated temperature"
                    },
                    "year_consumption": {
                        "name": "Year consumption"
                    }
                }
            },
            "services": {
                "set_room_temperature": {
                    "description": "Sets Mill room temperatures.",
                    "fields": {
                        "away_temp": {
                            "description": "Away temp.",
                            "name": "Away temperature"
                        },
                        "comfort_temp": {
                            "description": "Comfort temp.",
                            "name": "Comfort temperature"
                        },
                        "room_name": {
                            "description": "Name of room to change.",
                            "name": "Room name"
                        },
                        "sleep_temp": {
                            "description": "Sleep temp.",
                            "name": "Sleep temperature"
                        }
                    },
                    "name": "Set room temperature"
                }
            }
        },
        "min_max": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "entity_ids": "Input entities",
                            "name": "Name",
                            "round_digits": "Precision",
                            "type": "Statistic characteristic"
                        },
                        "data_description": {
                            "round_digits": "Controls the number of decimal digits in the output when the statistics characteristic is mean, median or sum."
                        },
                        "description": "Create a sensor that calculates a min, max, mean, median or sum from a list of input sensors.",
                        "title": "Combine the state of several sensors"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "entity_ids": "Input entities",
                            "round_digits": "Precision",
                            "type": "Statistic characteristic"
                        },
                        "data_description": {
                            "round_digits": "Controls the number of decimal digits in the output when the statistics characteristic is mean, median or sum."
                        }
                    }
                }
            },
            "selector": {
                "type": {
                    "options": {
                        "last": "Most recently updated",
                        "max": "Maximum",
                        "mean": "Arithmetic mean",
                        "median": "Median",
                        "min": "Minimum",
                        "range": "Statistical range",
                        "sum": "Sum"
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads min\/max sensors from the YAML-configuration.",
                    "name": "Reload"
                }
            },
            "title": "Combine the state of several sensors"
        },
        "minecraft_server": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect to server. Please check the address and try again. If a port was provided, it must be within a valid range. If you are running a Minecraft Java Edition server, ensure that it is at least version 1.7.",
                    "invalid_ip": "IP address is invalid (MAC address could not be determined). Please correct it and try again.",
                    "invalid_port": "Port must be in range from 1024 to 65535. Please correct it and try again."
                },
                "step": {
                    "user": {
                        "data": {
                            "address": "Server address",
                            "host": "Host",
                            "name": "Name"
                        },
                        "description": "Set up your Minecraft Server instance to allow monitoring.",
                        "title": "Link your Minecraft Server"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "status": {
                        "name": "Status"
                    }
                },
                "sensor": {
                    "edition": {
                        "name": "Edition"
                    },
                    "game_mode": {
                        "name": "Game mode"
                    },
                    "latency": {
                        "name": "Latency"
                    },
                    "map_name": {
                        "name": "Map name"
                    },
                    "motd": {
                        "name": "World message"
                    },
                    "players_max": {
                        "name": "Players max"
                    },
                    "players_online": {
                        "name": "Players online"
                    },
                    "protocol_version": {
                        "name": "Protocol version"
                    },
                    "version": {
                        "name": "Version"
                    }
                }
            }
        },
        "minio": {
            "services": {
                "get": {
                    "description": "Downloads file from Minio.",
                    "fields": {
                        "bucket": {
                            "description": "Bucket to use.",
                            "name": "Bucket"
                        },
                        "file_path": {
                            "description": "File path on local filesystem.",
                            "name": "File path"
                        },
                        "key": {
                            "description": "Object key of the file.",
                            "name": "Key"
                        }
                    },
                    "name": "Get"
                },
                "put": {
                    "description": "Uploads file to Minio.",
                    "fields": {
                        "bucket": {
                            "description": "Bucket to use.",
                            "name": "Bucket"
                        },
                        "file_path": {
                            "description": "File path on local filesystem.",
                            "name": "File path"
                        },
                        "key": {
                            "description": "Object key of the file.",
                            "name": "Key"
                        }
                    },
                    "name": "Put"
                },
                "remove": {
                    "description": "Deletes file from Minio.",
                    "fields": {
                        "bucket": {
                            "description": "Bucket to use.",
                            "name": "Bucket"
                        },
                        "key": {
                            "description": "Object key of the file.",
                            "name": "Key"
                        }
                    },
                    "name": "Remove"
                }
            }
        },
        "mitemp_bt": {
            "issues": {
                "replaced": {
                    "description": "The Xiaomi Mijia BLE Temperature and Humidity Sensor integration stopped working in Home Assistant 2022.7 and was replaced by the Xiaomi BLE integration in the 2022.8 release.\n\nThere is no migration path possible, therefore, you have to add your Xiaomi Mijia BLE device using the new integration manually.\n\nYour existing Xiaomi Mijia BLE Temperature and Humidity Sensor YAML configuration is no longer used by Home Assistant. Remove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Xiaomi Mijia BLE Temperature and Humidity Sensor integration has been replaced"
                }
            }
        },
        "mjpeg": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "mjpeg_url": "MJPEG URL",
                            "name": "Name",
                            "password": "Password",
                            "still_image_url": "Still Image URL",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "options": {
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "init": {
                        "data": {
                            "mjpeg_url": "MJPEG URL",
                            "name": "Name",
                            "password": "Password",
                            "still_image_url": "Still Image URL",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            }
        },
        "moat": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "mobile_app": {
            "config": {
                "abort": {
                    "install_app": "Open the mobile app to set up the integration with Home Assistant. See [the docs]({apps_url}) for a list of compatible apps."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up the Mobile App component?"
                    }
                }
            },
            "device_automation": {
                "action_type": {
                    "notify": "Send a notification"
                }
            },
            "title": "Mobile App"
        },
        "modbus": {
            "issues": {
                "deprecated_close_comm_config": {
                    "description": "Please remove the `{config_key}` key from the {integration} entry in your configuration.yaml file and restart Home Assistant to fix this issue.\n\nCommunication is automatically closed on errors, see [the documentation]({url}) for other error handling parameters.",
                    "title": "`{config_key}` configuration key is being removed"
                },
                "deprecated_retry_on_empty": {
                    "description": "Please remove the `{config_key}` key from the {integration} entry in your configuration.yaml file and restart Home Assistant to fix this issue.\n\nRetry on empty is automatically applied, see [the documentation]({url}) for other error handling parameters.",
                    "title": "`{config_key}` configuration key is being removed"
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads all modbus entities.",
                    "name": "Reload"
                },
                "restart": {
                    "description": "Restarts modbus hub (if running stop then start).",
                    "fields": {
                        "hub": {
                            "description": "Modbus hub name.",
                            "name": "Hub"
                        }
                    },
                    "name": "Restart"
                },
                "stop": {
                    "description": "Stops modbus hub.",
                    "fields": {
                        "hub": {
                            "description": "Modbus hub name.",
                            "name": "Hub"
                        }
                    },
                    "name": "Stop"
                },
                "write_coil": {
                    "description": "Writes to a modbus coil.",
                    "fields": {
                        "address": {
                            "description": "Address of the register to write to.",
                            "name": "Address"
                        },
                        "hub": {
                            "description": "Modbus hub name.",
                            "name": "Hub"
                        },
                        "slave": {
                            "description": "Address of the modbus unit\/slave.",
                            "name": "Slave"
                        },
                        "state": {
                            "description": "State to write.",
                            "name": "State"
                        }
                    },
                    "name": "Write coil"
                },
                "write_register": {
                    "description": "Writes to a modbus holding register.",
                    "fields": {
                        "address": {
                            "description": "Address of the holding register to write to.",
                            "name": "Address"
                        },
                        "hub": {
                            "description": "Modbus hub name.",
                            "name": "Hub"
                        },
                        "slave": {
                            "description": "Address of the modbus unit\/slave.",
                            "name": "Slave"
                        },
                        "value": {
                            "description": "Value (single value or array) to write.",
                            "name": "Value"
                        }
                    },
                    "name": "Write register"
                }
            }
        },
        "modem_callerid": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No remaining devices found"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "usb_confirm": {
                        "description": "This is an integration for landline calls using a CX93001 voice modem. This can retrieve caller ID information with an option to reject an incoming call."
                    },
                    "user": {
                        "data": {
                            "name": "Name",
                            "port": "Port"
                        },
                        "description": "This is an integration for landline calls using a CX93001 voice modem. This can retrieve caller ID information with an option to reject an incoming call."
                    }
                }
            },
            "entity": {
                "button": {
                    "phone_modem_reject": {
                        "name": "Phone modem reject"
                    }
                }
            }
        },
        "modern_forms": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Set up your Modern Forms fan to integrate with Home Assistant."
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the Modern Forms fan named `{name}` to Home Assistant?",
                        "title": "Discovered Modern Forms fan device"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "fan_sleep_timer_active": {
                        "name": "Fan sleep timer active"
                    },
                    "light_sleep_timer_active": {
                        "name": "Light sleep timer active"
                    }
                },
                "fan": {
                    "fan": {
                        "name": "Fan"
                    }
                },
                "light": {
                    "light": {
                        "name": "Light"
                    }
                },
                "sensor": {
                    "fan_timer_remaining_time": {
                        "name": "Fan sleep time"
                    },
                    "light_timer_remaining_time": {
                        "name": "Light sleep time"
                    }
                },
                "switch": {
                    "adaptive_learning": {
                        "name": "Adaptive learning"
                    },
                    "away_mode": {
                        "name": "Away mode"
                    }
                }
            },
            "services": {
                "clear_fan_sleep_timer": {
                    "description": "Clears the sleep timer on a Modern Forms fan.",
                    "name": "Clear fan sleep timer"
                },
                "clear_light_sleep_timer": {
                    "description": "Clears the sleep timer on a Modern Forms light.",
                    "name": "Clear light sleep timer"
                },
                "set_fan_sleep_timer": {
                    "description": "Sets a sleep timer on a Modern Forms fan.",
                    "fields": {
                        "sleep_time": {
                            "description": "Number of minutes to set the timer.",
                            "name": "Sleep time"
                        }
                    },
                    "name": "Set fan sleep timer"
                },
                "set_light_sleep_timer": {
                    "description": "Sets a sleep timer on a Modern Forms light.",
                    "fields": {
                        "sleep_time": {
                            "description": "Number of minutes to set the timer.",
                            "name": "Sleep time"
                        }
                    },
                    "name": "Set light sleep timer"
                }
            }
        },
        "moehlenhoff_alpha2": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "title": "Möhlenhoff Alpha2"
        },
        "monoprice": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "port": "Port",
                            "source_1": "Name of source #1",
                            "source_2": "Name of source #2",
                            "source_3": "Name of source #3",
                            "source_4": "Name of source #4",
                            "source_5": "Name of source #5",
                            "source_6": "Name of source #6"
                        },
                        "title": "Connect to the device"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "source_1": "Name of source #1",
                            "source_2": "Name of source #2",
                            "source_3": "Name of source #3",
                            "source_4": "Name of source #4",
                            "source_5": "Name of source #5",
                            "source_6": "Name of source #6"
                        },
                        "title": "Configure sources"
                    }
                }
            },
            "services": {
                "restore": {
                    "description": "Restores a snapshot of the media player zone.",
                    "name": "Restore"
                },
                "snapshot": {
                    "description": "Takes a snapshot of the media player zone.",
                    "name": "Snapshot"
                }
            }
        },
        "moon": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "phase": {
                        "name": "Phase",
                        "state": {
                            "first_quarter": "First quarter",
                            "full_moon": "Full moon",
                            "last_quarter": "Last quarter",
                            "new_moon": "New moon",
                            "waning_crescent": "Waning crescent",
                            "waning_gibbous": "Waning gibbous",
                            "waxing_crescent": "Waxing crescent",
                            "waxing_gibbous": "Waxing gibbous"
                        }
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Moon using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Moon YAML configuration has been removed"
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "moon__phase": {
                            "first_quarter": "First quarter",
                            "full_moon": "Full moon",
                            "last_quarter": "Last quarter",
                            "new_moon": "New moon",
                            "waning_crescent": "Waning crescent",
                            "waning_gibbous": "Waning gibbous",
                            "waxing_crescent": "Waxing crescent",
                            "waxing_gibbous": "Waxing gibbous"
                        }
                    }
                }
            },
            "title": "Moon"
        },
        "mopeka": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "motion_blinds": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "connection_error": "Failed to connect",
                    "not_motionblinds": "Discovered device is not a Motion gateway"
                },
                "error": {
                    "discovery_error": "Failed to discover a Motion Gateway"
                },
                "flow_title": "{short_mac} ({ip_address})",
                "step": {
                    "connect": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "You will need the 16 character API Key, see https:\/\/www.home-assistant.io\/integrations\/motion_blinds\/#retrieving-the-key for instructions"
                    },
                    "select": {
                        "data": {
                            "select_ip": "IP Address"
                        },
                        "description": "Run the setup again if you want to connect additional Motion Gateways",
                        "title": "Select the Motion Gateway that you wish to connect"
                    },
                    "user": {
                        "data": {
                            "host": "IP Address"
                        },
                        "description": "Connect to your Motion Gateway, if the IP address is not set, auto-discovery is used"
                    }
                }
            },
            "entity": {
                "cover": {
                    "bottom": {
                        "name": "Bottom"
                    },
                    "combined": {
                        "name": "Combined"
                    },
                    "top": {
                        "name": "Top"
                    }
                },
                "sensor": {
                    "bottom_battery": {
                        "name": "Bottom battery"
                    },
                    "top_battery": {
                        "name": "Top battery"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "wait_for_push": "Wait for multicast push on update"
                        }
                    }
                }
            },
            "services": {
                "set_absolute_position": {
                    "description": "Sets the absolute position of the cover.",
                    "fields": {
                        "absolute_position": {
                            "description": "Absolute position to move to.",
                            "name": "Absolute position"
                        },
                        "tilt_position": {
                            "description": "Tilt position to move to.",
                            "name": "Tilt position"
                        },
                        "width": {
                            "description": "Specify the width that is covered, only for TDBU Combined entities.",
                            "name": "Width"
                        }
                    },
                    "name": "Set absolute position"
                }
            }
        },
        "motioneye": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_url": "Invalid URL",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to configure Home Assistant to connect to the motionEye service provided by the add-on: {addon}?",
                        "title": "motionEye via Home Assistant add-on"
                    },
                    "user": {
                        "data": {
                            "admin_password": "Admin password",
                            "admin_username": "Admin username",
                            "surveillance_password": "Surveillance password",
                            "surveillance_username": "Surveillance username",
                            "url": "URL"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "actions": {
                        "name": "Actions"
                    }
                },
                "switch": {
                    "motion_detection": {
                        "name": "Motion detection"
                    },
                    "movies": {
                        "name": "Movies"
                    },
                    "still_images": {
                        "name": "Still images"
                    },
                    "text_overlay": {
                        "name": "Text overlay"
                    },
                    "upload_enabled": {
                        "name": "Upload enabled"
                    },
                    "video_streaming": {
                        "name": "Video streaming"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "stream_url_template": "Stream URL template",
                            "webhook_set": "Configure motionEye webhooks to report events to Home Assistant",
                            "webhook_set_overwrite": "Overwrite unrecognized webhooks"
                        }
                    }
                }
            },
            "services": {
                "action": {
                    "description": "Triggers a motionEye action.",
                    "fields": {
                        "action": {
                            "description": "Action to trigger.",
                            "name": "Action"
                        }
                    },
                    "name": "Action"
                },
                "set_text_overlay": {
                    "description": "Sets the text overlay for a camera.",
                    "fields": {
                        "custom_left_text": {
                            "description": "Custom text to display on the left.",
                            "name": "Left custom text"
                        },
                        "custom_right_text": {
                            "description": "Custom text to display on the right.",
                            "name": "Right custom text"
                        },
                        "left_text": {
                            "description": "Text to display on the left.",
                            "name": "Left text overlay"
                        },
                        "right_text": {
                            "description": "Text to display on the right.",
                            "name": "Right text overlay"
                        }
                    },
                    "name": "Set text overlay"
                },
                "snapshot": {
                    "description": "Triggers a motionEye still snapshot.",
                    "name": "Snapshot"
                }
            }
        },
        "mqtt": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "bad_birth": "Invalid birth topic",
                    "bad_certificate": "The CA certificate is invalid",
                    "bad_client_cert": "Invalid client certificate, ensure a PEM coded file is supplied",
                    "bad_client_cert_key": "Client certificate and private key are not a valid pair",
                    "bad_client_key": "Invalid private key, ensure a PEM coded file is supplied without password",
                    "bad_discovery_prefix": "Invalid discovery prefix",
                    "bad_will": "Invalid will topic",
                    "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
                    "cannot_connect": "Failed to connect",
                    "invalid_inclusion": "The client certificate and private key must be configurered together"
                },
                "step": {
                    "broker": {
                        "data": {
                            "advanced_options": "Advanced options",
                            "broker": "Broker",
                            "certificate": "Upload custom CA certificate file",
                            "client_cert": "Upload client certificate file",
                            "client_id": "Client ID (leave empty to randomly generated one)",
                            "client_key": "Upload private key file",
                            "keepalive": "The time between sending keep alive messages",
                            "password": "Password",
                            "port": "Port",
                            "protocol": "MQTT protocol",
                            "set_ca_cert": "Broker certificate validation",
                            "set_client_cert": "Use a client certificate",
                            "tls_insecure": "Ignore broker certificate validation",
                            "transport": "MQTT transport",
                            "username": "Username",
                            "ws_headers": "WebSocket headers in JSON format",
                            "ws_path": "WebSocket path"
                        },
                        "description": "Please enter the connection information of your MQTT broker."
                    },
                    "hassio_confirm": {
                        "data": {
                            "discovery": "Enable discovery"
                        },
                        "description": "Do you want to configure Home Assistant to connect to the MQTT broker provided by the add-on {addon}?",
                        "title": "MQTT Broker via Home Assistant add-on"
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "button_1": "First button",
                    "button_2": "Second button",
                    "button_3": "Third button",
                    "button_4": "Fourth button",
                    "button_5": "Fifth button",
                    "button_6": "Sixth button",
                    "turn_off": "Turn off",
                    "turn_on": "Turn on"
                },
                "trigger_type": {
                    "button_double_press": "\"{subtype}\" double clicked",
                    "button_long_press": "\"{subtype}\" continuously pressed",
                    "button_long_release": "\"{subtype}\" released after long press",
                    "button_quadruple_press": "\"{subtype}\" quadruple clicked",
                    "button_quintuple_press": "\"{subtype}\" quintuple clicked",
                    "button_short_press": "\"{subtype}\" pressed",
                    "button_short_release": "\"{subtype}\" released",
                    "button_triple_press": "\"{subtype}\" triple clicked"
                }
            },
            "issues": {
                "deprecated_climate_aux_property": {
                    "description": "Entity `{entity_id}` has auxiliary heat support enabled, which has been deprecated for MQTT climate devices. Please adjust your configuration and remove deprecated config options from your configuration and restart Home Assistant to fix this issue.",
                    "title": "MQTT entities with auxiliary heat support found"
                },
                "deprecated_yaml": {
                    "description": "Manually configured MQTT {platform}(s) found under platform key `{platform}`.\n\nPlease move the configuration to the `mqtt` integration key and restart Home Assistant to fix this issue. See the [documentation]({more_info_url}), for more information.",
                    "title": "Your manually configured MQTT {platform}(s) needs attention"
                },
                "deprecated_yaml_broker_settings": {
                    "description": "The following settings found in `configuration.yaml` were migrated to MQTT config entry and will now override the settings in `configuration.yaml`:\n`{deprecated_settings}`\n\nPlease remove these settings from `configuration.yaml` and restart Home Assistant to fix this issue. See the [documentation]({more_info_url}), for more information.",
                    "title": "Deprecated MQTT settings found in `configuration.yaml`"
                },
                "deprecation_mqtt_legacy_vacuum_discovery": {
                    "description": "MQTT vacuum entities that use the legacy schema are deprecated, please adjust your devices to use the correct schema and restart Home Assistant to fix this issue.",
                    "title": "MQTT vacuum entities with legacy schema added through MQTT discovery"
                },
                "deprecation_mqtt_legacy_vacuum_yaml": {
                    "description": "MQTT vacuum entities that use the legacy schema are deprecated, please adjust your configuration.yaml and restart Home Assistant to fix this issue.",
                    "title": "MQTT vacuum entities with legacy schema found in your configuration.yaml"
                },
                "entity_name_is_device_name_discovery": {
                    "description": "Some MQTT entities have an entity name equal to the device name. This is not expected. The entity name is set to `null` as a work-a-round to avoid a duplicate name. Please inform the maintainer of the software application that supplies the affected entities to fix this issue.\n\nList of affected entities:\n\n{config}",
                    "title": "Discovered MQTT entities with a name that is equal to the device name"
                },
                "entity_name_is_device_name_yaml": {
                    "description": "Some MQTT entities have an entity name equal to the device name. This is not expected. The entity name is set to `null` as a work-a-round to avoid a duplicate name. Please update your configuration and restart Home Assistant to fix this issue.\n\nList of affected entities:\n\n{config}",
                    "title": "Manual configured MQTT entities with a name that is equal to the device name"
                },
                "entity_name_startswith_device_name_discovery": {
                    "description": "Some MQTT entities have an entity name that starts with the device name. This is not expected. To avoid a duplicate name the device name prefix is stripped off the entity name as a work-a-round. Please inform the maintainer of the software application that supplies the affected entities to fix this issue. \n\nList of affected entities:\n\n{config}",
                    "title": "Discovered entities with a name that starts with the device name"
                },
                "entity_name_startswith_device_name_yaml": {
                    "description": "Some MQTT entities have an entity name that starts with the device name. This is not expected. To avoid a duplicate name the device name prefix is stripped off the entity name as a work-a-round. Please update your configuration and restart Home Assistant to fix this issue. \n\nList of affected entities:\n\n{config}",
                    "title": "Manual configured MQTT entities with a name that starts with the device name"
                }
            },
            "options": {
                "error": {
                    "bad_birth": "Invalid birth topic",
                    "bad_certificate": "The CA certificate is invalid",
                    "bad_client_cert": "Invalid client certificate, ensure a PEM coded file is supplied",
                    "bad_client_cert_key": "Client certificate and private key are not a valid pair",
                    "bad_client_key": "Invalid private key, ensure a PEM coded file is supplied without password",
                    "bad_discovery_prefix": "Invalid discovery prefix",
                    "bad_will": "Invalid will topic",
                    "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
                    "cannot_connect": "Failed to connect",
                    "invalid_inclusion": "The client certificate and private key must be configurered together"
                },
                "step": {
                    "broker": {
                        "data": {
                            "advanced_options": "Advanced options",
                            "broker": "Broker",
                            "certificate": "Upload custom CA certificate file",
                            "client_cert": "Upload client certificate file",
                            "client_id": "Client ID (leave empty to randomly generated one)",
                            "client_key": "Upload private key file",
                            "keepalive": "The time between sending keep alive messages",
                            "password": "Password",
                            "port": "Port",
                            "protocol": "MQTT protocol",
                            "set_ca_cert": "Broker certificate validation",
                            "set_client_cert": "Use a client certificate",
                            "tls_insecure": "Ignore broker certificate validation",
                            "transport": "MQTT transport",
                            "username": "Username",
                            "ws_headers": "WebSocket headers in JSON format",
                            "ws_path": "WebSocket path"
                        },
                        "description": "Please enter the connection information of your MQTT broker.",
                        "title": "Broker options"
                    },
                    "options": {
                        "data": {
                            "birth_enable": "Enable birth message",
                            "birth_payload": "Birth message payload",
                            "birth_qos": "Birth message QoS",
                            "birth_retain": "Birth message retain",
                            "birth_topic": "Birth message topic",
                            "discovery": "Enable discovery",
                            "discovery_prefix": "Discovery prefix",
                            "will_enable": "Enable will message",
                            "will_payload": "Will message payload",
                            "will_qos": "Will message QoS",
                            "will_retain": "Will message retain",
                            "will_topic": "Will message topic"
                        },
                        "description": "Discovery - If discovery is enabled (recommended), Home Assistant will automatically discover devices and entities which publish their configuration on the MQTT broker. If discovery is disabled, all configuration must be done manually.\nDiscovery prefix - The prefix a configuration topic for automatic discovery must start with.\nBirth message - The birth message will be sent each time Home Assistant (re)connects to the MQTT broker.\nWill message - The will message will be sent each time Home Assistant loses its connection to the broker, both in case of a clean (e.g. Home Assistant shutting down) and in case of an unclean (e.g. Home Assistant crashing or losing its network connection) disconnect.",
                        "title": "MQTT options"
                    }
                }
            },
            "selector": {
                "set_ca_cert": {
                    "options": {
                        "auto": "Auto",
                        "custom": "Custom",
                        "off": "Off"
                    }
                }
            },
            "services": {
                "dump": {
                    "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
                    "fields": {
                        "duration": {
                            "description": "How long we should listen for messages in seconds.",
                            "name": "Duration"
                        },
                        "topic": {
                            "description": "Topic to listen to.",
                            "name": "Topic"
                        }
                    },
                    "name": "Export"
                },
                "publish": {
                    "description": "Publishes a message to an MQTT topic.",
                    "fields": {
                        "payload": {
                            "description": "The payload to publish.",
                            "name": "Payload"
                        },
                        "payload_template": {
                            "description": "Template to render as a payload value. If a payload is provided, the template is ignored.",
                            "name": "Payload template"
                        },
                        "qos": {
                            "description": "Quality of Service to use. O. At most once. 1: At least once. 2: Exactly once.",
                            "name": "QoS"
                        },
                        "retain": {
                            "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.",
                            "name": "Retain"
                        },
                        "topic": {
                            "description": "Topic to publish to.",
                            "name": "Topic"
                        }
                    },
                    "name": "Publish"
                },
                "reload": {
                    "description": "Reloads MQTT entities from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "mullvad": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "description": "Set up the Mullvad VPN integration?"
                    }
                }
            }
        },
        "mutesync": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Enable authentication in mütesync Preferences > Authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "in_meeting": {
                        "name": "In meeting"
                    },
                    "muted": {
                        "name": "Muted"
                    }
                }
            }
        },
        "myq": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password for {username} is no longer valid.",
                        "title": "Reauthenticate your MyQ Account"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Connect to the MyQ Gateway"
                    }
                }
            }
        },
        "mysensors": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "duplicate_persistence_file": "Persistence file already in use",
                    "duplicate_topic": "Topic already in use",
                    "invalid_auth": "Invalid authentication",
                    "invalid_device": "Invalid device",
                    "invalid_ip": "Invalid IP address",
                    "invalid_persistence_file": "Invalid persistence file",
                    "invalid_port": "Invalid port number",
                    "invalid_publish_topic": "Invalid publish topic",
                    "invalid_serial": "Invalid serial port",
                    "invalid_subscribe_topic": "Invalid subscribe topic",
                    "invalid_version": "Invalid MySensors version",
                    "mqtt_required": "The MQTT integration is not set up",
                    "not_a_number": "Please enter a number",
                    "port_out_of_range": "Port number must be at least 1 and at most 65535",
                    "same_topic": "Subscribe and publish topics are the same",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "duplicate_persistence_file": "Persistence file already in use",
                    "duplicate_topic": "Topic already in use",
                    "invalid_auth": "Invalid authentication",
                    "invalid_device": "Invalid device",
                    "invalid_ip": "Invalid IP address",
                    "invalid_persistence_file": "Invalid persistence file",
                    "invalid_port": "Invalid port number",
                    "invalid_publish_topic": "Invalid publish topic",
                    "invalid_serial": "Invalid serial port",
                    "invalid_subscribe_topic": "Invalid subscribe topic",
                    "invalid_version": "Invalid MySensors version",
                    "not_a_number": "Please enter a number",
                    "port_out_of_range": "Port number must be at least 1 and at most 65535",
                    "same_topic": "Subscribe and publish topics are the same",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "gw_mqtt": {
                        "data": {
                            "persistence_file": "Persistence file (leave empty to auto-generate)",
                            "retain": "MQTT retain",
                            "topic_in_prefix": "Prefix for input topics (topic_in_prefix)",
                            "topic_out_prefix": "Prefix for output topics (topic_out_prefix)",
                            "version": "MySensors version"
                        },
                        "description": "MQTT gateway setup"
                    },
                    "gw_serial": {
                        "data": {
                            "baud_rate": "baud rate",
                            "device": "Serial port",
                            "persistence_file": "Persistence file (leave empty to auto-generate)",
                            "version": "MySensors version"
                        },
                        "description": "Serial gateway setup"
                    },
                    "gw_tcp": {
                        "data": {
                            "device": "IP address of the gateway",
                            "persistence_file": "persistence file (leave empty to auto-generate)",
                            "tcp_port": "Port",
                            "version": "MySensors version"
                        },
                        "description": "Ethernet gateway setup"
                    },
                    "select_gateway_type": {
                        "description": "Select which gateway to configure.",
                        "menu_options": {
                            "gw_mqtt": "Configure an MQTT gateway",
                            "gw_serial": "Configure a serial gateway",
                            "gw_tcp": "Configure a TCP gateway"
                        }
                    },
                    "user": {
                        "data": {
                            "gateway_type": "Gateway type"
                        },
                        "description": "Choose connection method to the gateway"
                    }
                }
            }
        },
        "mystrom": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring myStrom using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the myStrom YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The myStrom YAML configuration is being removed"
                }
            }
        },
        "nam": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "device_unsupported": "The device is unsupported.",
                    "reauth_successful": "Re-authentication was successful",
                    "reauth_unsuccessful": "Re-authentication was unsuccessful, please remove the integration and set it up again."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{host}",
                "step": {
                    "confirm_discovery": {
                        "description": "Do you want to set up Nettigo Air Monitor at {host}?"
                    },
                    "credentials": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter the username and password."
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter the correct username and password for host: {host}"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Set up Nettigo Air Monitor integration."
                    }
                }
            },
            "entity": {
                "button": {
                    "restart": {
                        "name": "Restart"
                    }
                },
                "sensor": {
                    "bme280_humidity": {
                        "name": "BME280 humidity"
                    },
                    "bme280_pressure": {
                        "name": "BME280 pressure"
                    },
                    "bme280_temperature": {
                        "name": "BME280 temperature"
                    },
                    "bmp180_pressure": {
                        "name": "BMP180 pressure"
                    },
                    "bmp180_temperature": {
                        "name": "BMP180 temperature"
                    },
                    "bmp280_pressure": {
                        "name": "BMP280 pressure"
                    },
                    "bmp280_temperature": {
                        "name": "BMP280 temperature"
                    },
                    "dht22_humidity": {
                        "name": "DHT22 humidity"
                    },
                    "dht22_temperature": {
                        "name": "DHT22 temperature"
                    },
                    "heca_humidity": {
                        "name": "HECA humidity"
                    },
                    "heca_temperature": {
                        "name": "HECA temperature"
                    },
                    "last_restart": {
                        "name": "Last restart"
                    },
                    "mhz14a_carbon_dioxide": {
                        "name": "MH-Z14A carbon dioxide"
                    },
                    "pmsx003_caqi": {
                        "name": "PMSx003 common air quality index"
                    },
                    "pmsx003_caqi_level": {
                        "name": "PMSx003 common air quality index level",
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "very_high": "Very high",
                            "very_low": "Very low"
                        }
                    },
                    "pmsx003_pm10": {
                        "name": "PMSx003 PM10"
                    },
                    "pmsx003_pm1": {
                        "name": "PMSx003 PM1"
                    },
                    "pmsx003_pm25": {
                        "name": "PMSx003 PM2.5"
                    },
                    "sds011_caqi": {
                        "name": "SDS011 common air quality index"
                    },
                    "sds011_caqi_level": {
                        "name": "SDS011 common air quality index level",
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "very_high": "Very high",
                            "very_low": "Very low"
                        }
                    },
                    "sds011_pm10": {
                        "name": "SDS011 PM10"
                    },
                    "sds011_pm25": {
                        "name": "SDS011 PM2.5"
                    },
                    "sht3x_humidity": {
                        "name": "SHT3X humidity"
                    },
                    "sht3x_temperature": {
                        "name": "SHT3X temperature"
                    },
                    "signal_strength": {
                        "name": "Signal strength"
                    },
                    "sps30_caqi": {
                        "name": "SPS30 common air quality index"
                    },
                    "sps30_caqi_level": {
                        "name": "SPS30 common air quality index level",
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "very_high": "Very high",
                            "very_low": "Very low"
                        }
                    },
                    "sps30_pm10": {
                        "name": "SPS30 PM10"
                    },
                    "sps30_pm1": {
                        "name": "SPS30 PM1"
                    },
                    "sps30_pm25": {
                        "name": "SPS30 PM2.5"
                    },
                    "sps30_pm4": {
                        "name": "SPS30 PM4"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "nam__caqi_level": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "very high": "Very high",
                            "very low": "Very low"
                        }
                    }
                }
            }
        },
        "nanoleaf": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_token": "Invalid access token",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "not_allowing_new_tokens": "Nanoleaf is not allowing new tokens, follow the instructions above.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "link": {
                        "description": "Press and hold the power button on your Nanoleaf for 5 seconds until the button LEDs start flashing, then click **SUBMIT** within 30 seconds.",
                        "title": "Link Nanoleaf"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "swipe_down": "Swipe Down",
                    "swipe_left": "Swipe Left",
                    "swipe_right": "Swipe Right",
                    "swipe_up": "Swipe Up"
                }
            }
        },
        "neato": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "reauth_successful": "Re-authentication was successful"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "title": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "button": {
                    "dismiss_alert": {
                        "name": "Dismiss alert"
                    }
                },
                "camera": {
                    "cleaning_map": {
                        "name": "Cleaning map"
                    }
                },
                "switch": {
                    "schedule": {
                        "name": "Schedule"
                    }
                }
            },
            "services": {
                "custom_cleaning": {
                    "description": "Zone cleaning service call specific to Neato Botvacs.",
                    "fields": {
                        "category": {
                            "description": "Whether to use a persistent map or not for cleaning (i.e. No go lines): 2 for no map, 4 for map. Default to using map if not set (and fallback to no map if no map is found).",
                            "name": "Use cleaning map"
                        },
                        "mode": {
                            "description": "Set the cleaning mode: 1 for eco and 2 for turbo. Defaults to turbo if not set.",
                            "name": "Set cleaning mode"
                        },
                        "navigation": {
                            "description": "Set the navigation mode: 1 for normal, 2 for extra care, 3 for deep. Defaults to normal if not set.",
                            "name": "Set navigation mode"
                        },
                        "zone": {
                            "description": "Only supported on the Botvac D7. Name of the zone to clean. Defaults to no zone i.e. complete house cleanup.",
                            "name": "Name of the zone to clean (Only Botvac D7)"
                        }
                    },
                    "name": "Zone cleaning service"
                }
            }
        },
        "ness_alarm": {
            "services": {
                "aux": {
                    "description": "Trigger an aux output.",
                    "fields": {
                        "output_id": {
                            "description": "The aux output you wish to change.",
                            "name": "Output ID"
                        },
                        "state": {
                            "description": "The On\/Off State. If P14xE 8E is enabled then a value of true will pulse output x for the time specified in P14(x+4)E.",
                            "name": "State"
                        }
                    },
                    "name": "Aux"
                },
                "panic": {
                    "description": "Triggers a panic.",
                    "fields": {
                        "code": {
                            "description": "The user code to use to trigger the panic.",
                            "name": "Code"
                        }
                    },
                    "name": "Panic"
                }
            }
        },
        "nest": {
            "application_credentials": {
                "description": "Follow the [instructions]({more_info_url}) to configure the Cloud Console:\n\n1. Go to the [OAuth consent screen]({oauth_consent_url}) and configure\n1. Go to [Credentials]({oauth_creds_url}) and click **Create Credentials**.\n1. From the drop-down list select **OAuth client ID**.\n1. Select **Web Application** for the Application Type.\n1. Add `{redirect_url}` under *Authorized redirect URI*."
            },
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "invalid_access_token": "Invalid access token",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown_authorize_url_generation": "Unknown error generating an authorize URL."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "error": {
                    "bad_project_id": "Please enter a valid Cloud Project ID (check Cloud Console)",
                    "internal_error": "Internal error validating code",
                    "invalid_pin": "Invalid PIN",
                    "subscriber_error": "Unknown subscriber error, see logs",
                    "timeout": "Timeout validating code",
                    "unknown": "Unexpected error",
                    "wrong_project_id": "Please enter a valid Cloud Project ID (was same as Device Access Project ID)"
                },
                "step": {
                    "auth_upgrade": {
                        "description": "App Auth has been deprecated by Google to improve security, and you need to take action by creating new application credentials.\n\nOpen the [documentation]({more_info_url}) to follow along as the next steps will guide you through the steps you need to take to restore access to your Nest devices.",
                        "title": "Nest: App Auth Deprecation"
                    },
                    "cloud_project": {
                        "data": {
                            "cloud_project_id": "Google Cloud Project ID"
                        },
                        "description": "Enter the Cloud Project ID below e.g. *example-project-12345*. See the [Google Cloud Console]({cloud_console_url}) or the documentation for [more info]({more_info_url}).",
                        "title": "Nest: Enter Cloud Project ID"
                    },
                    "create_cloud_project": {
                        "description": "The Nest integration allows you to integrate your Nest Thermostats, Cameras, and Doorbells using the Smart Device Management API. The SDM API **requires a US $5** one time setup fee. See documentation for [more info]({more_info_url}).\n\n1. Go to the [Google Cloud Console]({cloud_console_url}).\n1. If this is your first project, click **Create Project** then **New Project**.\n1. Give your Cloud Project a Name and then click **Create**.\n1. Save the Cloud Project ID e.g. *example-project-12345* as you will need it later\n1. Go to API Library for [Smart Device Management API]({sdm_api_url}) and click **Enable**.\n1. Go to API Library for [Cloud Pub\/Sub API]({pubsub_api_url}) and click **Enable**.\n\nProceed when your cloud project is set up.",
                        "title": "Nest: Create and configure Cloud Project"
                    },
                    "device_project": {
                        "data": {
                            "project_id": "Device Access Project ID"
                        },
                        "description": "Create a Nest Device Access project which **requires paying Google a US $5 fee** to set up.\n1. Go to the [Device Access Console]({device_access_console_url}), and through the payment flow.\n1. Click on **Create project**\n1. Give your Device Access project a name and click **Next**.\n1. Enter your OAuth Client ID\n1. Enable events by clicking **Enable** and **Create project**.\n\nEnter your Device Access Project ID below ([more info]({more_info_url})).\n",
                        "title": "Nest: Create a Device Access Project"
                    },
                    "device_project_upgrade": {
                        "description": "Update the Nest Device Access Project with your new OAuth Client ID ([more info]({more_info_url}))\n1. Go to the [Device Access Console]({device_access_console_url}).\n1. Click the trash icon next to *OAuth Client ID*.\n1. Click the `...` overflow menu and *Add Client ID*.\n1. Enter your new OAuth Client ID and click **Add**.\n\nYour OAuth Client ID is: `{client_id}`",
                        "title": "Nest: Update Device Access Project"
                    },
                    "init": {
                        "data": {
                            "flow_impl": "Provider"
                        },
                        "description": "Pick Authentication Method",
                        "title": "Authentication Provider"
                    },
                    "link": {
                        "data": {
                            "code": "PIN Code"
                        },
                        "description": "To link your Nest account, [authorize your account]({url}).\n\nAfter authorization, copy-paste the provided PIN code below.",
                        "title": "Link Nest Account"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "pubsub": {
                        "data": {
                            "cloud_project_id": "Google Cloud Project ID"
                        },
                        "description": "Visit the [Cloud Console]({url}) to find your Google Cloud Project ID.",
                        "title": "Configure Google Cloud"
                    },
                    "reauth_confirm": {
                        "description": "The Nest integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "camera_motion": "Motion detected",
                    "camera_person": "Person detected",
                    "camera_sound": "Sound detected",
                    "doorbell_chime": "Doorbell pressed"
                }
            },
            "entity": {
                "sensor": {
                    "humidity": {
                        "name": "Humidity"
                    },
                    "temperature": {
                        "name": "Temperature"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Nest in configuration.yaml is being removed in Home Assistant 2022.10.\n\nYour existing OAuth Application Credentials and access settings have been imported into the UI automatically. Remove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Nest YAML configuration is being removed"
                },
                "legacy_nest_deprecated": {
                    "description": "Legacy Works With Nest is being removed from Home Assistant.\n\nYou must take action to use the SDM API. Remove all `nest` configuration from `configuration.yaml` and restart Home Assistant, then see the Nest [integration instructions]({documentation_url}) for set up instructions and supported devices.",
                    "title": "Legacy Works With Nest is being removed"
                },
                "legacy_nest_removed": {
                    "description": "Legacy Works With Nest has been removed from Home Assistant, and the API shuts down as of September 2023.\n\nYou must take action to use the SDM API. Remove all `nest` configuration from `configuration.yaml` and restart Home Assistant, then see the Nest [integration instructions]({documentation_url}) for set up instructions and supported devices.",
                    "title": "Legacy Works With Nest has been removed"
                },
                "removed_app_auth": {
                    "description": "To improve security and reduce phishing risk Google has deprecated the authentication method used by Home Assistant.\n\n**This requires action by you to resolve** ([more info]({more_info_url}))\n\n1.  Visit the integrations page\n1. Click Reconfigure on the Nest integration.\n1. Home Assistant will walk you through the steps to upgrade to Web Authentication.\n\nSee the Nest [integration instructions]({documentation_url}) for troubleshooting information.",
                    "title": "Nest Authentication Credentials must be updated"
                }
            },
            "services": {
                "cancel_eta": {
                    "description": "Cancels an existing estimated time of arrival window for a Nest structure.",
                    "fields": {
                        "structure": {
                            "description": "Name(s) of structure(s) to change. Defaults to all structures if not specified.",
                            "name": "Structure"
                        },
                        "trip_id": {
                            "description": "Unique ID for the trip.",
                            "name": "Trip ID"
                        }
                    },
                    "name": "Cancel ETA"
                },
                "set_away_mode": {
                    "description": "Sets the away mode for a Nest structure.",
                    "fields": {
                        "away_mode": {
                            "description": "New mode to set.",
                            "name": "Away mode"
                        },
                        "structure": {
                            "description": "Name(s) of structure(s) to change. Defaults to all structures if not specified.",
                            "name": "Structure"
                        }
                    },
                    "name": "Set away mode"
                },
                "set_eta": {
                    "description": "Sets or update the estimated time of arrival window for a Nest structure.",
                    "fields": {
                        "eta": {
                            "description": "Estimated time of arrival from now.",
                            "name": "ETA"
                        },
                        "eta_window": {
                            "description": "Estimated time of arrival window.",
                            "name": "ETA window"
                        },
                        "structure": {
                            "description": "Name(s) of structure(s) to change. Defaults to all structures if not specified.",
                            "name": "Structure"
                        },
                        "trip_id": {
                            "description": "Unique ID for the trip. Default is auto-generated using a timestamp.",
                            "name": "Trip ID"
                        }
                    },
                    "name": "Set estimated time of arrival"
                }
            }
        },
        "netatmo": {
            "config": {
                "abort": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "reauth_successful": "Re-authentication was successful",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Netatmo integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "away": "Away",
                    "hg": "Frost guard",
                    "schedule": "Schedule"
                },
                "trigger_type": {
                    "alarm_started": "{entity_name} detected an alarm",
                    "animal": "{entity_name} detected an animal",
                    "cancel_set_point": "{entity_name} has resumed its schedule",
                    "human": "{entity_name} detected a human",
                    "movement": "{entity_name} detected movement",
                    "outdoor": "{entity_name} detected an outdoor event",
                    "person": "{entity_name} detected a person",
                    "person_away": "{entity_name} detected a person has left",
                    "set_point": "Target temperature {entity_name} set manually",
                    "therm_mode": "{entity_name} switched to \"{subtype}\"",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on",
                    "vehicle": "{entity_name} detected a vehicle"
                }
            },
            "options": {
                "step": {
                    "public_weather": {
                        "data": {
                            "area_name": "Name of the area",
                            "lat_ne": "North-East corner latitude",
                            "lat_sw": "South-West corner latitude",
                            "lon_ne": "North-East corner longitude",
                            "lon_sw": "South-West corner longitude",
                            "mode": "Calculation",
                            "show_on_map": "Show on map"
                        },
                        "description": "Configure a public weather sensor for an area.",
                        "title": "Netatmo public weather sensor"
                    },
                    "public_weather_areas": {
                        "data": {
                            "new_area": "Area name",
                            "weather_areas": "Weather areas"
                        },
                        "description": "Configure public weather sensors.",
                        "title": "Netatmo public weather sensor"
                    }
                }
            },
            "services": {
                "register_webhook": {
                    "description": "Registers the webhook to the Netatmo backend.",
                    "name": "Register webhook"
                },
                "set_camera_light": {
                    "description": "Sets the light mode for a Netatmo Outdoor camera light.",
                    "fields": {
                        "camera_light_mode": {
                            "description": "Outdoor camera light mode.",
                            "name": "Camera light mode"
                        }
                    },
                    "name": "Set camera light mode"
                },
                "set_person_away": {
                    "description": "Sets a person as away. If no person is set the home will be marked as empty. Person's name must match a name known by the Netatmo Indoor (Welcome) Camera.",
                    "fields": {
                        "person": {
                            "description": "Person's name.",
                            "name": "Person"
                        }
                    },
                    "name": "Set person away"
                },
                "set_persons_home": {
                    "description": "Sets a list of persons as at home. Person's name must match a name known by the Netatmo Indoor (Welcome) Camera.",
                    "fields": {
                        "persons": {
                            "description": "List of names.",
                            "name": "Persons"
                        }
                    },
                    "name": "Set persons at home"
                },
                "set_schedule": {
                    "description": "Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.",
                    "fields": {
                        "schedule_name": {
                            "description": "Schedule name.",
                            "name": "Schedule"
                        }
                    },
                    "name": "Set heating schedule"
                },
                "unregister_webhook": {
                    "description": "Unregisters the webhook from the Netatmo backend.",
                    "name": "Unregister webhook"
                }
            }
        },
        "netgear": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_serial": "No serial number in ssdp discovery information",
                    "not_ipv4_address": "No IPv4 address in ssdp discovery information"
                },
                "error": {
                    "config": "Connection or login error: please check your configuration",
                    "info": "Failed to get info from router"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Default host: {host}\nDefault username: {username}"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "access_point_mac": {
                        "name": "Access point mac"
                    },
                    "average_ping": {
                        "name": "Average ping"
                    },
                    "cpu_utilization": {
                        "name": "CPU utilization"
                    },
                    "downlink_bandwidth": {
                        "name": "Downlink bandwidth"
                    },
                    "download_last_month": {
                        "name": "Download last month"
                    },
                    "download_last_month_average": {
                        "name": "Download last month average"
                    },
                    "download_month": {
                        "name": "Download this month"
                    },
                    "download_month_average": {
                        "name": "Download this month average"
                    },
                    "download_today": {
                        "name": "Download today"
                    },
                    "download_week": {
                        "name": "Download this week"
                    },
                    "download_week_average": {
                        "name": "Download this week average"
                    },
                    "download_yesterday": {
                        "name": "Download yesterday"
                    },
                    "ethernet_link_status": {
                        "name": "Ethernet link status"
                    },
                    "link_rate": {
                        "name": "Link rate"
                    },
                    "link_type": {
                        "name": "Link type"
                    },
                    "memory_utilization": {
                        "name": "Memory utilization"
                    },
                    "signal_strength": {
                        "name": "Signal strength"
                    },
                    "ssid": {
                        "name": "SSID"
                    },
                    "uplink_bandwidth": {
                        "name": "Uplink bandwidth"
                    },
                    "upload_last_month": {
                        "name": "Upload last month"
                    },
                    "upload_last_month_average": {
                        "name": "Upload last month average"
                    },
                    "upload_month": {
                        "name": "Upload this month"
                    },
                    "upload_month_average": {
                        "name": "Upload this month average"
                    },
                    "upload_today": {
                        "name": "Upload today"
                    },
                    "upload_week": {
                        "name": "Upload this week"
                    },
                    "upload_week_average": {
                        "name": "Upload this week average"
                    },
                    "upload_yesterday": {
                        "name": "Upload yesterday"
                    }
                },
                "switch": {
                    "2g_guest_wifi": {
                        "name": "2.4GHz guest Wi-Fi"
                    },
                    "5g_guest_wifi": {
                        "name": "5GHz guest Wi-Fi"
                    },
                    "access_control": {
                        "name": "Access control"
                    },
                    "allowed_on_network": {
                        "name": "Allowed on network"
                    },
                    "parental_control": {
                        "name": "Parental control"
                    },
                    "quality_of_service": {
                        "name": "Quality of service"
                    },
                    "smart_connect": {
                        "name": "Smart connect"
                    },
                    "traffic_meter": {
                        "name": "Traffic meter"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "consider_home": "Consider home time (seconds)"
                        },
                        "description": "Specify optional settings"
                    }
                }
            }
        },
        "netgear_lte": {
            "services": {
                "connect_lte": {
                    "description": "Asks the modem to establish the LTE connection.",
                    "fields": {
                        "host": {
                            "description": "The modem that should connect.",
                            "name": "Host"
                        }
                    },
                    "name": "Connect LTE"
                },
                "delete_sms": {
                    "description": "Deletes messages from the modem inbox.",
                    "fields": {
                        "host": {
                            "description": "The modem that should have a message deleted.",
                            "name": "Host"
                        },
                        "sms_id": {
                            "description": "Integer or list of integers with inbox IDs of messages to delete.",
                            "name": "SMS ID"
                        }
                    },
                    "name": "Delete SMS"
                },
                "disconnect_lte": {
                    "description": "Asks the modem to close the LTE connection.",
                    "fields": {
                        "host": {
                            "description": "The modem that should disconnect.",
                            "name": "Host"
                        }
                    },
                    "name": "Disconnect LTE"
                },
                "set_option": {
                    "description": "Sets options on the modem.",
                    "fields": {
                        "autoconnect": {
                            "description": "Auto-connect mode.",
                            "name": "Auto-connect"
                        },
                        "failover": {
                            "description": "Failover mode.",
                            "name": "Failover"
                        },
                        "host": {
                            "description": "The modem to set options on.",
                            "name": "Host"
                        }
                    },
                    "name": "Set option"
                }
            }
        },
        "nexia": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "brand": "Brand",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "blower_active": {
                        "name": "Blower active"
                    },
                    "emergency_heat_active": {
                        "name": "Emergency heat active"
                    }
                },
                "number": {
                    "fan_speed": {
                        "name": "Fan speed"
                    }
                },
                "sensor": {
                    "air_cleaner_mode": {
                        "name": "Air cleaner mode"
                    },
                    "current_compressor_speed": {
                        "name": "Current compressor speed"
                    },
                    "outdoor_temperature": {
                        "name": "Outdoor temperature"
                    },
                    "requested_compressor_speed": {
                        "name": "Requested compressor speed"
                    },
                    "system_status": {
                        "name": "System status"
                    },
                    "zone_setpoint_status": {
                        "name": "Zone setpoint status"
                    },
                    "zone_status": {
                        "name": "Zone status"
                    }
                },
                "switch": {
                    "hold": {
                        "name": "Hold"
                    }
                }
            },
            "services": {
                "set_aircleaner_mode": {
                    "description": "The air cleaner mode.",
                    "fields": {
                        "aircleaner_mode": {
                            "description": "The air cleaner mode to set.",
                            "name": "Air cleaner mode"
                        }
                    },
                    "name": "Set air cleaner mode"
                },
                "set_humidify_setpoint": {
                    "description": "The humidification set point.",
                    "fields": {
                        "humidity": {
                            "description": "The humidification setpoint.",
                            "name": "Humidify"
                        }
                    },
                    "name": "Set humidify set point"
                },
                "set_hvac_run_mode": {
                    "description": "The HVAC run mode.",
                    "fields": {
                        "hvac_mode": {
                            "description": "The HVAC mode to use for the schedule or hold. If not specified, the current HVAC mode will be used.",
                            "name": "HVAC mode"
                        },
                        "run_mode": {
                            "description": "Run the schedule or hold. If not specified, the current run mode will be used.",
                            "name": "Run mode"
                        }
                    },
                    "name": "Set hvac run mode"
                }
            }
        },
        "nextbus": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "invalid_agency": "The agency value selected is not valid",
                    "invalid_route": "The route value selected is not valid",
                    "invalid_stop": "The stop value selected is not valid"
                },
                "step": {
                    "agency": {
                        "data": {
                            "agency": "Metro agency"
                        },
                        "title": "Select metro agency"
                    },
                    "route": {
                        "data": {
                            "route": "Route"
                        },
                        "title": "Select route"
                    },
                    "stop": {
                        "data": {
                            "stop": "Stop"
                        },
                        "title": "Select stop"
                    }
                }
            },
            "title": "NextBus predictions"
        },
        "nextcloud": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "connection_error_during_import": "Connection error occured during yaml configuration import",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "connection_error": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "Nextcloud",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Update your login information for {url}."
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Enter your Nextcloud information."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "nextcloud_jit_enabled": {
                        "name": "JIT enabled"
                    },
                    "nextcloud_jit_on": {
                        "name": "JIT active"
                    },
                    "nextcloud_system_debug": {
                        "name": "Debug enabled"
                    },
                    "nextcloud_system_enable_avatars": {
                        "name": "Avatars enabled"
                    },
                    "nextcloud_system_enable_previews": {
                        "name": "Previews enabled"
                    },
                    "nextcloud_system_filelocking_enabled": {
                        "name": "Filelocking enabled"
                    }
                },
                "sensor": {
                    "nextcloud_activeusers_last1hour": {
                        "name": "Amount of active users last hour"
                    },
                    "nextcloud_activeusers_last24hours": {
                        "name": "Amount of active users last day"
                    },
                    "nextcloud_activeusers_last5minutes": {
                        "name": "Amount of active users last 5 minutes"
                    },
                    "nextcloud_cache_expunges": {
                        "name": "Cache expunges"
                    },
                    "nextcloud_cache_mem_size": {
                        "name": "Cache memory size"
                    },
                    "nextcloud_cache_memory_type": {
                        "name": "Cache memory"
                    },
                    "nextcloud_cache_num_entries": {
                        "name": "Cache number of entires"
                    },
                    "nextcloud_cache_num_hits": {
                        "name": "Cache number of hits"
                    },
                    "nextcloud_cache_num_inserts": {
                        "name": "Cache number of inserts"
                    },
                    "nextcloud_cache_num_misses": {
                        "name": "Cache number of misses"
                    },
                    "nextcloud_cache_num_slots": {
                        "name": "Cache number of slots"
                    },
                    "nextcloud_cache_start_time": {
                        "name": "Cache start time"
                    },
                    "nextcloud_cache_ttl": {
                        "name": "Cache ttl"
                    },
                    "nextcloud_database_size": {
                        "name": "Database size"
                    },
                    "nextcloud_database_type": {
                        "name": "Database type"
                    },
                    "nextcloud_database_version": {
                        "name": "Database version"
                    },
                    "nextcloud_interned_strings_usage_buffer_size": {
                        "name": "Interned buffer size"
                    },
                    "nextcloud_interned_strings_usage_free_memory": {
                        "name": "Interned free memory"
                    },
                    "nextcloud_interned_strings_usage_number_of_strings": {
                        "name": "Interned number of strings"
                    },
                    "nextcloud_interned_strings_usage_used_memory": {
                        "name": "Interned used memory"
                    },
                    "nextcloud_jit_buffer_free": {
                        "name": "JIT buffer free"
                    },
                    "nextcloud_jit_buffer_size": {
                        "name": "JIT buffer size"
                    },
                    "nextcloud_jit_kind": {
                        "name": "JIT kind"
                    },
                    "nextcloud_jit_opt_flags": {
                        "name": "JIT opt flags"
                    },
                    "nextcloud_jit_opt_level": {
                        "name": "JIT opt level"
                    },
                    "nextcloud_opcache_statistics_blacklist_miss_ratio": {
                        "name": "Opcache blacklist miss ratio"
                    },
                    "nextcloud_opcache_statistics_blacklist_misses": {
                        "name": "Opcache blacklist misses"
                    },
                    "nextcloud_opcache_statistics_hash_restarts": {
                        "name": "Opcache hash restarts"
                    },
                    "nextcloud_opcache_statistics_hits": {
                        "name": "Opcache hits"
                    },
                    "nextcloud_opcache_statistics_last_restart_time": {
                        "name": "Opcache last restart time"
                    },
                    "nextcloud_opcache_statistics_manual_restarts": {
                        "name": "Opcache manual restarts"
                    },
                    "nextcloud_opcache_statistics_max_cached_keys": {
                        "name": "Opcache max cached keys"
                    },
                    "nextcloud_opcache_statistics_misses": {
                        "name": "Opcache misses"
                    },
                    "nextcloud_opcache_statistics_num_cached_keys": {
                        "name": "Opcache cached keys"
                    },
                    "nextcloud_opcache_statistics_num_cached_scripts": {
                        "name": "Opcache cached scripts"
                    },
                    "nextcloud_opcache_statistics_oom_restarts": {
                        "name": "Opcache out of memory restarts"
                    },
                    "nextcloud_opcache_statistics_opcache_hit_rate": {
                        "name": "Opcache hit rate"
                    },
                    "nextcloud_opcache_statistics_start_time": {
                        "name": "Opcache start time"
                    },
                    "nextcloud_server_php_max_execution_time": {
                        "name": "PHP max execution time"
                    },
                    "nextcloud_server_php_memory_limit": {
                        "name": "PHP memory limit"
                    },
                    "nextcloud_server_php_opcache_memory_usage_current_wasted_percentage": {
                        "name": "Opcache current wasted percentage"
                    },
                    "nextcloud_server_php_opcache_memory_usage_free_memory": {
                        "name": "Opcache free memory"
                    },
                    "nextcloud_server_php_opcache_memory_usage_used_memory": {
                        "name": "Opcache used memory"
                    },
                    "nextcloud_server_php_opcache_memory_usage_wasted_memory": {
                        "name": "Opcache wasted memory"
                    },
                    "nextcloud_server_php_upload_max_filesize": {
                        "name": "PHP upload maximum filesize"
                    },
                    "nextcloud_server_php_version": {
                        "name": "PHP version"
                    },
                    "nextcloud_server_webserver": {
                        "name": "Webserver"
                    },
                    "nextcloud_shares_num_fed_shares_received": {
                        "name": "Amount of shares received"
                    },
                    "nextcloud_shares_num_fed_shares_sent": {
                        "name": "Amount of shares sent"
                    },
                    "nextcloud_shares_num_shares": {
                        "name": "Amount of shares"
                    },
                    "nextcloud_shares_num_shares_groups": {
                        "name": "Amount of group shares"
                    },
                    "nextcloud_shares_num_shares_link": {
                        "name": "Amount of link shares"
                    },
                    "nextcloud_shares_num_shares_link_no_password": {
                        "name": "Amount of passwordless link shares"
                    },
                    "nextcloud_shares_num_shares_mail": {
                        "name": "Amount of mail shares"
                    },
                    "nextcloud_shares_num_shares_room": {
                        "name": "Amount of room shares"
                    },
                    "nextcloud_shares_num_shares_user": {
                        "name": "Amount of user shares"
                    },
                    "nextcloud_shares_permissions_3_1": {
                        "name": "Permissions 3.1"
                    },
                    "nextcloud_sma_avail_mem": {
                        "name": "SMA available memory"
                    },
                    "nextcloud_sma_num_seg": {
                        "name": "SMA number of segments"
                    },
                    "nextcloud_sma_seg_size": {
                        "name": "SMA segment size"
                    },
                    "nextcloud_storage_num_files": {
                        "name": "Amount of files"
                    },
                    "nextcloud_storage_num_storages": {
                        "name": "Amount of storages"
                    },
                    "nextcloud_storage_num_storages_home": {
                        "name": "Amount of storages at home"
                    },
                    "nextcloud_storage_num_storages_local": {
                        "name": "Amount of local storages"
                    },
                    "nextcloud_storage_num_storages_other": {
                        "name": "Amount of other storages"
                    },
                    "nextcloud_storage_num_users": {
                        "name": "Amount of user"
                    },
                    "nextcloud_system_apps_app_updates_calendar": {
                        "name": "Calendar updates"
                    },
                    "nextcloud_system_apps_app_updates_contacts": {
                        "name": "Contact updates"
                    },
                    "nextcloud_system_apps_app_updates_tasks": {
                        "name": "Task updates"
                    },
                    "nextcloud_system_apps_app_updates_twofactor_totp": {
                        "name": "Two factor authentication updates"
                    },
                    "nextcloud_system_apps_num_installed": {
                        "name": "Apps installed"
                    },
                    "nextcloud_system_apps_num_updates_available": {
                        "name": "Updates available"
                    },
                    "nextcloud_system_cpuload": {
                        "name": "CPU Load"
                    },
                    "nextcloud_system_cpuload_15": {
                        "name": "CPU Load last 15 minutes"
                    },
                    "nextcloud_system_cpuload_1": {
                        "name": "CPU Load last 1 minute"
                    },
                    "nextcloud_system_cpuload_5": {
                        "name": "CPU Load last 5 minutes"
                    },
                    "nextcloud_system_freespace": {
                        "name": "Free space"
                    },
                    "nextcloud_system_mem_free": {
                        "name": "Free memory"
                    },
                    "nextcloud_system_mem_total": {
                        "name": "Total memory"
                    },
                    "nextcloud_system_memcache_distributed": {
                        "name": "System memcache distributed"
                    },
                    "nextcloud_system_memcache_local": {
                        "name": "System memcache local"
                    },
                    "nextcloud_system_memcache_locking": {
                        "name": "System memcache locking"
                    },
                    "nextcloud_system_swap_free": {
                        "name": "Free swap memory"
                    },
                    "nextcloud_system_swap_total": {
                        "name": "Total swap memory"
                    },
                    "nextcloud_system_theme": {
                        "name": "System theme"
                    },
                    "nextcloud_system_version": {
                        "name": "System version"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Nextcloud using YAML has been deprecated.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the `nextcloud` YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Nextcloud YAML configuration has been deprecated"
                }
            }
        },
        "nextdns": {
            "config": {
                "abort": {
                    "already_configured": "This NextDNS profile is already configured."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "profiles": {
                        "data": {
                            "profile": "Profile"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "device_connection_status": {
                        "name": "Device connection status"
                    },
                    "device_profile_connection_status": {
                        "name": "Device profile connection status"
                    }
                },
                "button": {
                    "clear_logs": {
                        "name": "Clear logs"
                    }
                },
                "sensor": {
                    "all_queries": {
                        "name": "DNS queries"
                    },
                    "blocked_queries": {
                        "name": "DNS queries blocked"
                    },
                    "blocked_queries_ratio": {
                        "name": "DNS queries blocked ratio"
                    },
                    "doh3_queries": {
                        "name": "DNS-over-HTTP\/3 queries"
                    },
                    "doh3_queries_ratio": {
                        "name": "DNS-over-HTTP\/3 queries ratio"
                    },
                    "doh_queries": {
                        "name": "DNS-over-HTTPS queries"
                    },
                    "doh_queries_ratio": {
                        "name": "DNS-over-HTTPS queries ratio"
                    },
                    "doq_queries": {
                        "name": "DNS-over-QUIC queries"
                    },
                    "doq_queries_ratio": {
                        "name": "DNS-over-QUIC queries ratio"
                    },
                    "dot_queries": {
                        "name": "DNS-over-TLS queries"
                    },
                    "dot_queries_ratio": {
                        "name": "DNS-over-TLS queries ratio"
                    },
                    "encrypted_queries": {
                        "name": "Encrypted queries"
                    },
                    "encrypted_queries_ratio": {
                        "name": "Encrypted queries ratio"
                    },
                    "ipv4_queries": {
                        "name": "IPv4 queries"
                    },
                    "ipv6_queries": {
                        "name": "IPv6 queries"
                    },
                    "ipv6_queries_ratio": {
                        "name": "IPv6 queries ratio"
                    },
                    "not_validated_queries": {
                        "name": "DNSSEC not validated queries"
                    },
                    "relayed_queries": {
                        "name": "DNS queries relayed"
                    },
                    "tcp_queries": {
                        "name": "TCP queries"
                    },
                    "tcp_queries_ratio": {
                        "name": "TCP queries ratio"
                    },
                    "udp_queries": {
                        "name": "UDP queries"
                    },
                    "udp_queries_ratio": {
                        "name": "UDP queries ratio"
                    },
                    "unencrypted_queries": {
                        "name": "Unencrypted queries"
                    },
                    "validated_queries": {
                        "name": "DNSSEC validated queries"
                    },
                    "validated_queries_ratio": {
                        "name": "DNSSEC validated queries ratio"
                    }
                },
                "switch": {
                    "ai_threat_detection": {
                        "name": "AI-Driven threat detection"
                    },
                    "allow_affiliate": {
                        "name": "Allow affiliate & tracking links"
                    },
                    "anonymized_ecs": {
                        "name": "Anonymized EDNS client subnet"
                    },
                    "block_9gag": {
                        "name": "Block 9GAG"
                    },
                    "block_amazon": {
                        "name": "Block Amazon"
                    },
                    "block_bereal": {
                        "name": "Block BeReal"
                    },
                    "block_blizzard": {
                        "name": "Block Blizzard"
                    },
                    "block_bypass_methods": {
                        "name": "Block bypass methods"
                    },
                    "block_chatgpt": {
                        "name": "Block ChatGPT"
                    },
                    "block_csam": {
                        "name": "Block child sexual abuse material"
                    },
                    "block_dailymotion": {
                        "name": "Block Dailymotion"
                    },
                    "block_dating": {
                        "name": "Block dating"
                    },
                    "block_ddns": {
                        "name": "Block dynamic DNS hostnames"
                    },
                    "block_discord": {
                        "name": "Block Discord"
                    },
                    "block_disguised_trackers": {
                        "name": "Block disguised third-party trackers"
                    },
                    "block_disneyplus": {
                        "name": "Block Disney Plus"
                    },
                    "block_ebay": {
                        "name": "Block eBay"
                    },
                    "block_facebook": {
                        "name": "Block Facebook"
                    },
                    "block_fortnite": {
                        "name": "Block Fortnite"
                    },
                    "block_gambling": {
                        "name": "Block gambling"
                    },
                    "block_google_chat": {
                        "name": "Block Google Chat"
                    },
                    "block_hbomax": {
                        "name": "Block HBO Max"
                    },
                    "block_hulu": {
                        "name": "Block Hulu"
                    },
                    "block_imgur": {
                        "name": "Block Imgur"
                    },
                    "block_instagram": {
                        "name": "Block Instagram"
                    },
                    "block_leagueoflegends": {
                        "name": "Block League of Legends"
                    },
                    "block_mastodon": {
                        "name": "Block Mastodon"
                    },
                    "block_messenger": {
                        "name": "Block Messenger"
                    },
                    "block_minecraft": {
                        "name": "Block Minecraft"
                    },
                    "block_netflix": {
                        "name": "Block Netflix"
                    },
                    "block_nrd": {
                        "name": "Block newly registered domains"
                    },
                    "block_online_gaming": {
                        "name": "Block online gaming"
                    },
                    "block_page": {
                        "name": "Block page"
                    },
                    "block_parked_domains": {
                        "name": "Block parked domains"
                    },
                    "block_pinterest": {
                        "name": "Block Pinterest"
                    },
                    "block_piracy": {
                        "name": "Block piracy"
                    },
                    "block_playstation_network": {
                        "name": "Block PlayStation Network"
                    },
                    "block_porn": {
                        "name": "Block porn"
                    },
                    "block_primevideo": {
                        "name": "Block Prime Video"
                    },
                    "block_reddit": {
                        "name": "Block Reddit"
                    },
                    "block_roblox": {
                        "name": "Block Roblox"
                    },
                    "block_signal": {
                        "name": "Block Signal"
                    },
                    "block_skype": {
                        "name": "Block Skype"
                    },
                    "block_snapchat": {
                        "name": "Block Snapchat"
                    },
                    "block_social_networks": {
                        "name": "Block social networks"
                    },
                    "block_spotify": {
                        "name": "Block Spotify"
                    },
                    "block_steam": {
                        "name": "Block Steam"
                    },
                    "block_telegram": {
                        "name": "Block Telegram"
                    },
                    "block_tiktok": {
                        "name": "Block TikTok"
                    },
                    "block_tinder": {
                        "name": "Block Tinder"
                    },
                    "block_tumblr": {
                        "name": "Block Tumblr"
                    },
                    "block_twitch": {
                        "name": "Block Twitch"
                    },
                    "block_twitter": {
                        "name": "Block Twitter"
                    },
                    "block_video_streaming": {
                        "name": "Block video streaming"
                    },
                    "block_vimeo": {
                        "name": "Block Vimeo"
                    },
                    "block_vk": {
                        "name": "Block VK"
                    },
                    "block_whatsapp": {
                        "name": "Block WhatsApp"
                    },
                    "block_xboxlive": {
                        "name": "Block Xbox Live"
                    },
                    "block_youtube": {
                        "name": "Block YouTube"
                    },
                    "block_zoom": {
                        "name": "Block Zoom"
                    },
                    "cache_boost": {
                        "name": "Cache boost"
                    },
                    "cname_flattening": {
                        "name": "CNAME flattening"
                    },
                    "cryptojacking_protection": {
                        "name": "Cryptojacking protection"
                    },
                    "dga_protection": {
                        "name": "Domain generation algorithms protection"
                    },
                    "dns_rebinding_protection": {
                        "name": "DNS rebinding protection"
                    },
                    "google_safe_browsing": {
                        "name": "Google safe browsing"
                    },
                    "idn_homograph_attacks_protection": {
                        "name": "IDN homograph attacks protection"
                    },
                    "logs": {
                        "name": "Logs"
                    },
                    "safesearch": {
                        "name": "Force SafeSearch"
                    },
                    "threat_intelligence_feeds": {
                        "name": "Threat intelligence feeds"
                    },
                    "typosquatting_protection": {
                        "name": "Typosquatting protection"
                    },
                    "web3": {
                        "name": "Web3"
                    },
                    "youtube_restricted_mode": {
                        "name": "Force YouTube restricted mode"
                    }
                }
            },
            "system_health": {
                "info": {
                    "can_reach_server": "Reach server"
                }
            }
        },
        "nfandroidtv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        },
                        "description": "Please refer to the documentation to make sure all requirements are met."
                    }
                }
            }
        },
        "nibe_heatpump": {
            "config": {
                "error": {
                    "address": "Invalid remote address specified. Address must be an IP address or a resolvable hostname.",
                    "address_in_use": "The selected listening port is already in use on this system.",
                    "model": "The selected model doesn't seem to support MODBUS40",
                    "read": "Error on read request from pump. Verify your `Remote read port` or `Remote address`.",
                    "unknown": "Unexpected error",
                    "url": "The specified URL is not well formed nor supported",
                    "write": "Error on write request to pump. Verify your `Remote write port` or `Remote address`."
                },
                "step": {
                    "modbus": {
                        "data": {
                            "modbus_unit": "Modbus Unit Identifier",
                            "modbus_url": "Modbus URL",
                            "model": "Model of Heat Pump"
                        },
                        "data_description": {
                            "modbus_unit": "Unit identification for your Heat Pump. Can usually be left at 0.",
                            "modbus_url": "Modbus URL that describes the connection to your Heat Pump or MODBUS40 unit. It should be on the form:\n - `tcp:\/\/[HOST]:[PORT]` for Modbus TCP connection\n - `serial:\/\/[LOCAL DEVICE]` for a local Modbus RTU connection\n - `rfc2217:\/\/[HOST]:[PORT]` for a remote telnet based Modbus RTU connection."
                        }
                    },
                    "nibegw": {
                        "data": {
                            "ip_address": "Remote address",
                            "listening_port": "Local listening port",
                            "model": "Model of Heat Pump",
                            "remote_read_port": "Remote read port",
                            "remote_write_port": "Remote write port"
                        },
                        "data_description": {
                            "ip_address": "The address of the NibeGW unit. The device should have been configured with a static address.",
                            "listening_port": "The local port on this system, that the NibeGW unit is configured to send data to.",
                            "remote_read_port": "The port the NibeGW unit is listening for read requests on.",
                            "remote_write_port": "The port the NibeGW unit is listening for write requests on."
                        },
                        "description": "Before attempting to configure the integration, verify that:\n - The NibeGW unit is connected to a heat pump.\n - The MODBUS40 accessory has been enabled in the heat pump configuration.\n - The pump has not gone into an alarm state about missing MODBUS40 accessory."
                    },
                    "user": {
                        "description": "Pick the connection method to your pump. In general, F-series pumps require a NibeGW custom accessory, while an S-series pump has Modbus support built-in.",
                        "menu_options": {
                            "modbus": "Modbus",
                            "nibegw": "NibeGW"
                        }
                    }
                }
            }
        },
        "nightscout": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "url": "URL"
                        },
                        "description": "- URL: the address of your nightscout instance. I.e.: https:\/\/myhomeassistant.duckdns.org:5423\n- API Key (optional): Only use if your instance is protected (auth_default_roles != readable).",
                        "title": "Enter your Nightscout server information."
                    }
                }
            }
        },
        "nina": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_selection": "Please select at least one city\/county",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "_a_to_d": "City\/county (A-D)",
                            "_e_to_h": "City\/county (E-H)",
                            "_i_to_l": "City\/county (I-L)",
                            "_m_to_q": "City\/county (M-Q)",
                            "_r_to_u": "City\/county (R-U)",
                            "_v_to_z": "City\/county (V-Z)",
                            "corona_filter": "Remove Corona Warnings",
                            "headline_filter": "Blacklist regex to filter warning headlines",
                            "slots": "Maximum warnings per city\/county"
                        },
                        "title": "Select city\/county"
                    }
                }
            },
            "options": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_selection": "Please select at least one city\/county",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "init": {
                        "data": {
                            "_a_to_d": "City\/county (A-D)",
                            "_e_to_h": "City\/county (E-H)",
                            "_i_to_l": "City\/county (I-L)",
                            "_m_to_q": "City\/county (M-Q)",
                            "_r_to_u": "City\/county (R-U)",
                            "_v_to_z": "City\/county (V-Z)",
                            "area_filter": "Whitelist regex to filter warnings based on affected areas",
                            "corona_filter": "Remove Corona Warnings",
                            "headline_filter": "Blacklist regex to filter warning headlines",
                            "slots": "Maximum warnings per city\/county"
                        },
                        "title": "Options"
                    }
                }
            }
        },
        "nissan_leaf": {
            "services": {
                "start_charge": {
                    "description": "Starts the vehicle charging. It must be plugged in first!\n.",
                    "fields": {
                        "vin": {
                            "description": "The vehicle identification number (VIN) of the vehicle, 17 characters\n.",
                            "name": "VIN"
                        }
                    },
                    "name": "Start charge"
                },
                "update": {
                    "description": "Fetches the last state of the vehicle of all your accounts, requesting an update from of the state from the car if possible.\n.",
                    "fields": {
                        "vin": {
                            "description": "The vehicle identification number (VIN) of the vehicle, 17 characters\n.",
                            "name": "VIN"
                        }
                    },
                    "name": "Update"
                }
            }
        },
        "nmap_tracker": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "invalid_hosts": "Invalid Hosts"
                },
                "step": {
                    "user": {
                        "data": {
                            "exclude": "Network addresses (comma separated) to exclude from scanning",
                            "home_interval": "Minimum number of minutes between scans of active devices (preserve battery)",
                            "hosts": "Network addresses (comma separated) to scan",
                            "scan_options": "Raw configurable scan options for Nmap"
                        },
                        "description": "Configure hosts to be scanned by Nmap. Network address and excludes can be IP Addresses (192.168.1.1), IP Networks (192.168.0.0\/24) or IP Ranges (192.168.1.0-32)."
                    }
                }
            },
            "options": {
                "error": {
                    "invalid_hosts": "Invalid Hosts"
                },
                "step": {
                    "init": {
                        "data": {
                            "consider_home": "Seconds to wait till marking a device tracker as not home after not being seen.",
                            "exclude": "Network addresses (comma separated) to exclude from scanning",
                            "home_interval": "Minimum number of minutes between scans of active devices (preserve battery)",
                            "hosts": "Network addresses (comma separated) to scan",
                            "interval_seconds": "Scan interval",
                            "scan_options": "Raw configurable scan options for Nmap"
                        },
                        "description": "Configure hosts to be scanned by Nmap. Network address and excludes can be IP Addresses (192.168.1.1), IP Networks (192.168.0.0\/24) or IP Ranges (192.168.1.0-32)."
                    }
                }
            },
            "title": "Nmap Tracker"
        },
        "nobo_hub": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect - check serial number",
                    "invalid_ip": "Invalid IP address",
                    "invalid_serial": "Invalid serial number",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "manual": {
                        "data": {
                            "ip_address": "IP Address",
                            "serial": "Serial number (12 digits)"
                        },
                        "description": "Configure a Nobø Ecohub not discovered on your local network. If your hub is on another network, you can still connect to it by entering the complete serial number (12 digits) and its IP address."
                    },
                    "selected": {
                        "data": {
                            "serial_suffix": "Serial number suffix (3 digits)"
                        },
                        "description": "Configuring {hub}.\r\rTo connect to the hub, you need to enter the last 3 digits of the hub's serial number."
                    },
                    "user": {
                        "data": {
                            "device": "Discovered hubs"
                        },
                        "description": "Select Nobø Ecohub to configure."
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "override_type": "Override type"
                        },
                        "description": "Select override type \"Now\" to end override on next week profile change."
                    }
                }
            }
        },
        "notify": {
            "services": {
                "notify": {
                    "description": "Sends a notification message to selected targets.",
                    "fields": {
                        "data": {
                            "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.",
                            "name": "Data"
                        },
                        "message": {
                            "description": "Message body of the notification.",
                            "name": "Message"
                        },
                        "target": {
                            "description": "Some integrations allow you to specify the targets that receive the notification. For more information, refer to the integration documentation.",
                            "name": "Target"
                        },
                        "title": {
                            "description": "Title for your notification.",
                            "name": "Title"
                        }
                    },
                    "name": "Send a notification"
                },
                "persistent_notification": {
                    "description": "Sends a notification that is visible in the **Notifications** panel.",
                    "fields": {
                        "data": {
                            "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation..",
                            "name": "Data"
                        },
                        "message": {
                            "description": "Message body of the notification.",
                            "name": "Message"
                        },
                        "title": {
                            "description": "Title of the notification.",
                            "name": "Title"
                        }
                    },
                    "name": "Send a persistent notification"
                }
            },
            "title": "Notifications"
        },
        "notion": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please re-enter the password for {username}.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Fill in your information"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "hinged_window": {
                        "name": "Hinged window"
                    },
                    "safe": {
                        "name": "Safe"
                    },
                    "sliding_door_window": {
                        "name": "Sliding door\/window"
                    },
                    "smoke_carbon_monoxide_detector": {
                        "name": "Smoke\/Carbon monoxide detector"
                    }
                },
                "sensor": {
                    "mold_risk": {
                        "name": "Mold risk"
                    }
                }
            }
        },
        "nuheat": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_thermostat": "The thermostat serial number is invalid.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "serial_number": "Serial number of the thermostat.",
                            "username": "Username"
                        },
                        "description": "You will need to obtain your thermostat’s numeric serial number or ID by logging into https:\/\/MyNuHeat.com and selecting your thermostat(s).",
                        "title": "Connect to the NuHeat"
                    }
                }
            }
        },
        "nuki": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "token": "Access Token"
                        },
                        "description": "The Nuki integration needs to re-authenticate with your bridge.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port",
                            "token": "Access Token"
                        }
                    }
                }
            },
            "entity": {
                "lock": {
                    "nuki_lock": {
                        "state_attributes": {
                            "battery_critical": {
                                "state": {
                                    "off": "Normal",
                                    "on": "Low"
                                }
                            }
                        }
                    }
                },
                "sensor": {
                    "battery": {
                        "name": "Battery"
                    }
                }
            },
            "issues": {
                "https_webhook": {
                    "description": "The Nuki bridge can not push events to an HTTPS address (SSL), please configure a (local) HTTP address under \"Home Assistant URL\" in the [network settings]({network_link}). The current (local) address is: `{base_url}`, a valid address could, for example, be `http:\/\/192.168.1.10:8123` where `192.168.1.10` is the IP of the Home Assistant device",
                    "title": "Nuki webhook URL uses HTTPS (SSL)"
                }
            },
            "services": {
                "lock_n_go": {
                    "description": "Nuki Lock 'n' Go.",
                    "fields": {
                        "unlatch": {
                            "description": "Whether to unlatch the lock.",
                            "name": "Unlatch"
                        }
                    },
                    "name": "Lock 'n' go"
                },
                "set_continuous_mode": {
                    "description": "Enables or disables continuous mode on Nuki Opener.",
                    "fields": {
                        "enable": {
                            "description": "Whether to enable or disable the feature.",
                            "name": "Enable"
                        }
                    },
                    "name": "Set continuous mode"
                }
            }
        },
        "number": {
            "device_automation": {
                "action_type": {
                    "set_value": "Set value for {entity_name}"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Number",
                    "state_attributes": {
                        "max": {
                            "name": "Maximum"
                        },
                        "min": {
                            "name": "Minimum"
                        },
                        "mode": {
                            "name": "Mode",
                            "state": {
                                "auto": "Automatic",
                                "box": "Box",
                                "slider": "Slider"
                            }
                        },
                        "step": {
                            "name": "Step"
                        }
                    }
                },
                "apparent_power": {
                    "name": "Apparent power"
                },
                "aqi": {
                    "name": "Air quality index"
                },
                "atmospheric_pressure": {
                    "name": "Atmospheric pressure"
                },
                "battery": {
                    "name": "Battery"
                },
                "carbon_dioxide": {
                    "name": "Carbon dioxide"
                },
                "carbon_monoxide": {
                    "name": "Carbon monoxide"
                },
                "current": {
                    "name": "Current"
                },
                "data_rate": {
                    "name": "Data rate"
                },
                "distance": {
                    "name": "Distance"
                },
                "energy": {
                    "name": "Energy"
                },
                "energy_storage": {
                    "name": "Stored energy"
                },
                "frequency": {
                    "name": "Frequency"
                },
                "gas": {
                    "name": "Gas"
                },
                "humidity": {
                    "name": "Humidity"
                },
                "illuminance": {
                    "name": "Illuminance"
                },
                "irradiance": {
                    "name": "Irradiance"
                },
                "moisture": {
                    "name": "Moisture"
                },
                "nitrogen_dioxide": {
                    "name": "Nitrogen dioxide"
                },
                "nitrogen_monoxide": {
                    "name": "Nitrogen monoxide"
                },
                "nitrous_oxide": {
                    "name": "Nitrous oxide"
                },
                "ozone": {
                    "name": "Ozone"
                },
                "ph": {
                    "name": "pH"
                },
                "pm10": {
                    "name": "PM10"
                },
                "pm1": {
                    "name": "PM1"
                },
                "pm25": {
                    "name": "PM2.5"
                },
                "power": {
                    "name": "Power"
                },
                "power_factor": {
                    "name": "Power factor"
                },
                "precipitation": {
                    "name": "Precipitation"
                },
                "precipitation_intensity": {
                    "name": "Precipitation intensity"
                },
                "pressure": {
                    "name": "Pressure"
                },
                "reactive_power": {
                    "name": "Reactive power"
                },
                "signal_strength": {
                    "name": "Signal strength"
                },
                "sound_pressure": {
                    "name": "Sound pressure"
                },
                "speed": {
                    "name": "Speed"
                },
                "sulphur_dioxide": {
                    "name": "Sulphur dioxide"
                },
                "temperature": {
                    "name": "Temperature"
                },
                "volatile_organic_compounds": {
                    "name": "VOCs"
                },
                "voltage": {
                    "name": "Voltage"
                },
                "volume": {
                    "name": "Volume"
                },
                "volume_storage": {
                    "name": "Stored volume"
                },
                "water": {
                    "name": "Water"
                },
                "weight": {
                    "name": "Weight"
                },
                "wind_speed": {
                    "name": "Wind speed"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "set_value": {
                    "description": "Sets the value of a number.",
                    "fields": {
                        "value": {
                            "description": "The target value to set.",
                            "name": "Value"
                        }
                    },
                    "name": "Set"
                }
            },
            "title": "Number"
        },
        "nut": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "ups": {
                        "data": {
                            "alias": "Alias"
                        },
                        "title": "Choose the UPS to Monitor"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "Connect to the NUT server"
                    }
                }
            },
            "device_automation": {
                "action_type": {
                    "beeper_disable": "Disable UPS beeper\/buzzer",
                    "beeper_enable": "Enable UPS beeper\/buzzer",
                    "beeper_mute": "Temporarily mute UPS beeper\/buzzer",
                    "beeper_toggle": "Toggle UPS beeper\/buzzer",
                    "bypass_start": "Put the UPS in bypass mode",
                    "bypass_stop": "Take the UPS out of bypass mode",
                    "calibrate_start": "Start runtime calibration",
                    "calibrate_stop": "Stop runtime calibration",
                    "load_off": "Turn off the load immediately",
                    "load_on": "Turn on the load immediately",
                    "reset_input_minmax": "Reset minimum and maximum input voltage status",
                    "reset_watchdog": "Reset watchdog timer (forced reboot of load)",
                    "shutdown_reboot": "Shut down the load briefly while rebooting the UPS",
                    "shutdown_reboot_graceful": "After a delay, shut down the load briefly while rebooting the UPS",
                    "shutdown_return": "Turn off the load possibly after a delay and return when power is back",
                    "shutdown_stayoff": "Turn off the load possibly after a delay and remain off even if power returns",
                    "shutdown_stop": "Stop a shutdown in progress",
                    "test_battery_start": "Start a battery test",
                    "test_battery_start_deep": "Start a deep battery test",
                    "test_battery_start_quick": "Start a quick battery test",
                    "test_battery_stop": "Stop the battery test",
                    "test_failure_start": "Start a simulated power failure",
                    "test_failure_stop": "Stop simulating a power failure",
                    "test_panel_start": "Start testing the UPS panel",
                    "test_panel_stop": "Stop a UPS panel test",
                    "test_system_start": "Start a system test"
                }
            },
            "entity": {
                "sensor": {
                    "ambient_humidity": {
                        "name": "Ambient humidity"
                    },
                    "ambient_temperature": {
                        "name": "Ambient temperature"
                    },
                    "battery_alarm_threshold": {
                        "name": "Battery alarm threshold"
                    },
                    "battery_capacity": {
                        "name": "Battery capacity"
                    },
                    "battery_charge": {
                        "name": "Battery charge"
                    },
                    "battery_charge_low": {
                        "name": "Low battery setpoint"
                    },
                    "battery_charge_restart": {
                        "name": "Minimum battery to start"
                    },
                    "battery_charge_warning": {
                        "name": "Warning battery setpoint"
                    },
                    "battery_charger_status": {
                        "name": "Charging status"
                    },
                    "battery_current": {
                        "name": "Battery current"
                    },
                    "battery_current_total": {
                        "name": "Total battery current"
                    },
                    "battery_date": {
                        "name": "Battery date"
                    },
                    "battery_mfr_date": {
                        "name": "Battery manuf. date"
                    },
                    "battery_packs": {
                        "name": "Number of batteries"
                    },
                    "battery_packs_bad": {
                        "name": "Number of bad batteries"
                    },
                    "battery_runtime": {
                        "name": "Battery runtime"
                    },
                    "battery_runtime_low": {
                        "name": "Low battery runtime"
                    },
                    "battery_runtime_restart": {
                        "name": "Minimum battery runtime to start"
                    },
                    "battery_temperature": {
                        "name": "Battery temperature"
                    },
                    "battery_type": {
                        "name": "Battery chemistry"
                    },
                    "battery_voltage": {
                        "name": "Battery voltage"
                    },
                    "battery_voltage_high": {
                        "name": "High battery voltage"
                    },
                    "battery_voltage_low": {
                        "name": "Low battery voltage"
                    },
                    "battery_voltage_nominal": {
                        "name": "Nominal battery voltage"
                    },
                    "input_bypass_current": {
                        "name": "Input bypass current"
                    },
                    "input_bypass_frequency": {
                        "name": "Input bypass frequency"
                    },
                    "input_bypass_l1_current": {
                        "name": "Input bypass L1 current"
                    },
                    "input_bypass_l1_n_voltage": {
                        "name": "Input bypass L1-N voltage"
                    },
                    "input_bypass_l1_realpower": {
                        "name": "Current input bypass L1 real power"
                    },
                    "input_bypass_l2_current": {
                        "name": "Input bypass L2 current"
                    },
                    "input_bypass_l2_n_voltage": {
                        "name": "Input bypass L2-N voltage"
                    },
                    "input_bypass_l2_realpower": {
                        "name": "Current input bypass L2 real power"
                    },
                    "input_bypass_l3_current": {
                        "name": "Input bypass L3 current"
                    },
                    "input_bypass_l3_n_voltage": {
                        "name": "Input bypass L3-N voltage"
                    },
                    "input_bypass_l3_realpower": {
                        "name": "Current input bypass L3 real power"
                    },
                    "input_bypass_phases": {
                        "name": "Input bypass phases"
                    },
                    "input_bypass_realpower": {
                        "name": "Current input bypass real power"
                    },
                    "input_bypass_voltage": {
                        "name": "Input bypass voltage"
                    },
                    "input_current": {
                        "name": "Input current"
                    },
                    "input_frequency": {
                        "name": "Input line frequency"
                    },
                    "input_frequency_nominal": {
                        "name": "Nominal input line frequency"
                    },
                    "input_frequency_status": {
                        "name": "Input frequency status"
                    },
                    "input_l1_current": {
                        "name": "Input L1 current"
                    },
                    "input_l1_frequency": {
                        "name": "Input L1 line frequency"
                    },
                    "input_l1_n_voltage": {
                        "name": "Input L1 voltage"
                    },
                    "input_l1_realpower": {
                        "name": "Current input L1 real power"
                    },
                    "input_l2_current": {
                        "name": "Input L2 current"
                    },
                    "input_l2_frequency": {
                        "name": "Input L2 line frequency"
                    },
                    "input_l2_n_voltage": {
                        "name": "Input L2 voltage"
                    },
                    "input_l2_realpower": {
                        "name": "Current input L2 real power"
                    },
                    "input_l3_current": {
                        "name": "Input L3 current"
                    },
                    "input_l3_frequency": {
                        "name": "Input L3 line frequency"
                    },
                    "input_l3_n_voltage": {
                        "name": "Input L3 voltage"
                    },
                    "input_l3_realpower": {
                        "name": "Current input L3 real power"
                    },
                    "input_phases": {
                        "name": "Input phases"
                    },
                    "input_realpower": {
                        "name": "Current input real power"
                    },
                    "input_sensitivity": {
                        "name": "Input power sensitivity"
                    },
                    "input_transfer_high": {
                        "name": "High voltage transfer"
                    },
                    "input_transfer_low": {
                        "name": "Low voltage transfer"
                    },
                    "input_transfer_reason": {
                        "name": "Voltage transfer reason"
                    },
                    "input_voltage": {
                        "name": "Input voltage"
                    },
                    "input_voltage_nominal": {
                        "name": "Nominal input voltage"
                    },
                    "output_current": {
                        "name": "Output current"
                    },
                    "output_current_nominal": {
                        "name": "Nominal output current"
                    },
                    "output_frequency": {
                        "name": "Output frequency"
                    },
                    "output_frequency_nominal": {
                        "name": "Nominal output frequency"
                    },
                    "output_l1_current": {
                        "name": "Output L1 current"
                    },
                    "output_l1_n_voltage": {
                        "name": "Output L1-N voltage"
                    },
                    "output_l1_power_percent": {
                        "name": "Output L1 power usage"
                    },
                    "output_l1_realpower": {
                        "name": "Current output L1 real power"
                    },
                    "output_l2_current": {
                        "name": "Output L2 current"
                    },
                    "output_l2_n_voltage": {
                        "name": "Output L2-N voltage"
                    },
                    "output_l2_power_percent": {
                        "name": "Output L2 power usage"
                    },
                    "output_l2_realpower": {
                        "name": "Current output L2 real power"
                    },
                    "output_l3_current": {
                        "name": "Output L3 current"
                    },
                    "output_l3_n_voltage": {
                        "name": "Output L3-N voltage"
                    },
                    "output_l3_power_percent": {
                        "name": "Output L3 power usage"
                    },
                    "output_l3_realpower": {
                        "name": "Current output L3 real power"
                    },
                    "output_phases": {
                        "name": "Output phases"
                    },
                    "output_power": {
                        "name": "Output apparent power"
                    },
                    "output_power_nominal": {
                        "name": "Nominal output power"
                    },
                    "output_realpower": {
                        "name": "Current output real power"
                    },
                    "output_realpower_nominal": {
                        "name": "Nominal output real power"
                    },
                    "output_voltage": {
                        "name": "Output voltage"
                    },
                    "output_voltage_nominal": {
                        "name": "Nominal output voltage"
                    },
                    "ups_alarm": {
                        "name": "Alarms"
                    },
                    "ups_beeper_status": {
                        "name": "Beeper status"
                    },
                    "ups_contacts": {
                        "name": "External contacts"
                    },
                    "ups_delay_reboot": {
                        "name": "UPS reboot delay"
                    },
                    "ups_delay_shutdown": {
                        "name": "UPS shutdown delay"
                    },
                    "ups_delay_start": {
                        "name": "Load restart delay"
                    },
                    "ups_display_language": {
                        "name": "Language"
                    },
                    "ups_efficiency": {
                        "name": "Efficiency"
                    },
                    "ups_id": {
                        "name": "System identifier"
                    },
                    "ups_load": {
                        "name": "Load"
                    },
                    "ups_load_high": {
                        "name": "Overload setting"
                    },
                    "ups_power": {
                        "name": "Current apparent power"
                    },
                    "ups_power_nominal": {
                        "name": "Nominal power"
                    },
                    "ups_realpower": {
                        "name": "Current real power"
                    },
                    "ups_realpower_nominal": {
                        "name": "Nominal real power"
                    },
                    "ups_shutdown": {
                        "name": "Shutdown ability"
                    },
                    "ups_start_auto": {
                        "name": "Start on ac"
                    },
                    "ups_start_battery": {
                        "name": "Start on battery"
                    },
                    "ups_start_reboot": {
                        "name": "Reboot on battery"
                    },
                    "ups_status": {
                        "name": "Status data"
                    },
                    "ups_status_display": {
                        "name": "Status"
                    },
                    "ups_temperature": {
                        "name": "UPS temperature"
                    },
                    "ups_test_date": {
                        "name": "Self-test date"
                    },
                    "ups_test_interval": {
                        "name": "Self-test interval"
                    },
                    "ups_test_result": {
                        "name": "Self-test result"
                    },
                    "ups_timer_reboot": {
                        "name": "Load reboot timer"
                    },
                    "ups_timer_shutdown": {
                        "name": "Load shutdown timer"
                    },
                    "ups_timer_start": {
                        "name": "Load start timer"
                    },
                    "ups_type": {
                        "name": "UPS type"
                    },
                    "ups_watchdog_status": {
                        "name": "Watchdog status"
                    },
                    "watts": {
                        "name": "Watts"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Scan Interval (seconds)"
                        }
                    }
                }
            }
        },
        "nws": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "station": "METAR station code"
                        },
                        "description": "If a METAR station code is not specified, the latitude and longitude will be used to find the closest station. For now, an API Key can be anything. It is recommended to use a valid email address.",
                        "title": "Connect to the National Weather Service"
                    }
                }
            }
        },
        "nx584": {
            "services": {
                "bypass_zone": {
                    "description": "Bypasses a zone.",
                    "fields": {
                        "zone": {
                            "description": "The number of the zone to be bypassed.",
                            "name": "Zone"
                        }
                    },
                    "name": "Bypass zone"
                },
                "unbypass_zone": {
                    "description": "Un-Bypasses a zone.",
                    "fields": {
                        "zone": {
                            "description": "The number of the zone to be un-bypassed.",
                            "name": "Zone"
                        }
                    },
                    "name": "Un-bypass zone"
                }
            }
        },
        "nzbget": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name",
                            "password": "Password",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "title": "Connect to NZBGet"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "article_cache": {
                        "name": "Article cache"
                    },
                    "average_speed": {
                        "name": "Average speed"
                    },
                    "disk_free": {
                        "name": "Disk free"
                    },
                    "download_paused": {
                        "name": "Download paused"
                    },
                    "post_processing_jobs": {
                        "name": "Post processing jobs"
                    },
                    "post_processing_paused": {
                        "name": "Post processing paused"
                    },
                    "queue_size": {
                        "name": "Queue size"
                    },
                    "size": {
                        "name": "Size"
                    },
                    "speed": {
                        "name": "Speed"
                    },
                    "speed_limit": {
                        "name": "Speed limit"
                    },
                    "uptime": {
                        "name": "Uptime"
                    }
                },
                "switch": {
                    "download": {
                        "name": "Download"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Update frequency (seconds)"
                        }
                    }
                }
            },
            "services": {
                "pause": {
                    "description": "Pauses download queue.",
                    "name": "Pause"
                },
                "resume": {
                    "description": "Resumes download queue.",
                    "name": "Resume"
                },
                "set_speed": {
                    "description": "Sets download speed limit.",
                    "fields": {
                        "speed": {
                            "description": "Speed limit. 0 is unlimited.",
                            "name": "Speed"
                        }
                    },
                    "name": "Set speed"
                }
            }
        },
        "obihai": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "dhcp_confirm": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Do you want to set up {host}?"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "issues": {
                "manual_migration": {
                    "description": "Configuration of the Obihai platform in YAML is deprecated and will be removed in Home Assistant 2023.6; Your existing configuration has been imported into the UI automatically and can be safely removed from your configuration.yaml file.",
                    "title": "Obihai YAML configuration is being removed"
                }
            }
        },
        "octoprint": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "auth_failed": "Failed to retrieve application api key",
                    "cannot_connect": "Failed to connect",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "OctoPrint Printer: {host}",
                "progress": {
                    "get_api_key": "Open the OctoPrint UI and click 'Allow' on the Access Request for 'Home Assistant'."
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "path": "Application Path",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            }
        },
        "ombi": {
            "services": {
                "submit_movie_request": {
                    "description": "Searches for a movie and requests the first result.",
                    "fields": {
                        "name": {
                            "description": "Search parameter.",
                            "name": "Name"
                        }
                    },
                    "name": "Submit movie request"
                },
                "submit_music_request": {
                    "description": "Searches for a music album and requests the first result.",
                    "fields": {
                        "name": {
                            "description": "Search parameter.",
                            "name": "Name"
                        }
                    },
                    "name": "Submit music request"
                },
                "submit_tv_request": {
                    "description": "Searches for a TV show and requests the first result.",
                    "fields": {
                        "name": {
                            "description": "Search parameter.",
                            "name": "Name"
                        },
                        "season": {
                            "description": "Which season(s) to request.",
                            "name": "Season"
                        }
                    },
                    "name": "Submit TV request"
                }
            }
        },
        "omnilogic": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "ph_offset": "pH offset (positive or negative)",
                            "polling_interval": "Polling interval (in seconds)"
                        }
                    }
                }
            },
            "services": {
                "set_pump_speed": {
                    "description": "Sets the run speed of a variable speed pump.",
                    "fields": {
                        "speed": {
                            "description": "Speed for the VSP between min and max speed.",
                            "name": "Speed"
                        }
                    },
                    "name": "Set pump speed"
                }
            }
        },
        "onboarding": {
            "area": {
                "bedroom": "Bedroom",
                "kitchen": "Kitchen",
                "living_room": "Living Room"
            }
        },
        "oncue": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "ondilo_ico": {
            "config": {
                "abort": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "oxydo_reduction_potential": {
                        "name": "Oxydo reduction potential"
                    },
                    "ph": {
                        "name": "pH"
                    },
                    "rssi": {
                        "name": "RSSI"
                    },
                    "salt": {
                        "name": "Salt"
                    },
                    "tds": {
                        "name": "TDS"
                    }
                }
            }
        },
        "onewire": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Set server details"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "hub_short_0": {
                        "name": "Hub short on branch 0"
                    },
                    "hub_short_1": {
                        "name": "Hub short on branch 1"
                    },
                    "hub_short_2": {
                        "name": "Hub short on branch 2"
                    },
                    "hub_short_3": {
                        "name": "Hub short on branch 3"
                    },
                    "sensed_0": {
                        "name": "Sensed 0"
                    },
                    "sensed_1": {
                        "name": "Sensed 1"
                    },
                    "sensed_2": {
                        "name": "Sensed 2"
                    },
                    "sensed_3": {
                        "name": "Sensed 3"
                    },
                    "sensed_4": {
                        "name": "Sensed 4"
                    },
                    "sensed_5": {
                        "name": "Sensed 5"
                    },
                    "sensed_6": {
                        "name": "Sensed 6"
                    },
                    "sensed_7": {
                        "name": "Sensed 7"
                    },
                    "sensed_a": {
                        "name": "Sensed A"
                    },
                    "sensed_b": {
                        "name": "Sensed B"
                    }
                },
                "sensor": {
                    "counter_a": {
                        "name": "Counter A"
                    },
                    "counter_b": {
                        "name": "Counter B"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "humidity_hih3600": {
                        "name": "HIH3600 humidity"
                    },
                    "humidity_hih4000": {
                        "name": "HIH4000 humidity"
                    },
                    "humidity_hih5030": {
                        "name": "HIH5030 humidity"
                    },
                    "humidity_htm1735": {
                        "name": "HTM1735 humidity"
                    },
                    "humidity_raw": {
                        "name": "Raw humidity"
                    },
                    "illuminance": {
                        "name": "Illuminance"
                    },
                    "moisture_1": {
                        "name": "Moisture 1"
                    },
                    "moisture_2": {
                        "name": "Moisture 2"
                    },
                    "moisture_3": {
                        "name": "Moisture 3"
                    },
                    "moisture_4": {
                        "name": "Moisture 4"
                    },
                    "pressure": {
                        "name": "Pressure"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "thermocouple_temperature_k": {
                        "name": "Thermocouple K temperature"
                    },
                    "voltage": {
                        "name": "Voltage"
                    },
                    "voltage_vad": {
                        "name": "VAD voltage"
                    },
                    "voltage_vdd": {
                        "name": "VDD voltage"
                    },
                    "voltage_vis": {
                        "name": "VIS voltage difference"
                    },
                    "voltage_vis_gradient": {
                        "name": "VIS voltage gradient"
                    },
                    "wetness_0": {
                        "name": "Wetness 0"
                    },
                    "wetness_1": {
                        "name": "Wetness 1"
                    },
                    "wetness_2": {
                        "name": "Wetness 2"
                    },
                    "wetness_3": {
                        "name": "Wetness 3"
                    }
                },
                "switch": {
                    "hub_branch_0": {
                        "name": "Hub branch 0"
                    },
                    "hub_branch_1": {
                        "name": "Hub branch 1"
                    },
                    "hub_branch_2": {
                        "name": "Hub branch 2"
                    },
                    "hub_branch_3": {
                        "name": "Hub branch 3"
                    },
                    "iad": {
                        "name": "Current A\/D control"
                    },
                    "latch_0": {
                        "name": "Latch 0"
                    },
                    "latch_1": {
                        "name": "Latch 1"
                    },
                    "latch_2": {
                        "name": "Latch 2"
                    },
                    "latch_3": {
                        "name": "Latch 3"
                    },
                    "latch_4": {
                        "name": "Latch 4"
                    },
                    "latch_5": {
                        "name": "Latch 5"
                    },
                    "latch_6": {
                        "name": "Latch 6"
                    },
                    "latch_7": {
                        "name": "Latch 7"
                    },
                    "latch_a": {
                        "name": "Latch A"
                    },
                    "latch_b": {
                        "name": "Latch B"
                    },
                    "leaf_sensor_0": {
                        "name": "Leaf sensor 0"
                    },
                    "leaf_sensor_1": {
                        "name": "Leaf sensor 1"
                    },
                    "leaf_sensor_2": {
                        "name": "Leaf sensor 2"
                    },
                    "leaf_sensor_3": {
                        "name": "Leaf sensor 3"
                    },
                    "moisture_sensor_0": {
                        "name": "Moisture sensor 0"
                    },
                    "moisture_sensor_1": {
                        "name": "Moisture sensor 1"
                    },
                    "moisture_sensor_2": {
                        "name": "Moisture sensor 2"
                    },
                    "moisture_sensor_3": {
                        "name": "Moisture sensor 3"
                    },
                    "pio": {
                        "name": "Programmed input-output"
                    },
                    "pio_0": {
                        "name": "Programmed input-output 0"
                    },
                    "pio_1": {
                        "name": "Programmed input-output 1"
                    },
                    "pio_2": {
                        "name": "Programmed input-output 2"
                    },
                    "pio_3": {
                        "name": "Programmed input-output 3"
                    },
                    "pio_4": {
                        "name": "Programmed input-output 4"
                    },
                    "pio_5": {
                        "name": "Programmed input-output 5"
                    },
                    "pio_6": {
                        "name": "Programmed input-output 6"
                    },
                    "pio_7": {
                        "name": "Programmed input-output 7"
                    },
                    "pio_a": {
                        "name": "Programmed input-output A"
                    },
                    "pio_b": {
                        "name": "Programmed input-output B"
                    }
                }
            },
            "options": {
                "error": {
                    "device_not_selected": "Select devices to configure"
                },
                "step": {
                    "configure_device": {
                        "data": {
                            "precision": "Sensor Precision"
                        },
                        "description": "Select sensor precision for {sensor_id}",
                        "title": "OneWire Sensor Precision"
                    },
                    "device_selection": {
                        "data": {
                            "clear_device_options": "Clear all device configurations",
                            "device_selection": "Select devices to configure"
                        },
                        "description": "Select what configuration steps to process",
                        "title": "OneWire Device Options"
                    }
                }
            }
        },
        "onvif": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "no_h264": "There were no H264 streams available.  Check the profile configuration on your device.",
                    "no_mac": "Could not configure unique ID for ONVIF device.",
                    "onvif_error": "Error setting up ONVIF device.  Check logs for more information.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "auth_failed": "Could not authenticate: {error}",
                    "cannot_connect": "Failed to connect",
                    "no_onvif_service": "No ONVIF service found. Check that the port number is correct.",
                    "onvif_error": "Error setting up ONVIF device: {error}. Check logs for more information."
                },
                "step": {
                    "configure": {
                        "data": {
                            "host": "Host",
                            "name": "Name",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "Configure ONVIF device"
                    },
                    "configure_profile": {
                        "data": {
                            "include": "Create camera entity"
                        },
                        "description": "Create camera entity for {profile} at {resolution} resolution?",
                        "title": "Configure Profiles"
                    },
                    "device": {
                        "data": {
                            "host": "Select discovered ONVIF device"
                        },
                        "title": "Select ONVIF device"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Some devices will reject authentication if the time is out of sync by more than 5 seconds. If authentication is unsuccessful, verify the time on the device is correct and try again.",
                        "title": "Reauthenticate the ONVIF device"
                    },
                    "user": {
                        "data": {
                            "auto": "Search automatically"
                        },
                        "description": "By clicking submit, we will search your network for ONVIF devices that support Profile S.\n\nSome manufacturers have started to disable ONVIF by default. Please ensure ONVIF is enabled in your camera's configuration.",
                        "title": "ONVIF device setup"
                    }
                }
            },
            "options": {
                "step": {
                    "onvif_devices": {
                        "data": {
                            "enable_webhooks": "Enable Webhooks",
                            "extra_arguments": "Extra FFMPEG arguments",
                            "rtsp_transport": "RTSP transport mechanism",
                            "use_wallclock_as_timestamps": "Use wall clock as timestamps"
                        },
                        "title": "ONVIF Device Options"
                    }
                }
            },
            "services": {
                "ptz": {
                    "description": "If your ONVIF camera supports PTZ, you will be able to pan, tilt or zoom your camera.",
                    "fields": {
                        "continuous_duration": {
                            "description": "Set ContinuousMove delay in seconds before stopping the move.",
                            "name": "Continuous duration"
                        },
                        "distance": {
                            "description": "Distance coefficient. Sets how much PTZ should be executed in one request.",
                            "name": "Distance"
                        },
                        "move_mode": {
                            "description": "PTZ moving mode.",
                            "name": "Move Mode"
                        },
                        "pan": {
                            "description": "Pan direction.",
                            "name": "Pan"
                        },
                        "preset": {
                            "description": "PTZ preset profile token. Sets the preset profile token which is executed with GotoPreset.",
                            "name": "Preset"
                        },
                        "speed": {
                            "description": "Speed coefficient. Sets how fast PTZ will be executed.",
                            "name": "Speed"
                        },
                        "tilt": {
                            "description": "Tilt direction.",
                            "name": "Tilt"
                        },
                        "zoom": {
                            "description": "Zoom.",
                            "name": "Zoom"
                        }
                    },
                    "name": "PTZ"
                }
            }
        },
        "open_meteo": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "zone": "Zone"
                        },
                        "description": "Select location to use for weather forecasting"
                    }
                }
            }
        },
        "openai_conversation": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "max_tokens": "Maximum tokens to return in response",
                            "model": "Completion Model",
                            "prompt": "Prompt Template",
                            "temperature": "Temperature",
                            "top_p": "Top P"
                        }
                    }
                }
            },
            "services": {
                "generate_image": {
                    "description": "Turn a prompt into an image",
                    "fields": {
                        "config_entry": {
                            "description": "The config entry to use for this service",
                            "name": "Config Entry"
                        },
                        "prompt": {
                            "description": "The text to turn into an image",
                            "example": "A photo of a dog",
                            "name": "Prompt"
                        },
                        "size": {
                            "description": "The size of the image to generate",
                            "name": "Size"
                        }
                    },
                    "name": "Generate image"
                }
            }
        },
        "openalpr_local": {
            "issues": {
                "pending_removal": {
                    "description": "The OpenALPR Local integration is pending removal from Home Assistant and will no longer be available as of Home Assistant 2022.10.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The OpenALPR Local integration is being removed"
                }
            }
        },
        "openexchangerates": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Failed to connect",
                    "reauth_successful": "Re-authentication was successful",
                    "timeout_connect": "Timeout establishing connection"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "timeout_connect": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "base": "Base currency"
                        },
                        "data_description": {
                            "base": "Using another base currency than USD requires a [paid plan]({signup})."
                        }
                    }
                }
            }
        },
        "opengarage": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "device_key": "Device key",
                            "host": "Host",
                            "port": "Port",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "vehicle": {
                        "name": "Vehicle"
                    }
                }
            }
        },
        "openhome": {
            "services": {
                "invoke_pin": {
                    "description": "Invokes a pin on the specified device.",
                    "fields": {
                        "pin": {
                            "description": "Which pin to invoke.",
                            "name": "PIN"
                        }
                    },
                    "name": "Invoke PIN"
                }
            }
        },
        "opensky": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "altitude": "Altitude",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "API Key",
                            "radius": "Radius"
                        },
                        "description": "Fill in the location to track."
                    }
                }
            },
            "options": {
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "no_authentication": "You need to authenticate to be contributing",
                    "password_missing": "Password is missing",
                    "username_missing": "Username is missing"
                },
                "step": {
                    "init": {
                        "data": {
                            "altitude": "Altitude",
                            "contributing_user": "I'm contributing to OpenSky",
                            "password": "Password",
                            "radius": "Radius",
                            "username": "Username"
                        },
                        "description": "You can login to your OpenSky account to increase the update frequency."
                    }
                }
            }
        },
        "opentherm_gw": {
            "config": {
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "id_exists": "Gateway id already exists",
                    "timeout_connect": "Timeout establishing connection"
                },
                "step": {
                    "init": {
                        "data": {
                            "device": "Path or URL",
                            "id": "ID",
                            "name": "Name"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "floor_temperature": "Floor Temperature",
                            "read_precision": "Read Precision",
                            "set_precision": "Set Precision",
                            "temporary_override_mode": "Temporary Setpoint Override Mode"
                        }
                    }
                }
            },
            "services": {
                "reset_gateway": {
                    "description": "Resets the OpenTherm Gateway.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        }
                    },
                    "name": "Reset gateway"
                },
                "set_central_heating_ovrd": {
                    "description": "Sets the central heating override option on the gateway. When overriding the control setpoint (via a set_control_setpoint service call with a value other than 0), the gateway automatically enables the central heating override to start heating. This service can then be used to control the central heating override status. To return control of the central heating to the thermostat, call the set_control_setpoint service with temperature value 0. You will only need this if you are writing your own software thermostat.\n.",
                    "fields": {
                        "ch_override": {
                            "description": "The desired boolean value for the central heating override.",
                            "name": "Central heating override"
                        },
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        }
                    },
                    "name": "Set central heating override"
                },
                "set_clock": {
                    "description": "Sets the clock and day of the week on the connected thermostat.",
                    "fields": {
                        "date": {
                            "description": "Optional date from which the day of the week will be extracted. Defaults to today.",
                            "name": "Date"
                        },
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "time": {
                            "description": "Optional time in 24h format which will be provided to the thermostat. Defaults to the current time.",
                            "name": "Time"
                        }
                    },
                    "name": "Set clock"
                },
                "set_control_setpoint": {
                    "description": "Sets the central heating control setpoint override on the gateway. You will only need this if you are writing your own software thermostat.\n.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "temperature": {
                            "description": "The central heating setpoint to set on the gateway. Values between 0 and 90 are accepted, but not all boilers support this range. A value of 0 disables the central heating setpoint override.\n.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set control set point"
                },
                "set_gpio_mode": {
                    "description": "Changes the function of the GPIO pins of the gateway.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "id": {
                            "description": "The ID of the GPIO pin.",
                            "name": "ID"
                        },
                        "mode": {
                            "description": "Mode to set on the GPIO pin. Values 0 through 6 are accepted for both GPIOs, 7 is only accepted for GPIO \"B\". See https:\/\/www.home-assistant.io\/integrations\/opentherm_gw\/#gpio-modes for an explanation of the values.\n.",
                            "name": "Mode"
                        }
                    },
                    "name": "Set gpio mode"
                },
                "set_hot_water_ovrd": {
                    "description": "Sets the domestic hot water enable option on the gateway.",
                    "fields": {
                        "dhw_override": {
                            "description": "Control the domestic hot water enable option. If the boiler has been configured to let the room unit control when to keep a small amount of water preheated, this command can influence that. Value should be 0 or 1 to enable the override in off or on state, or \"A\" to disable the override.\n.",
                            "name": "Domestic hot water override"
                        },
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        }
                    },
                    "name": "Set hot water override"
                },
                "set_hot_water_setpoint": {
                    "description": "Sets the domestic hot water setpoint on the gateway.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "temperature": {
                            "description": "The domestic hot water setpoint to set on the gateway. Not all boilers support this feature. Values between 0 and 90 are accepted, but not all boilers support this range. Check the values of the slave_dhw_min_setp and slave_dhw_max_setp sensors to see the supported range on your boiler.\n.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set hot water set point"
                },
                "set_led_mode": {
                    "description": "Changes the function of the LEDs of the gateway.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "id": {
                            "description": "The ID of the LED.",
                            "name": "ID"
                        },
                        "mode": {
                            "description": "The function to assign to the LED. See https:\/\/www.home-assistant.io\/integrations\/opentherm_gw\/#led-modes for an explanation of the values.\n.",
                            "name": "Mode"
                        }
                    },
                    "name": "Set LED mode"
                },
                "set_max_modulation": {
                    "description": "Overrides the maximum relative modulation level. You will only need this if you are writing your own software thermostat.\n.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "level": {
                            "description": "The modulation level to provide to the gateway. Provide a value of -1 to clear the override and forward the value from the thermostat again.\n.",
                            "name": "Level"
                        }
                    },
                    "name": "Set max modulation"
                },
                "set_outside_temperature": {
                    "description": "Provides an outside temperature to the thermostat. If your thermostat is unable to display an outside temperature and does not support OTC (Outside Temperature Correction), this has no effect.\n.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "temperature": {
                            "description": "The temperature to provide to the thermostat. Values between -40.0 and 64.0 will be accepted, but not all thermostats can display the full range. Any value above 64.0 will clear a previously configured value (suggestion: 99)\n.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set outside temperature"
                },
                "set_setback_temperature": {
                    "description": "Configures the setback temperature to be used with the GPIO away mode function.",
                    "fields": {
                        "gateway_id": {
                            "description": "The gateway_id of the OpenTherm Gateway.",
                            "name": "Gateway ID"
                        },
                        "temperature": {
                            "description": "The setback temperature to configure on the gateway.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set setback temperature"
                }
            }
        },
        "openuv": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "Please re-enter the API key for {latitude}, {longitude}.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "elevation": "Elevation",
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "title": "Fill in your information"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "protection_window": {
                        "name": "Protection window"
                    }
                },
                "sensor": {
                    "current_ozone_level": {
                        "name": "Current ozone level"
                    },
                    "current_uv_index": {
                        "name": "Current UV index"
                    },
                    "current_uv_level": {
                        "name": "Current UV level"
                    },
                    "max_uv_index": {
                        "name": "Max UV index"
                    },
                    "skin_type_1_safe_exposure_time": {
                        "name": "Skin type 1 safe exposure time"
                    },
                    "skin_type_2_safe_exposure_time": {
                        "name": "Skin type 2 safe exposure time"
                    },
                    "skin_type_3_safe_exposure_time": {
                        "name": "Skin type 3 safe exposure time"
                    },
                    "skin_type_4_safe_exposure_time": {
                        "name": "Skin type 4 safe exposure time"
                    },
                    "skin_type_5_safe_exposure_time": {
                        "name": "Skin type 5 safe exposure time"
                    },
                    "skin_type_6_safe_exposure_time": {
                        "name": "Skin type 6 safe exposure time"
                    }
                }
            },
            "issues": {
                "deprecated_service_multiple_alternate_targets": {
                    "description": "Update any automations or scripts that use this service to instead use the `{alternate_service}` service with one of these entity IDs as the target: `{alternate_targets}`.",
                    "title": "The {deprecated_service} service is being removed"
                },
                "deprecated_service_single_alternate_target": {
                    "description": "Update any automations or scripts that use this service to instead use the `{alternate_service}` service with `{alternate_targets}` as the target.",
                    "title": "The {deprecated_service} service is being removed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "from_window": "Starting UV index for the protection window",
                            "to_window": "Ending UV index for the protection window"
                        },
                        "title": "Configure OpenUV"
                    }
                }
            }
        },
        "openweathermap": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "language": "Language",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "mode": "Mode",
                            "name": "Name"
                        },
                        "description": "To generate API key go to https:\/\/openweathermap.org\/appid"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "language": "Language",
                            "mode": "Mode"
                        }
                    }
                }
            }
        },
        "opower": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "mfa": {
                        "data": {
                            "totp_secret": "TOTP Secret"
                        },
                        "description": "The TOTP secret below is not one of the 6 digit time-based numeric codes. It is a string of around 16 characters containing the shared secret that enables your authenticator app to generate the correct time-based code at the appropriate time. See the documentation."
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "totp_secret": "TOTP Secret",
                            "username": "Username"
                        },
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "totp_secret": "TOTP Secret (only for some utilities, see documentation)",
                            "username": "Username",
                            "utility": "Utility name"
                        }
                    }
                }
            }
        },
        "oralb": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "otbr": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "url": "URL"
                        },
                        "description": "Provide URL for the Open Thread Border Router's REST API"
                    }
                }
            },
            "issues": {
                "get_get_border_agent_id_unsupported": {
                    "description": "Your OTBR does not support border agent ID.\n\nTo fix this issue, update the OTBR to the latest version and restart Home Assistant.\nTo update the OTBR, update the Open Thread Border Router or Silicon Labs Multiprotocol add-on if you use the OTBR from the add-on, otherwise update your self managed OTBR.",
                    "title": "The OTBR does not support border agent ID"
                },
                "insecure_thread_network": {
                    "description": "Your Thread network is using a default network key or pass phrase.\n\nThis is a security risk, please create a new Thread network.",
                    "title": "Insecure Thread network settings detected"
                },
                "otbr_zha_channel_collision": {
                    "description": "When OTBR and ZHA share the radio, they must use the same network channel.\n\nIf OTBR and ZHA attempt to connect to networks on different channels, neither Thread\/Matter nor Zigbee will work.\n\nOTBR is configured with a Thread network on channel {otbr_channel}, ZHA is configured with a Zigbee network on channel {zha_channel}.",
                    "title": "OTBR and ZHA share the same radio but use different channels"
                }
            }
        },
        "overkiz": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful",
                    "reauth_wrong_account": "You can only reauthenticate this entry with the same Overkiz account and hub"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "server_in_maintenance": "Server is down for maintenance",
                    "too_many_attempts": "Too many attempts with an invalid token, temporarily banned",
                    "too_many_requests": "Too many requests, try again later",
                    "unknown": "Unexpected error",
                    "unsupported_hardware": "Your {unsupported_device} hardware is not supported by this integration."
                },
                "flow_title": "Gateway: {gateway_id}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "hub": "Hub",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "The Overkiz platform is used by various vendors like Somfy (Connexoon \/ TaHoma), Hitachi (Hi Kumo), Rexel (Energeasy Connect) and Atlantic (Cozytouch). Enter your application credentials and select your hub."
                    }
                }
            },
            "entity": {
                "climate": {
                    "overkiz": {
                        "state_attributes": {
                            "fan_mode": {
                                "state": {
                                    "away": "Away",
                                    "bypass_boost": "Bypass boost",
                                    "home_boost": "Home boost",
                                    "kitchen_boost": "Kitchen boost"
                                }
                            },
                            "preset_mode": {
                                "state": {
                                    "auto": "Auto",
                                    "comfort-1": "Comfort 1",
                                    "comfort-2": "Comfort 2",
                                    "drying": "Drying",
                                    "external": "External",
                                    "freeze": "Freeze",
                                    "frost_protection": "Frost protection",
                                    "manual": "Manual",
                                    "night": "Night",
                                    "prog": "Prog"
                                }
                            }
                        }
                    }
                },
                "select": {
                    "memorized_simple_volume": {
                        "state": {
                            "highest": "Highest",
                            "standard": "Standard"
                        }
                    },
                    "open_closed_pedestrian": {
                        "state": {
                            "closed": "Closed",
                            "open": "Open",
                            "pedestrian": "Pedestrian"
                        }
                    }
                },
                "sensor": {
                    "battery": {
                        "state": {
                            "full": "Full",
                            "low": "Low",
                            "medium": "Medium",
                            "normal": "Normal",
                            "verylow": "Very low"
                        }
                    },
                    "discrete_rssi_level": {
                        "state": {
                            "good": "Good",
                            "low": "Low",
                            "normal": "Normal",
                            "verylow": "Very low"
                        }
                    },
                    "priority_lock_originator": {
                        "state": {
                            "external_gateway": "External gateway",
                            "local_user": "Local user",
                            "lsc": "LSC",
                            "myself": "Myself",
                            "rain": "Rain",
                            "saac": "SAAC",
                            "security": "Security",
                            "sfc": "SFC",
                            "temperature": "Temperature",
                            "timer": "Timer",
                            "ups": "UPS",
                            "user": "User",
                            "wind": "Wind"
                        }
                    },
                    "sensor_defect": {
                        "state": {
                            "dead": "Dead",
                            "low_battery": "Low battery",
                            "maintenance_required": "Maintenance required",
                            "no_defect": "No defect"
                        }
                    },
                    "sensor_room": {
                        "state": {
                            "clean": "Clean",
                            "dirty": "Dirty"
                        }
                    },
                    "three_way_handle_direction": {
                        "state": {
                            "closed": "Closed",
                            "open": "Open",
                            "tilt": "Tilt"
                        }
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "overkiz__memorized_simple_volume": {
                            "highest": "Highest",
                            "standard": "Standard"
                        },
                        "overkiz__open_closed_pedestrian": {
                            "closed": "Closed",
                            "open": "Open",
                            "pedestrian": "Pedestrian"
                        }
                    }
                },
                "sensor": {
                    "state": {
                        "overkiz__battery": {
                            "full": "Full",
                            "low": "Low",
                            "normal": "Normal",
                            "verylow": "Very low"
                        },
                        "overkiz__discrete_rssi_level": {
                            "good": "Good",
                            "low": "Low",
                            "normal": "Normal",
                            "verylow": "Very low"
                        },
                        "overkiz__priority_lock_originator": {
                            "external_gateway": "External gateway",
                            "local_user": "Local user",
                            "lsc": "LSC",
                            "myself": "Myself",
                            "rain": "Rain",
                            "saac": "SAAC",
                            "security": "Security",
                            "sfc": "SFC",
                            "temperature": "Temperature",
                            "timer": "Timer",
                            "ups": "UPS",
                            "user": "User",
                            "wind": "Wind"
                        },
                        "overkiz__sensor_defect": {
                            "dead": "Dead",
                            "low_battery": "Low battery",
                            "maintenance_required": "Maintenance required",
                            "no_defect": "No defect"
                        },
                        "overkiz__sensor_room": {
                            "clean": "Clean",
                            "dirty": "Dirty"
                        },
                        "overkiz__three_way_handle_direction": {
                            "closed": "Closed",
                            "open": "Open",
                            "tilt": "Tilt"
                        }
                    }
                }
            }
        },
        "ovo_energy": {
            "config": {
                "error": {
                    "already_configured": "Account is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{username}",
                "step": {
                    "reauth": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Authentication failed for OVO Energy. Please enter your current credentials.",
                        "title": "Reauthentication"
                    },
                    "user": {
                        "data": {
                            "account": "OVO account id (only add if you have multiple accounts)",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Set up an OVO Energy instance to access your energy usage.",
                        "title": "Add OVO Energy Account"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "last_electricity_cost": {
                        "name": "Last electricity cost"
                    },
                    "last_electricity_end_time": {
                        "name": "Last electricity end time"
                    },
                    "last_electricity_reading": {
                        "name": "Last electricity reading"
                    },
                    "last_electricity_start_time": {
                        "name": "Last electricity start time"
                    },
                    "last_gas_cost": {
                        "name": "Last gas cost"
                    },
                    "last_gas_end_time": {
                        "name": "Last gas end time"
                    },
                    "last_gas_reading": {
                        "name": "Last gas reading"
                    },
                    "last_gas_start_time": {
                        "name": "Last gas start time"
                    }
                }
            }
        },
        "owntracks": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "create_entry": {
                    "default": "\n\nOn Android, open [the OwnTracks app]({android_url}), go to Preferences > Connection. Change the following settings:\n - Mode: HTTP\n - Host: {webhook_url}\n - Identification:\n   - Username: `'(Your name)'`\n   - Device ID: `'(Your device name)'`\n\nOn iOS, open [the OwnTracks app]({ios_url}), tap (i) icon in top left > Settings. Change the following settings:\n - Mode: HTTP\n - URL: {webhook_url}\n - Turn on authentication\n - UserID: `'(Your name)'`\n\n{secret}\n\nSee [the documentation]({docs_url}) for more information."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up OwnTracks?",
                        "title": "Set up OwnTracks"
                    }
                }
            }
        },
        "p1_monitor": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "data_description": {
                            "host": "The IP address or hostname of your P1 Monitor installation."
                        },
                        "description": "Set up P1 Monitor to integrate with Home Assistant."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "consumption_day": {
                        "name": "Consumption day"
                    },
                    "consumption_total": {
                        "name": "Consumption total"
                    },
                    "current_phase_l1": {
                        "name": "Current phase L1"
                    },
                    "current_phase_l2": {
                        "name": "Current phase L2"
                    },
                    "current_phase_l3": {
                        "name": "Current phase L3"
                    },
                    "energy_consumption_high": {
                        "name": "Energy consumption - High tariff"
                    },
                    "energy_consumption_low": {
                        "name": "Energy consumption - Low tariff"
                    },
                    "energy_consumption_price_high": {
                        "name": "Energy consumption price - High"
                    },
                    "energy_consumption_price_low": {
                        "name": "Energy consumption price - Low"
                    },
                    "energy_production_high": {
                        "name": "Energy production - High tariff"
                    },
                    "energy_production_low": {
                        "name": "Energy production - Low tariff"
                    },
                    "energy_production_price_high": {
                        "name": "Energy production price - High"
                    },
                    "energy_production_price_low": {
                        "name": "Energy production price - Low"
                    },
                    "energy_tariff_period": {
                        "name": "Energy tariff period"
                    },
                    "gas_consumption": {
                        "name": "Gas consumption"
                    },
                    "gas_consumption_price": {
                        "name": "Gas consumption price"
                    },
                    "power_consumed_phase_l1": {
                        "name": "Power consumed phase L1"
                    },
                    "power_consumed_phase_l2": {
                        "name": "Power consumed phase L2"
                    },
                    "power_consumed_phase_l3": {
                        "name": "Power consumed phase L3"
                    },
                    "power_consumption": {
                        "name": "Power consumption"
                    },
                    "power_produced_phase_l1": {
                        "name": "Power produced phase L1"
                    },
                    "power_produced_phase_l2": {
                        "name": "Power produced phase L2"
                    },
                    "power_produced_phase_l3": {
                        "name": "Power produced phase L3"
                    },
                    "power_production": {
                        "name": "Power production"
                    },
                    "pulse_count": {
                        "name": "Pulse count"
                    },
                    "voltage_phase_l1": {
                        "name": "Voltage phase L1"
                    },
                    "voltage_phase_l2": {
                        "name": "Voltage phase L2"
                    },
                    "voltage_phase_l3": {
                        "name": "Voltage phase L3"
                    }
                }
            }
        },
        "panasonic_viera": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_pin_code": "The PIN you entered was invalid"
                },
                "step": {
                    "pairing": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Enter the PIN displayed on your TV",
                        "title": "Pairing"
                    },
                    "user": {
                        "data": {
                            "host": "IP Address",
                            "name": "Name"
                        },
                        "description": "Enter your Panasonic Viera TV's IP address",
                        "title": "Set up your TV"
                    }
                }
            }
        },
        "peco": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "county": "County"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "customers_out": {
                        "name": "Customers out"
                    },
                    "customers_served": {
                        "name": "Customers served"
                    },
                    "map_alert": {
                        "name": "Map alert"
                    },
                    "outage_count": {
                        "name": "Outage count"
                    },
                    "percent_customers_out": {
                        "name": "Percent customers out"
                    }
                }
            }
        },
        "pegel_online": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "no_stations": "Could not find any station in range."
                },
                "step": {
                    "select_station": {
                        "data": {
                            "station": "Station"
                        },
                        "description": "Found {stations_count} stations in radius",
                        "title": "Select the measuring station to add"
                    },
                    "user": {
                        "data": {
                            "location": "Location",
                            "radius": "Search radius (in km)"
                        },
                        "description": "Select the area, where you want to search for water measuring stations"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_temperature": {
                        "name": "Air temperature"
                    },
                    "clearance_height": {
                        "name": "Clearance height"
                    },
                    "current_measurement": {
                        "name": "Water level"
                    },
                    "oxygen_level": {
                        "name": "Oxygen level"
                    },
                    "water_flow": {
                        "name": "Water volume flow"
                    },
                    "water_level": {
                        "name": "Water level"
                    },
                    "water_speed": {
                        "name": "Water flow speed"
                    },
                    "water_temperature": {
                        "name": "Water temperature"
                    }
                }
            }
        },
        "persistent_notification": {
            "services": {
                "create": {
                    "description": "Shows a notification on the **Notifications** panel.",
                    "fields": {
                        "message": {
                            "description": "Message body of the notification.",
                            "name": "Message"
                        },
                        "notification_id": {
                            "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID.",
                            "name": "Notification ID"
                        },
                        "title": {
                            "description": "Optional title of the notification.",
                            "name": "Title"
                        }
                    },
                    "name": "Create"
                },
                "dismiss": {
                    "description": "Removes a notification from the **Notifications** panel.",
                    "fields": {
                        "notification_id": {
                            "description": "ID of the notification to be removed.",
                            "name": "Notification ID"
                        }
                    },
                    "name": "Dismiss"
                },
                "dismiss_all": {
                    "description": "Removes all notifications from the **Notifications** panel.",
                    "name": "Dismiss all"
                }
            }
        },
        "person": {
            "entity_component": {
                "_": {
                    "name": "Person",
                    "state": {
                        "home": "Home",
                        "not_home": "Away"
                    },
                    "state_attributes": {
                        "device_trackers": {
                            "name": "Device trackers"
                        },
                        "gps_accuracy": {
                            "name": "GPS accuracy"
                        },
                        "latitude": {
                            "name": "Latitude"
                        },
                        "longitude": {
                            "name": "Longitude"
                        },
                        "source": {
                            "name": "Source"
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads persons from the YAML-configuration.",
                    "name": "Reload"
                }
            },
            "title": "Person"
        },
        "philips_js": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_pin": "Invalid PIN",
                    "pairing_failure": "Unable to pair: {error_id}",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "pair": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Enter the PIN displayed on your TV",
                        "title": "Pair"
                    },
                    "user": {
                        "data": {
                            "api_version": "API Version",
                            "host": "Host"
                        }
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "turn_on": "Device is requested to turn on"
                }
            },
            "entity": {
                "light": {
                    "ambilight": {
                        "name": "Ambilight"
                    }
                },
                "remote": {
                    "remote": {
                        "name": "Remote"
                    }
                },
                "switch": {
                    "ambilight_hue": {
                        "name": "Ambilight + Hue"
                    },
                    "screen_state": {
                        "name": "Screen state"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "allow_notify": "Allow notification service"
                        },
                        "data_description": {
                            "allow_notify": "Allow the usage of data notification service on TV instead of periodic polling. This allows faster reaction to state changes on the TV, however, some TV's will stop responding with this activated due to firmware bugs."
                        }
                    }
                }
            }
        },
        "pi_hole": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "api_key": {
                        "data": {
                            "api_key": "API Key"
                        }
                    },
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "Please enter a new api key for PI-Hole at {host}\/{location}",
                        "title": "Reauthenticate PI-Hole"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "location": "Location",
                            "name": "Name",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "status": {
                        "name": "Status"
                    }
                },
                "sensor": {
                    "ads_blocked_today": {
                        "name": "Ads blocked today"
                    },
                    "ads_percentage_today": {
                        "name": "Ads percentage blocked today"
                    },
                    "clients_ever_seen": {
                        "name": "Seen clients"
                    },
                    "dns_queries_today": {
                        "name": "DNS queries today"
                    },
                    "domains_being_blocked": {
                        "name": "Domains blocked"
                    },
                    "queries_cached": {
                        "name": "DNS queries cached"
                    },
                    "queries_forwarded": {
                        "name": "DNS queries forwarded"
                    },
                    "unique_clients": {
                        "name": "DNS unique clients"
                    },
                    "unique_domains": {
                        "name": "DNS unique domains"
                    }
                },
                "update": {
                    "core_update_available": {
                        "name": "Core update available"
                    },
                    "ftl_update_available": {
                        "name": "FTL update available"
                    },
                    "web_update_available": {
                        "name": "Web update available"
                    }
                }
            },
            "services": {
                "disable": {
                    "description": "Disables configured Pi-hole(s) for an amount of time.",
                    "fields": {
                        "duration": {
                            "description": "Time that the Pi-hole should be disabled for.",
                            "name": "Duration"
                        }
                    },
                    "name": "Disable"
                }
            }
        },
        "picnic": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "different_account": "Account should be the same as used for setting up the integration",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "country_code": "Country code",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "cart_items_count": {
                        "name": "Cart items count"
                    },
                    "cart_total_price": {
                        "name": "Cart total price"
                    },
                    "last_order_delivery_time": {
                        "name": "Last order delivery time"
                    },
                    "last_order_max_order_time": {
                        "name": "Max order time of last order"
                    },
                    "last_order_slot_end": {
                        "name": "End of last order's slot"
                    },
                    "last_order_slot_start": {
                        "name": "Start of last order's slot"
                    },
                    "last_order_status": {
                        "name": "Status of last order"
                    },
                    "last_order_total_price": {
                        "name": "Total price of last order"
                    },
                    "next_delivery_eta_end": {
                        "name": "Expected end of next delivery"
                    },
                    "next_delivery_eta_start": {
                        "name": "Expected start of next delivery"
                    },
                    "next_delivery_slot_end": {
                        "name": "End of next delivery's slot"
                    },
                    "next_delivery_slot_start": {
                        "name": "Start of next delivery's slot"
                    },
                    "selected_slot_end": {
                        "name": "End of selected slot"
                    },
                    "selected_slot_max_order_time": {
                        "name": "Max order time of selected slot"
                    },
                    "selected_slot_min_order_value": {
                        "name": "Minimum order value for selected slot"
                    },
                    "selected_slot_start": {
                        "name": "Start of selected slot"
                    }
                }
            },
            "services": {
                "add_product": {
                    "description": "Adds a product to the cart based on a search string or product ID. The search string and product ID are exclusive.",
                    "fields": {
                        "amount": {
                            "description": "Amount to add of the selected product.",
                            "name": "Amount"
                        },
                        "config_entry_id": {
                            "description": "The product will be added to the selected service.",
                            "name": "Picnic service"
                        },
                        "product_id": {
                            "description": "The product ID of a Picnic product.",
                            "name": "Product ID"
                        },
                        "product_name": {
                            "description": "Search for a product and add the first result.",
                            "name": "Product name"
                        }
                    },
                    "name": "Add a product to the cart"
                }
            }
        },
        "pilight": {
            "services": {
                "send": {
                    "description": "Sends RF code to Pilight device.",
                    "fields": {
                        "protocol": {
                            "description": "Protocol that Pilight recognizes. See https:\/\/manual.pilight.org\/protocols\/index.html for supported protocols and additional parameters that each protocol supports.",
                            "name": "Protocol"
                        }
                    },
                    "name": "Send"
                }
            }
        },
        "ping": {
            "services": {
                "reload": {
                    "description": "Reloads ping sensors from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "plaato": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "Your Plaato {device_type} with name **{device_name}** was successfully set up!"
                },
                "error": {
                    "invalid_webhook_device": "You have selected a device that does not support sending data to a webhook. It is only available for the Airlock",
                    "no_api_method": "You need to add an auth token or select webhook",
                    "no_auth_token": "You need to add an auth token"
                },
                "step": {
                    "api_method": {
                        "data": {
                            "token": "Paste Auth Token here",
                            "use_webhook": "Use webhook"
                        },
                        "description": "To be able to query the API an `auth_token` is required which can be obtained by following [these](https:\/\/plaato.zendesk.com\/hc\/en-us\/articles\/360003234717-Auth-token) instructions\n\n Selected device: **{device_type}** \n\nIf you rather use the built in webhook method (Airlock only) please check the box below and leave Auth Token blank",
                        "title": "Select API method"
                    },
                    "user": {
                        "data": {
                            "device_name": "Name your device",
                            "device_type": "Type of Plaato device"
                        },
                        "description": "Do you want to start setup?",
                        "title": "Set up the Plaato devices"
                    },
                    "webhook": {
                        "description": "To send events to Home Assistant, you will need to set up the webhook feature in Plaato Airlock.\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n\nSee [the documentation]({docs_url}) for further details.",
                        "title": "Webhook to use"
                    }
                }
            },
            "options": {
                "step": {
                    "user": {
                        "data": {
                            "update_interval": "Update interval (minutes)"
                        },
                        "description": "Set the update interval (minutes)",
                        "title": "Options for Plaato"
                    },
                    "webhook": {
                        "description": "Webhook info:\n\n- URL: `{webhook_url}`\n- Method: POST\n\n",
                        "title": "Options for Plaato Airlock"
                    }
                }
            }
        },
        "plant": {
            "entity_component": {
                "_": {
                    "name": "Plant Monitor",
                    "state": {
                        "ok": "OK",
                        "problem": "Problem"
                    }
                }
            },
            "title": "Plant Monitor"
        },
        "plex": {
            "config": {
                "abort": {
                    "all_configured": "All linked servers already configured",
                    "already_configured": "This Plex server is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "reauth_successful": "Re-authentication was successful",
                    "token_request_timeout": "Timed out obtaining token",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "faulty_credentials": "Authorization failed, verify Token",
                    "host_or_token": "Must provide at least one of Host or Token",
                    "no_servers": "No servers linked to Plex account",
                    "not_found": "Plex server not found",
                    "ssl_error": "SSL certificate issue"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "manual_setup": {
                        "data": {
                            "host": "Host",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "token": "Token (optional)",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "title": "Manual Plex Configuration"
                    },
                    "select_server": {
                        "data": {
                            "server": "Server"
                        },
                        "description": "Multiple servers available, select one:",
                        "title": "Select Plex server"
                    },
                    "user": {
                        "description": "Continue to [plex.tv](https:\/\/plex.tv) to link a Plex server."
                    },
                    "user_advanced": {
                        "data": {
                            "setup_method": "Setup method"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "plex_mp_settings": {
                        "data": {
                            "ignore_new_shared_users": "Ignore new managed\/shared users",
                            "ignore_plex_web_clients": "Ignore Plex Web clients",
                            "monitored_users": "Monitored users",
                            "use_episode_art": "Use episode art"
                        },
                        "description": "Options for Plex Media Players"
                    }
                }
            },
            "services": {
                "refresh_library": {
                    "description": "Refreshes a Plex library to scan for new and updated media.",
                    "fields": {
                        "library_name": {
                            "description": "Name of the Plex library to refresh.",
                            "name": "Library name"
                        },
                        "server_name": {
                            "description": "Name of a Plex server if multiple Plex servers configured.",
                            "name": "Server name"
                        }
                    },
                    "name": "Refresh library"
                },
                "scan_for_clients": {
                    "description": "Scans for available clients from the Plex server(s), local network, and plex.tv.",
                    "name": "Scan for clients"
                }
            }
        },
        "plugwise": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "anna_with_adam": "Both Anna and Adam detected. Add your Adam instead of your Anna"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_setup": "Add your Adam instead of your Anna, see the documentation",
                    "response_error": "Invalid XML data, or error indication received",
                    "unknown": "Unexpected error",
                    "unsupported": "Device with unsupported firmware"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "IP Address",
                            "password": "Smile ID",
                            "port": "Port",
                            "username": "Smile Username"
                        },
                        "data_description": {
                            "host": "Leave empty if using Auto Discovery"
                        },
                        "description": "Please enter",
                        "title": "Connect to the Smile"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "compressor_state": {
                        "name": "Compressor state"
                    },
                    "cooling_enabled": {
                        "name": "Cooling enabled"
                    },
                    "cooling_state": {
                        "name": "Cooling"
                    },
                    "dhw_state": {
                        "name": "DHW state"
                    },
                    "flame_state": {
                        "name": "Flame state"
                    },
                    "heating_state": {
                        "name": "Heating"
                    },
                    "plugwise_notification": {
                        "name": "Plugwise notification"
                    },
                    "slave_boiler_state": {
                        "name": "Secondary boiler state"
                    }
                },
                "climate": {
                    "plugwise": {
                        "state_attributes": {
                            "available_schemas": {
                                "name": "Available schemas"
                            },
                            "preset_mode": {
                                "state": {
                                    "asleep": "Night",
                                    "away": "Away",
                                    "home": "Home",
                                    "no_frost": "Anti-frost",
                                    "vacation": "Vacation"
                                }
                            },
                            "selected_schema": {
                                "name": "Selected schema"
                            }
                        }
                    }
                },
                "number": {
                    "max_dhw_temperature": {
                        "name": "Domestic hot water setpoint"
                    },
                    "maximum_boiler_temperature": {
                        "name": "Maximum boiler temperature setpoint"
                    },
                    "temperature_offset": {
                        "name": "Temperature offset"
                    }
                },
                "select": {
                    "dhw_mode": {
                        "name": "DHW mode",
                        "state": {
                            "auto": "Auto",
                            "boost": "Boost",
                            "comfort": "Comfort",
                            "off": "Off"
                        }
                    },
                    "regulation_mode": {
                        "name": "Regulation mode",
                        "state": {
                            "bleeding_cold": "Bleeding cold",
                            "bleeding_hot": "Bleeding hot",
                            "cooling": "Cooling",
                            "heating": "Heating",
                            "off": "Off"
                        }
                    },
                    "select_schedule": {
                        "name": "Thermostat schedule"
                    }
                },
                "sensor": {
                    "cooling_setpoint": {
                        "name": "Cooling setpoint"
                    },
                    "dhw_temperature": {
                        "name": "DHW temperature"
                    },
                    "domestic_hot_water_setpoint": {
                        "name": "DHW setpoint"
                    },
                    "electricity_consumed": {
                        "name": "Electricity consumed"
                    },
                    "electricity_consumed_interval": {
                        "name": "Electricity consumed interval"
                    },
                    "electricity_consumed_off_peak_cumulative": {
                        "name": "Electricity consumed off peak cumulative"
                    },
                    "electricity_consumed_off_peak_interval": {
                        "name": "Electricity consumed off peak interval"
                    },
                    "electricity_consumed_off_peak_point": {
                        "name": "Electricity consumed off peak point"
                    },
                    "electricity_consumed_peak_cumulative": {
                        "name": "Electricity consumed peak cumulative"
                    },
                    "electricity_consumed_peak_interval": {
                        "name": "Electricity consumed peak interval"
                    },
                    "electricity_consumed_peak_point": {
                        "name": "Electricity consumed peak point"
                    },
                    "electricity_consumed_point": {
                        "name": "Electricity consumed point"
                    },
                    "electricity_phase_one_consumed": {
                        "name": "Electricity phase one consumed"
                    },
                    "electricity_phase_one_produced": {
                        "name": "Electricity phase one produced"
                    },
                    "electricity_phase_three_consumed": {
                        "name": "Electricity phase three consumed"
                    },
                    "electricity_phase_three_produced": {
                        "name": "Electricity phase three produced"
                    },
                    "electricity_phase_two_consumed": {
                        "name": "Electricity phase two consumed"
                    },
                    "electricity_phase_two_produced": {
                        "name": "Electricity phase two produced"
                    },
                    "electricity_produced": {
                        "name": "Electricity produced"
                    },
                    "electricity_produced_interval": {
                        "name": "Electricity produced interval"
                    },
                    "electricity_produced_off_peak_cumulative": {
                        "name": "Electricity produced off peak cumulative"
                    },
                    "electricity_produced_off_peak_interval": {
                        "name": "Electricity produced off peak interval"
                    },
                    "electricity_produced_off_peak_point": {
                        "name": "Electricity produced off peak point"
                    },
                    "electricity_produced_peak_cumulative": {
                        "name": "Electricity produced peak cumulative"
                    },
                    "electricity_produced_peak_interval": {
                        "name": "Electricity produced peak interval"
                    },
                    "electricity_produced_peak_point": {
                        "name": "Electricity produced peak point"
                    },
                    "electricity_produced_point": {
                        "name": "Electricity produced point"
                    },
                    "gas_consumed_cumulative": {
                        "name": "Gas consumed cumulative"
                    },
                    "gas_consumed_interval": {
                        "name": "Gas consumed interval"
                    },
                    "heating_setpoint": {
                        "name": "Heating setpoint"
                    },
                    "intended_boiler_temperature": {
                        "name": "Intended boiler temperature"
                    },
                    "maximum_boiler_temperature": {
                        "name": "Maximum boiler temperature"
                    },
                    "modulation_level": {
                        "name": "Modulation level"
                    },
                    "net_electricity_cumulative": {
                        "name": "Net electricity cumulative"
                    },
                    "net_electricity_point": {
                        "name": "Net electricity point"
                    },
                    "outdoor_air_temperature": {
                        "name": "Outdoor air temperature"
                    },
                    "outdoor_temperature": {
                        "name": "Outdoor temperature"
                    },
                    "return_temperature": {
                        "name": "Return temperature"
                    },
                    "setpoint": {
                        "name": "Setpoint"
                    },
                    "temperature_difference": {
                        "name": "Temperature difference"
                    },
                    "valve_position": {
                        "name": "Valve position"
                    },
                    "voltage_phase_one": {
                        "name": "Voltage phase one"
                    },
                    "voltage_phase_three": {
                        "name": "Voltage phase three"
                    },
                    "voltage_phase_two": {
                        "name": "Voltage phase two"
                    },
                    "water_pressure": {
                        "name": "Water pressure"
                    },
                    "water_temperature": {
                        "name": "Water temperature"
                    }
                },
                "switch": {
                    "cooling_ena_switch": {
                        "name": "Cooling"
                    },
                    "dhw_cm_switch": {
                        "name": "DHW comfort mode"
                    },
                    "lock": {
                        "name": "Lock"
                    },
                    "relay": {
                        "name": "Relay"
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "plugwise__dhw_mode": {
                            "auto": "Auto",
                            "boost": "Boost",
                            "comfort": "Comfort",
                            "off": "Off"
                        },
                        "plugwise__regulation_mode": {
                            "bleeding_cold": "Bleeding cold",
                            "bleeding_hot": "Bleeding hot",
                            "cooling": "Cooling",
                            "heating": "Heating",
                            "off": "Off"
                        }
                    }
                }
            }
        },
        "plum_lightpad": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        }
                    }
                }
            }
        },
        "point": {
            "config": {
                "abort": {
                    "already_setup": "Already configured. Only a single configuration possible.",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "external_setup": "Point successfully configured from another flow.",
                    "no_flows": "The component is not configured. Please follow the documentation.",
                    "unknown_authorize_url_generation": "Unknown error generating an authorize URL."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "error": {
                    "follow_link": "Please follow the link and authenticate before pressing Submit",
                    "no_token": "Invalid access token"
                },
                "step": {
                    "auth": {
                        "description": "Please follow the link below and **Accept** access to your Minut account, then come back and press **Submit** below.\n\n[Link]({authorization_url})",
                        "title": "Authenticate Point"
                    },
                    "user": {
                        "data": {
                            "flow_impl": "Provider"
                        },
                        "description": "Do you want to start setup?",
                        "title": "Pick Authentication Method"
                    }
                }
            }
        },
        "poolsense": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "chlorine_status": {
                        "name": "Chlorine status"
                    },
                    "ph_status": {
                        "name": "pH status"
                    }
                },
                "sensor": {
                    "chlorine": {
                        "name": "Chlorine"
                    },
                    "chlorine_high": {
                        "name": "Chlorine high"
                    },
                    "chlorine_low": {
                        "name": "Chlorine low"
                    },
                    "last_seen": {
                        "name": "Last seen"
                    },
                    "ph": {
                        "name": "pH"
                    },
                    "ph_high": {
                        "name": "pH high"
                    },
                    "ph_low": {
                        "name": "pH low"
                    }
                }
            }
        },
        "powerwall": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error",
                    "wrong_version": "Your Powerwall uses a software version that is not supported. Please consider upgrading or reporting this issue so it can be resolved."
                },
                "flow_title": "{name} ({ip_address})",
                "step": {
                    "confirm_discovery": {
                        "description": "Do you want to set up {name} ({ip_address})?",
                        "title": "Connect to the Powerwall"
                    },
                    "reauth_confim": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The default password is the last 5 characters of the password printed inside the Backup Gateway for newer models. For older models, the default password is the last five characters of the serial number for Backup Gateway and can be found in the Tesla app.",
                        "title": "Reauthenticate the Powerwall"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The default password is the last 5 characters of the password printed inside the Backup Gateway for newer models. For older models, the default password is the last five characters of the serial number for Backup Gateway and can be found in the Tesla app.",
                        "title": "Reauthenticate the Powerwall"
                    },
                    "user": {
                        "data": {
                            "ip_address": "IP Address",
                            "password": "Password"
                        },
                        "description": "The default password is the last 5 characters of the password printed inside the Backup Gateway for newer models. For older models, the default password is the last five characters of the serial number for Backup Gateway and can be found in the Tesla app.",
                        "title": "Connect to the Powerwall"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "connected_to_tesla": {
                        "name": "Connected to Tesla"
                    },
                    "grid_services_active": {
                        "name": "Grid services active"
                    },
                    "grid_status": {
                        "name": "Grid status"
                    },
                    "status": {
                        "name": "Status"
                    }
                },
                "sensor": {
                    "backup_reserve": {
                        "name": "Backup reserve"
                    },
                    "battery_export": {
                        "name": "Battery export"
                    },
                    "battery_import": {
                        "name": "Battery import"
                    },
                    "battery_instant_current": {
                        "name": "Battery current"
                    },
                    "battery_instant_frequency": {
                        "name": "Battery frequency"
                    },
                    "battery_instant_power": {
                        "name": "Battery power"
                    },
                    "battery_instant_voltage": {
                        "name": "Battery voltage"
                    },
                    "busway_export": {
                        "name": "Busway export"
                    },
                    "busway_import": {
                        "name": "Busway import"
                    },
                    "busway_instant_current": {
                        "name": "Busway current"
                    },
                    "busway_instant_frequency": {
                        "name": "Busway frequency"
                    },
                    "busway_instant_power": {
                        "name": "Busway power"
                    },
                    "busway_instant_voltage": {
                        "name": "Busway voltage"
                    },
                    "charge": {
                        "name": "Charge"
                    },
                    "generator_export": {
                        "name": "Generator export"
                    },
                    "generator_import": {
                        "name": "Generator import"
                    },
                    "generator_instant_current": {
                        "name": "Generator current"
                    },
                    "generator_instant_frequency": {
                        "name": "Generator frequency"
                    },
                    "generator_instant_power": {
                        "name": "Generator power"
                    },
                    "generator_instant_voltage": {
                        "name": "Generator voltage"
                    },
                    "load_export": {
                        "name": "Load export"
                    },
                    "load_import": {
                        "name": "Load import"
                    },
                    "load_instant_current": {
                        "name": "Load current"
                    },
                    "load_instant_frequency": {
                        "name": "Load frequency"
                    },
                    "load_instant_power": {
                        "name": "Load power"
                    },
                    "load_instant_voltage": {
                        "name": "Load voltage"
                    },
                    "site_export": {
                        "name": "Site export"
                    },
                    "site_import": {
                        "name": "Site import"
                    },
                    "site_instant_current": {
                        "name": "Site current"
                    },
                    "site_instant_frequency": {
                        "name": "Site frequency"
                    },
                    "site_instant_power": {
                        "name": "Site power"
                    },
                    "site_instant_voltage": {
                        "name": "Site voltage"
                    },
                    "solar_export": {
                        "name": "Solar export"
                    },
                    "solar_import": {
                        "name": "Solar import"
                    },
                    "solar_instant_current": {
                        "name": "Solar current"
                    },
                    "solar_instant_frequency": {
                        "name": "Solar frequency"
                    },
                    "solar_instant_power": {
                        "name": "Solar power"
                    },
                    "solar_instant_voltage": {
                        "name": "Solar voltage"
                    }
                },
                "switch": {
                    "off_grid_operation": {
                        "name": "Off-grid operation"
                    }
                }
            }
        },
        "private_ble_device": {
            "config": {
                "abort": {
                    "bluetooth_not_available": "At least one Bluetooth adapter or remote bluetooth proxy must be configured to track Private BLE Devices."
                },
                "error": {
                    "irk_not_found": "The provided IRK does not match any BLE devices that Home Assistant can see.",
                    "irk_not_valid": "The key does not look like a valid IRK."
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "irk": "IRK"
                        },
                        "description": "What is the IRK (Identity Resolving Key) of the BLE device you want to track?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "estimated_broadcast_interval": {
                        "name": "Estimated broadcast interval"
                    },
                    "estimated_distance": {
                        "name": "Estimated distance"
                    },
                    "power": {
                        "name": "Power"
                    }
                }
            }
        },
        "profiler": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "services": {
                "dump_log_objects": {
                    "description": "Dumps the repr of all matching objects to the log.",
                    "fields": {
                        "type": {
                            "description": "The type of objects to dump to the log.",
                            "name": "Type"
                        }
                    },
                    "name": "Dump log objects"
                },
                "log_event_loop_scheduled": {
                    "description": "Logs what is scheduled in the event loop.",
                    "name": "Log event loop scheduled"
                },
                "log_thread_frames": {
                    "description": "Logs the current frames for all threads.",
                    "name": "Log thread frames"
                },
                "lru_stats": {
                    "description": "Logs the stats of all lru caches.",
                    "name": "Log LRU stats"
                },
                "memory": {
                    "description": "Starts the Memory Profiler.",
                    "fields": {
                        "seconds": {
                            "description": "The number of seconds to run the memory profiler.",
                            "name": "Seconds"
                        }
                    },
                    "name": "Memory"
                },
                "start": {
                    "description": "Starts the Profiler.",
                    "fields": {
                        "seconds": {
                            "description": "The number of seconds to run the profiler.",
                            "name": "Seconds"
                        }
                    },
                    "name": "Start"
                },
                "start_log_object_sources": {
                    "description": "Starts logging sources of new objects in memory.",
                    "fields": {
                        "max_objects": {
                            "description": "The maximum number of objects to log.",
                            "name": "Maximum objects"
                        },
                        "scan_interval": {
                            "description": "The number of seconds between logging objects.",
                            "name": "Scan interval"
                        }
                    },
                    "name": "Start logging object sources"
                },
                "start_log_objects": {
                    "description": "Starts logging growth of objects in memory.",
                    "fields": {
                        "scan_interval": {
                            "description": "The number of seconds between logging objects.",
                            "name": "Scan interval"
                        }
                    },
                    "name": "Start logging objects"
                },
                "stop_log_object_sources": {
                    "description": "Stops logging sources of new objects in memory.",
                    "name": "Stop logging object sources"
                },
                "stop_log_objects": {
                    "description": "Stops logging growth of objects in memory.",
                    "name": "Stop logging objects"
                }
            }
        },
        "progettihwsw": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "relay_modes": {
                        "data": {
                            "relay_1": "Relay 1",
                            "relay_10": "Relay 10",
                            "relay_11": "Relay 11",
                            "relay_12": "Relay 12",
                            "relay_13": "Relay 13",
                            "relay_14": "Relay 14",
                            "relay_15": "Relay 15",
                            "relay_16": "Relay 16",
                            "relay_2": "Relay 2",
                            "relay_3": "Relay 3",
                            "relay_4": "Relay 4",
                            "relay_5": "Relay 5",
                            "relay_6": "Relay 6",
                            "relay_7": "Relay 7",
                            "relay_8": "Relay 8",
                            "relay_9": "Relay 9"
                        },
                        "title": "Set up relays"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Set up board"
                    }
                }
            }
        },
        "prosegur": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "choose_contract": {
                        "data": {
                            "contract": "Contract"
                        }
                    },
                    "reauth_confirm": {
                        "data": {
                            "description": "Re-authenticate with Prosegur account.",
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "country": "Country",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "services": {
                "request_image": {
                    "description": "Requests a new image from a Prosegur camera.",
                    "name": "Request camera image"
                }
            }
        },
        "proximity": {
            "title": "Proximity"
        },
        "prusalink": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "not_supported": "Only PrusaLink API v2 is supported",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "button": {
                    "cancel_job": {
                        "name": "Cancel job"
                    },
                    "pause_job": {
                        "name": "Pause job"
                    },
                    "resume_job": {
                        "name": "Resume job"
                    }
                },
                "camera": {
                    "job_preview": {
                        "name": "Preview"
                    }
                },
                "sensor": {
                    "filename": {
                        "name": "Filename"
                    },
                    "heatbed_target_temperature": {
                        "name": "Heatbed target temperature"
                    },
                    "heatbed_temperature": {
                        "name": "Heatbed temperature"
                    },
                    "material": {
                        "name": "Material"
                    },
                    "nozzle_target_temperature": {
                        "name": "Nozzle target temperature"
                    },
                    "nozzle_temperature": {
                        "name": "Nozzle temperature"
                    },
                    "print_finish": {
                        "name": "Print finish"
                    },
                    "print_speed": {
                        "name": "Print speed"
                    },
                    "print_start": {
                        "name": "Print start"
                    },
                    "printer_state": {
                        "state": {
                            "cancelling": "Cancelling",
                            "idle": "Idle",
                            "paused": "Paused",
                            "pausing": "Pausing",
                            "printing": "Printing"
                        }
                    },
                    "progress": {
                        "name": "Progress"
                    },
                    "z_height": {
                        "name": "Z-Height"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "prusalink__printer_state": {
                            "cancelling": "Cancelling",
                            "idle": "Idle",
                            "paused": "Paused",
                            "pausing": "Pausing",
                            "printing": "Printing"
                        }
                    }
                }
            }
        },
        "ps4": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "credential_error": "Error fetching credentials.",
                    "no_devices_found": "No devices found on the network",
                    "port_987_bind_error": "Could not bind to port 987. Refer to the [documentation](https:\/\/www.home-assistant.io\/components\/ps4\/) for additional info.",
                    "port_997_bind_error": "Could not bind to port 997. Refer to the [documentation](https:\/\/www.home-assistant.io\/components\/ps4\/) for additional info."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "credential_timeout": "Credential service timed out. Press submit to restart.",
                    "login_failed": "Failed to pair to PlayStation 4. Verify PIN is correct.",
                    "no_ipaddress": "Enter the IP address of the PlayStation 4 you would like to configure."
                },
                "step": {
                    "creds": {
                        "description": "Credentials needed. Press 'Submit' and then in the PS4 2nd Screen App, refresh devices and select the 'Home-Assistant' device to continue."
                    },
                    "link": {
                        "data": {
                            "code": "PIN Code",
                            "ip_address": "IP Address",
                            "name": "Name",
                            "region": "Region"
                        },
                        "data_description": {
                            "code": "Navigate to 'Settings' on your PlayStation 4 console. Then navigate to 'Mobile App Connection Settings' and select 'Add Device' to get the pin."
                        }
                    },
                    "mode": {
                        "data": {
                            "ip_address": "IP Address",
                            "mode": "Config Mode"
                        },
                        "data_description": {
                            "ip_address": "Leave blank if selecting auto-discovery."
                        }
                    }
                }
            },
            "services": {
                "send_command": {
                    "description": "Emulates button press for PlayStation 4.",
                    "fields": {
                        "command": {
                            "description": "Button to press.",
                            "name": "Command"
                        },
                        "entity_id": {
                            "description": "Name of entity to send command.",
                            "name": "Entity"
                        }
                    },
                    "name": "Send command"
                }
            }
        },
        "pure_energie": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{model} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "data_description": {
                            "host": "The IP address or hostname of your Pure Energie Meter."
                        }
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add Pure Energie Meter (`{model}`) to Home Assistant?",
                        "title": "Discovered Pure Energie Meter device"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "energy_consumption_total": {
                        "name": "Energy consumption"
                    },
                    "energy_production_total": {
                        "name": "Energy production"
                    },
                    "power_flow": {
                        "name": "Power flow"
                    }
                }
            }
        },
        "purpleair": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_api_key": "Invalid API key",
                    "no_sensors_near_coordinates": "No sensors found near coordinates (within distance)",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "by_coordinates": {
                        "data": {
                            "distance": "Search Radius",
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "data_description": {
                            "distance": "The radius (in kilometers) of the circle to search within",
                            "latitude": "The latitude around which to search for sensors",
                            "longitude": "The longitude around which to search for sensors"
                        },
                        "description": "Search for a PurpleAir sensor within a certain distance of a latitude\/longitude."
                    },
                    "choose_sensor": {
                        "data": {
                            "sensor_index": "Sensor"
                        },
                        "data_description": {
                            "sensor_index": "The sensor to track"
                        },
                        "description": "Which of the nearby sensors would you like to track?"
                    },
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "data_description": {
                            "api_key": "Your PurpleAir API key (if you have both read and write keys, use the read key)"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "data_description": {
                            "api_key": "Your PurpleAir API key (if you have both read and write keys, use the read key)"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "pm0_3_count_concentration": {
                        "name": "PM0.3 count concentration"
                    },
                    "pm0_5_count_concentration": {
                        "name": "PM0.5 count concentration"
                    },
                    "pm10_0_count_concentration": {
                        "name": "PM10.0 count concentration"
                    },
                    "pm1_0_count_concentration": {
                        "name": "PM1.0 count concentration"
                    },
                    "pm2_5_count_concentration": {
                        "name": "PM2.5 count concentration"
                    },
                    "pm5_0_count_concentration": {
                        "name": "PM5.0 count concentration"
                    },
                    "rssi": {
                        "name": "RSSI"
                    },
                    "uptime": {
                        "name": "Uptime"
                    },
                    "voc_aqi": {
                        "name": "Volatile organic compounds air quality index"
                    }
                }
            },
            "options": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_api_key": "Invalid API key",
                    "no_sensors_near_coordinates": "No sensors found near coordinates (within distance)",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "add_sensor": {
                        "data": {
                            "distance": "Search Radius",
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "data_description": {
                            "distance": "The radius (in kilometers) of the circle to search within",
                            "latitude": "The latitude around which to search for sensors",
                            "longitude": "The longitude around which to search for sensors"
                        },
                        "description": "Search for a PurpleAir sensor within a certain distance of a latitude\/longitude.",
                        "title": "Add Sensor"
                    },
                    "choose_sensor": {
                        "data": {
                            "sensor_index": "Sensor"
                        },
                        "data_description": {
                            "sensor_index": "The sensor to track"
                        },
                        "description": "Which of the nearby sensors would you like to track?",
                        "title": "Choose Sensor to Add"
                    },
                    "init": {
                        "menu_options": {
                            "add_sensor": "Add sensor",
                            "remove_sensor": "Remove sensor",
                            "settings": "Settings"
                        }
                    },
                    "remove_sensor": {
                        "data": {
                            "sensor_device_id": "Sensor Name"
                        },
                        "data_description": {
                            "sensor_device_id": "The sensor to remove"
                        },
                        "title": "Remove Sensor"
                    },
                    "settings": {
                        "data": {
                            "show_on_map": "Show configured sensor locations on the map"
                        },
                        "title": "Settings"
                    }
                }
            }
        },
        "pushbullet": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "name": "Name"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "application_name": {
                        "name": "Application name"
                    },
                    "body": {
                        "name": "Body"
                    },
                    "notification_id": {
                        "name": "Notification ID"
                    },
                    "notification_tag": {
                        "name": "Notification tag"
                    },
                    "package_name": {
                        "name": "Package name"
                    },
                    "receiver_email": {
                        "name": "Receiver email"
                    },
                    "sender_email": {
                        "name": "Sender email"
                    },
                    "source_device_identifier": {
                        "name": "Sender device ID"
                    },
                    "title": {
                        "name": "Title"
                    },
                    "type": {
                        "name": "Type"
                    }
                }
            }
        },
        "pushover": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key",
                    "invalid_user_key": "Invalid user key"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "name": "Name",
                            "user_key": "User key"
                        }
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Pushover using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the Pushover YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Pushover YAML configuration has been removed"
                }
            }
        },
        "pvoutput": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "To re-authenticate with PVOutput you'll need to get the API key at {account_url}."
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "system_id": "System ID"
                        },
                        "description": "To authenticate with PVOutput you'll need to get the API key at {account_url}.\n\nThe system IDs of registered systems are listed on that same page."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "efficiency": {
                        "name": "Efficiency"
                    },
                    "energy_consumption": {
                        "name": "Energy consumed"
                    },
                    "energy_generation": {
                        "name": "Energy generated"
                    },
                    "power_consumption": {
                        "name": "Power consumed"
                    },
                    "power_generation": {
                        "name": "Power generated"
                    }
                }
            }
        },
        "pvpc_hourly_pricing": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "name": "Sensor Name",
                            "power": "Contracted power (kW)",
                            "power_p3": "Contracted power for valley period P3 (kW)",
                            "tariff": "Applicable tariff by geographic zone"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "power": "Contracted power (kW)",
                            "power_p3": "Contracted power for valley period P3 (kW)"
                        }
                    }
                }
            }
        },
        "python_script": {
            "services": {
                "reload": {
                    "description": "Reloads all available Python scripts.",
                    "name": "Reload"
                }
            }
        },
        "qbittorrent": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring qBittorrent using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the qBittorrent YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The qBittorrent YAML configuration is being removed"
                }
            }
        },
        "qingping": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "qnap": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "This qnap sensor allows getting various statistics from your QNAP NAS.",
                        "title": "Connect to the QNAP device"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring QNAP using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the QNAP YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The QNAP YAML configuration is being removed"
                }
            }
        },
        "qnap_qsw": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "invalid_id": "Device returned an invalid unique ID"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "discovered_connection": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "url": "URL",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "fan_1_speed": {
                        "name": "Fan 1 speed"
                    },
                    "fan_2_speed": {
                        "name": "Fan 2 speed"
                    },
                    "ports": {
                        "name": "Ports"
                    },
                    "rx": {
                        "name": "RX"
                    },
                    "rx_errors": {
                        "name": "RX errors"
                    },
                    "rx_speed": {
                        "name": "RX speed"
                    },
                    "tx": {
                        "name": "TX"
                    },
                    "tx_speed": {
                        "name": "TX speed"
                    },
                    "uptime": {
                        "name": "Uptime"
                    }
                }
            }
        },
        "qvr_pro": {
            "services": {
                "start_record": {
                    "description": "Starts QVR Pro recording on specified channel.",
                    "fields": {
                        "guid": {
                            "description": "GUID of the channel to start recording.",
                            "name": "GUID"
                        }
                    },
                    "name": "Start record"
                },
                "stop_record": {
                    "description": "Stops QVR Pro recording on specified channel.",
                    "fields": {
                        "guid": {
                            "description": "GUID of the channel to stop recording.",
                            "name": "GUID"
                        }
                    },
                    "name": "Stop record"
                }
            }
        },
        "rachio": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "You will need the API Key from https:\/\/app.rach.io\/. Go to Settings, then click 'GET API KEY'.",
                        "title": "Connect to your Rachio device"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "rain": {
                        "name": "Rain"
                    }
                },
                "switch": {
                    "rain_delay": {
                        "name": "Rain delay"
                    },
                    "standby": {
                        "name": "Standby"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "manual_run_mins": "Duration in minutes to run when activating a zone switch"
                        }
                    }
                }
            },
            "services": {
                "pause_watering": {
                    "description": "Pause any currently running zones or schedules.",
                    "fields": {
                        "devices": {
                            "description": "Name of controllers to pause. Defaults to all controllers on the account if not provided.",
                            "name": "Devices"
                        },
                        "duration": {
                            "description": "The time to pause running schedules.",
                            "name": "Duration"
                        }
                    },
                    "name": "Pause watering"
                },
                "resume_watering": {
                    "description": "Resume any paused zone runs or schedules.",
                    "fields": {
                        "devices": {
                            "description": "Name of controllers to resume. Defaults to all controllers on the account if not provided.",
                            "name": "Devices"
                        }
                    },
                    "name": "Resume watering"
                },
                "set_zone_moisture_percent": {
                    "description": "Sets the moisture percentage of a zone or list of zones.",
                    "fields": {
                        "percent": {
                            "description": "Set the desired zone moisture percentage.",
                            "name": "Percent"
                        }
                    },
                    "name": "Set zone moisture percent"
                },
                "start_multiple_zone_schedule": {
                    "description": "Creates a custom schedule of zones and runtimes. Note that all zones should be on the same controller to avoid issues.",
                    "fields": {
                        "duration": {
                            "description": "Number of minutes to run the zone(s). If only 1 duration is given, that time will be used for all zones. If given a list of durations, the durations will apply to the respective zones listed above.",
                            "name": "Duration"
                        }
                    },
                    "name": "Start multiple zones"
                },
                "stop_watering": {
                    "description": "Stop any currently running zones or schedules.",
                    "fields": {
                        "devices": {
                            "description": "Name of controllers to stop. Defaults to all controllers on the account if not provided.",
                            "name": "Devices"
                        }
                    },
                    "name": "Stop watering"
                }
            }
        },
        "radarr": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error",
                    "wrong_app": "Incorrect application reached. Please try again",
                    "zeroconf_failed": "API key not found. Please enter it manually"
                },
                "step": {
                    "reauth_confirm": {
                        "description": "The Radarr integration needs to be manually re-authenticated with the Radarr API",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "url": "URL",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "API key can be retrieved automatically if login credentials were not set in application.\nYour API key can be found in Settings > General in the Radarr Web UI."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "health": {
                        "name": "Health"
                    }
                },
                "sensor": {
                    "movies": {
                        "name": "Movies"
                    },
                    "queue": {
                        "name": "Queue"
                    },
                    "start_time": {
                        "name": "Start time"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Radarr using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Radarr YAML configuration has been removed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "upcoming_days": "Number of upcoming days to display"
                        }
                    }
                }
            }
        },
        "radio_browser": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to add Radio Browser to Home Assistant?"
                    }
                }
            }
        },
        "radiotherm": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} {model} ({host})",
                "step": {
                    "confirm": {
                        "description": "Do you want to set up {name} {model} ({host})?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "switch": {
                    "hold": {
                        "name": "Hold"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "hold_temp": "Set a permanent hold when adjusting the temperature."
                        }
                    }
                }
            }
        },
        "rainbird": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "timeout_connect": "Timeout establishing connection"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password"
                        },
                        "description": "Please enter the LNK WiFi module information for your Rain Bird device.",
                        "title": "Configure Rain Bird"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "rainsensor": {
                        "name": "Rainsensor"
                    }
                },
                "number": {
                    "rain_delay": {
                        "name": "Rain delay"
                    }
                },
                "sensor": {
                    "raindelay": {
                        "name": "Raindelay"
                    }
                }
            },
            "issues": {
                "deprecated_raindelay": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The Rain Bird service `rainbird.set_rain_delay` is being removed and replaced by a Number entity for managing the rain delay. Any existing automations or scripts will need to be updated to use `number.set_value` with a target of `{alternate_target}` instead.",
                                "title": "The Rain Bird Rain Delay Service is being removed"
                            }
                        }
                    },
                    "title": "The Rain Bird Rain Delay Service is being removed"
                },
                "deprecated_yaml": {
                    "description": "Configuring Rain Bird in configuration.yaml is being removed in Home Assistant 2023.4.\n\nYour configuration has been imported into the UI automatically, however default per-zone irrigation times are no longer supported. Remove the Rain Bird YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Rain Bird YAML configuration is being removed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "duration": "Default irrigation time in minutes"
                        },
                        "title": "Configure Rain Bird"
                    }
                }
            },
            "services": {
                "set_rain_delay": {
                    "description": "Sets how long automatic irrigation is turned off.",
                    "fields": {
                        "config_entry_id": {
                            "description": "The setting will be adjusted on the specified controller.",
                            "name": "Rainbird Controller Configuration Entry"
                        },
                        "duration": {
                            "description": "Duration for this system to be turned off.",
                            "name": "Duration"
                        }
                    },
                    "name": "Set rain delay"
                },
                "start_irrigation": {
                    "description": "Starts the irrigation.",
                    "fields": {
                        "duration": {
                            "description": "Duration for this sprinkler to be turned on.",
                            "name": "Duration"
                        }
                    },
                    "name": "Start irrigation"
                }
            }
        },
        "rainforest_eagle": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "cloud_id": "Cloud ID",
                            "host": "Host",
                            "install_code": "Installation Code"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "meter_price": {
                        "name": "Meter price"
                    },
                    "power_demand": {
                        "name": "Meter power demand"
                    },
                    "total_energy_delivered": {
                        "name": "Total meter energy delivered"
                    },
                    "total_energy_received": {
                        "name": "Total meter energy received"
                    }
                }
            }
        },
        "rainmachine": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{ip}",
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "Hostname or IP Address",
                            "password": "Password",
                            "port": "Port"
                        },
                        "title": "Fill in your information"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "flow_sensor": {
                        "name": "Flow sensor"
                    },
                    "freeze": {
                        "name": "Freeze restrictions"
                    },
                    "hourly": {
                        "name": "Hourly restrictions"
                    },
                    "month": {
                        "name": "Month restrictions"
                    },
                    "raindelay": {
                        "name": "Rain delay restrictions"
                    },
                    "rainsensor": {
                        "name": "Rain sensor restrictions"
                    },
                    "weekday": {
                        "name": "Weekday restrictions"
                    }
                },
                "select": {
                    "freeze_protection_temperature": {
                        "name": "Freeze protection temperature"
                    }
                },
                "sensor": {
                    "flow_sensor_clicks_cubic_meter": {
                        "name": "Flow sensor clicks per cubic meter"
                    },
                    "flow_sensor_consumed_liters": {
                        "name": "Flow sensor consumed liters"
                    },
                    "flow_sensor_leak_clicks": {
                        "name": "Flow sensor leak clicks"
                    },
                    "flow_sensor_leak_volume": {
                        "name": "Flow sensor leak volume"
                    },
                    "flow_sensor_start_index": {
                        "name": "Flow sensor start index"
                    },
                    "flow_sensor_watering_clicks": {
                        "name": "Flow sensor clicks"
                    },
                    "last_leak_detected": {
                        "name": "Last leak detected"
                    },
                    "rain_sensor_rain_start": {
                        "name": "Rain sensor rain start"
                    }
                },
                "switch": {
                    "freeze_protect_enabled": {
                        "name": "Freeze protection"
                    },
                    "hot_days_extra_watering": {
                        "name": "Extra water on hot days"
                    }
                },
                "update": {
                    "firmware": {
                        "name": "Firmware"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "use_app_run_times": "Use zone run times from RainMachine app",
                            "zone_run_time": "Default zone run time (in seconds)"
                        },
                        "title": "Configure RainMachine"
                    }
                }
            },
            "services": {
                "pause_watering": {
                    "description": "Pauses all watering activities for a number of seconds.",
                    "fields": {
                        "device_id": {
                            "description": "The controller whose watering activities should be paused.",
                            "name": "Controller"
                        },
                        "seconds": {
                            "description": "The amount of time (in seconds) to pause watering.",
                            "name": "Duration"
                        }
                    },
                    "name": "Pause all watering"
                },
                "push_flow_meter_data": {
                    "description": "Push flow meter data to the RainMachine device.",
                    "fields": {
                        "device_id": {
                            "description": "The controller to send flow meter data to.",
                            "name": "Controller"
                        },
                        "unit_of_measurement": {
                            "description": "The flow meter units to send.",
                            "name": "Unit of measurement"
                        },
                        "value": {
                            "description": "The flow meter value to send.",
                            "name": "Value"
                        }
                    },
                    "name": "Push flow meter data"
                },
                "push_weather_data": {
                    "description": "Push weather data from Home Assistant to the RainMachine device.\nLocal Weather Push service should be enabled from Settings > Weather > Developer tab for RainMachine to consider the values being sent. Units must be sent in metric; no conversions are performed by the integraion.\nSee details of RainMachine API Here: https:\/\/rainmachine.docs.apiary.io\/#reference\/weather-services\/parserdata\/post.",
                    "fields": {
                        "condition": {
                            "description": "Current weather condition code (WNUM).",
                            "name": "Weather condition code"
                        },
                        "device_id": {
                            "description": "The controller for the weather data to be pushed.",
                            "name": "Controller"
                        },
                        "dewpoint": {
                            "description": "Dew point (°C).",
                            "name": "Dew point"
                        },
                        "et": {
                            "description": "Evapotranspiration (mm).",
                            "name": "Evapotranspiration"
                        },
                        "maxrh": {
                            "description": "Max relative humidity (%RH).",
                            "name": "Max relative humidity"
                        },
                        "maxtemp": {
                            "description": "Maximum temperature (°C).",
                            "name": "Max temp"
                        },
                        "minrh": {
                            "description": "Min relative humidity (%RH).",
                            "name": "Min relative humidity"
                        },
                        "mintemp": {
                            "description": "Minimum temperature (°C).",
                            "name": "Min temp"
                        },
                        "pressure": {
                            "description": "Barametric pressure (kPa).",
                            "name": "Barametric pressure"
                        },
                        "qpf": {
                            "description": "Quantitative Precipitation Forecast (mm), or QPF. Note: QPF values shouldn't be send as cumulative values but the measured\/forecasted values for each hour or day. The RainMachine Mixer will sum all QPF values in the current day to have the day total QPF.",
                            "name": "Quantitative Precipitation Forecast"
                        },
                        "rain": {
                            "description": "Measured rainfail (mm). Note: RAIN values shouldn't be send as cumulative values but the measured\/forecasted values for each hour or day. The RainMachine Mixer will sum all RAIN values in the current day to have the day total RAIN.",
                            "name": "Measured rainfall"
                        },
                        "solarrad": {
                            "description": "Solar radiation (MJ\/m²\/h).",
                            "name": "Solar radiation"
                        },
                        "temperature": {
                            "description": "Current temperature (°C).",
                            "name": "Temperature"
                        },
                        "timestamp": {
                            "description": "UNIX Timestamp for the weather data. If omitted, the RainMachine device's local time at the time of the call is used.",
                            "name": "Timestamp"
                        },
                        "wind": {
                            "description": "Wind speed (m\/s).",
                            "name": "Wind speed"
                        }
                    },
                    "name": "Push weather data"
                },
                "restrict_watering": {
                    "description": "Restricts all watering activities from starting for a time period.",
                    "fields": {
                        "device_id": {
                            "description": "The controller whose watering activities should be restricted.",
                            "name": "Controller"
                        },
                        "duration": {
                            "description": "The time period to restrict watering activities from starting.",
                            "name": "Duration"
                        }
                    },
                    "name": "Restrict all watering"
                },
                "start_program": {
                    "description": "Starts a program.",
                    "name": "Start program"
                },
                "start_zone": {
                    "description": "Starts a zone.",
                    "fields": {
                        "zone_run_time": {
                            "description": "The amount of time (in seconds) to run the zone.",
                            "name": "Run time"
                        }
                    },
                    "name": "Start zone"
                },
                "stop_all": {
                    "description": "Stops all watering activities.",
                    "fields": {
                        "device_id": {
                            "description": "The controller whose watering activities should be stopped.",
                            "name": "Controller"
                        }
                    },
                    "name": "Stop all watering"
                },
                "stop_program": {
                    "description": "Stops a program.",
                    "name": "Stop program"
                },
                "stop_zone": {
                    "description": "Stops a zone.",
                    "name": "Stop zone"
                },
                "unpause_watering": {
                    "description": "Unpauses all paused watering activities.",
                    "fields": {
                        "device_id": {
                            "description": "The controller whose watering activities should be unpaused.",
                            "name": "Controller"
                        }
                    },
                    "name": "Unpause all watering"
                },
                "unrestrict_watering": {
                    "description": "Unrestrict all watering activities.",
                    "fields": {
                        "device_id": {
                            "description": "The controller whose watering activities should be unrestricted.",
                            "name": "Controller"
                        }
                    },
                    "name": "Unrestrict all watering"
                }
            }
        },
        "rapt_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "rdw": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown_license_plate": "Unknown license plate"
                },
                "step": {
                    "user": {
                        "data": {
                            "license_plate": "License plate"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "liability_insured": {
                        "name": "Liability insured"
                    },
                    "pending_recall": {
                        "name": "Pending recall"
                    }
                },
                "sensor": {
                    "apk_expiration": {
                        "name": "APK expiration"
                    },
                    "ascription_date": {
                        "name": "Ascription date"
                    }
                }
            }
        },
        "recollect_waste": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_place_or_service_id": "Invalid Place or Service ID"
                },
                "step": {
                    "user": {
                        "data": {
                            "place_id": "Place ID",
                            "service_id": "Service ID"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "current_pickup": {
                        "name": "Current pickup"
                    },
                    "next_pickup": {
                        "name": "Next pickup"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "friendly_name": "Use friendly names for pickup types (when possible)"
                        },
                        "title": "Configure Recollect Waste"
                    }
                }
            }
        },
        "recorder": {
            "issues": {
                "maria_db_range_index_regression": {
                    "description": "Older versions of MariaDB suffer from a significant performance regression when retrieving history data or purging the database. Update to MariaDB version {min_version} or later and restart Home Assistant. If you are using the MariaDB core add-on, make sure to update it to the latest version.",
                    "title": "Update MariaDB to {min_version} or later resolve a significant performance issue"
                }
            },
            "services": {
                "disable": {
                    "description": "Stops the recording of events and state changes.",
                    "name": "Disable"
                },
                "enable": {
                    "description": "Starts the recording of events and state changes.",
                    "name": "Enable"
                },
                "purge": {
                    "description": "Starts purge task - to clean up old data from your database.",
                    "fields": {
                        "apply_filter": {
                            "description": "Applys `entity_id` and `event_type` filters in addition to time-based purge.",
                            "name": "Apply filter"
                        },
                        "keep_days": {
                            "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.",
                            "name": "Days to keep"
                        },
                        "repack": {
                            "description": "Attempt to save disk space by rewriting the entire database file.",
                            "name": "Repack"
                        }
                    },
                    "name": "Purge"
                },
                "purge_entities": {
                    "description": "Starts a purge task to remove the data related to specific entities from your database.",
                    "fields": {
                        "domains": {
                            "description": "List of domains for which the data needs to be removed from the recorder database.",
                            "name": "Domains to remove"
                        },
                        "entity_globs": {
                            "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database.",
                            "name": "Entity globs to remove"
                        },
                        "keep_days": {
                            "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.",
                            "name": "Days to keep"
                        }
                    },
                    "name": "Purge entities"
                }
            },
            "system_health": {
                "info": {
                    "current_recorder_run": "Current Run Start Time",
                    "database_engine": "Database Engine",
                    "database_version": "Database Version",
                    "estimated_db_size": "Estimated Database Size (MiB)",
                    "oldest_recorder_run": "Oldest Run Start Time"
                }
            }
        },
        "remember_the_milk": {
            "services": {
                "complete_task": {
                    "description": "Completes a task that was previously created.",
                    "fields": {
                        "id": {
                            "description": "Identifier that was defined when creating the task.",
                            "name": "ID"
                        }
                    },
                    "name": "Complete task"
                },
                "create_task": {
                    "description": "Creates (or update) a new task in your Remember The Milk account. If you want to update a task later on, you have to set an \"id\" when creating the task. Note: Updating a tasks does not support the smart syntax.",
                    "fields": {
                        "id": {
                            "description": "Identifier for the task you're creating, can be used to update or complete the task later on.",
                            "name": "ID"
                        },
                        "name": {
                            "description": "Name of the new task, you can use the smart syntax here.",
                            "name": "Name"
                        }
                    },
                    "name": "Create task"
                }
            }
        },
        "remote": {
            "device_automation": {
                "action_type": {
                    "toggle": "Toggle {entity_name}",
                    "turn_off": "Turn off {entity_name}",
                    "turn_on": "Turn on {entity_name}"
                },
                "condition_type": {
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on"
                },
                "trigger_type": {
                    "changed_states": "{entity_name} turned on or off",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Remote",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "delete_command": {
                    "description": "Deletes a command or a list of commands from the database.",
                    "fields": {
                        "command": {
                            "description": "The single command or the list of commands to be deleted.",
                            "name": "Command"
                        },
                        "device": {
                            "description": "Device from which commands will be deleted.",
                            "name": "Device"
                        }
                    },
                    "name": "Delete command"
                },
                "learn_command": {
                    "description": "Learns a command or a list of commands from a device.",
                    "fields": {
                        "alternative": {
                            "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won't change the state.",
                            "name": "Alternative"
                        },
                        "command": {
                            "description": "A single command or a list of commands to learn.",
                            "name": "Command"
                        },
                        "command_type": {
                            "description": "The type of command to be learned.",
                            "name": "Command type"
                        },
                        "device": {
                            "description": "Device ID to learn command from.",
                            "name": "Device"
                        },
                        "timeout": {
                            "description": "Timeout for the command to be learned.",
                            "name": "Timeout"
                        }
                    },
                    "name": "Learn command"
                },
                "send_command": {
                    "description": "Sends a command or a list of commands to a device.",
                    "fields": {
                        "command": {
                            "description": "A single command or a list of commands to send.",
                            "name": "Command"
                        },
                        "delay_secs": {
                            "description": "The time you want to wait in between repeated commands.",
                            "name": "Delay seconds"
                        },
                        "device": {
                            "description": "Device ID to send command to.",
                            "name": "Device"
                        },
                        "hold_secs": {
                            "description": "The time you want to have it held before the release is send.",
                            "name": "Hold seconds"
                        },
                        "num_repeats": {
                            "description": "The number of times you want to repeat the commands.",
                            "name": "Repeats"
                        }
                    },
                    "name": "Send command"
                },
                "toggle": {
                    "description": "Toggles a device on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns the device off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Sends the power on command.",
                    "fields": {
                        "activity": {
                            "description": "Activity ID or activity name to be started.",
                            "name": "Activity"
                        }
                    },
                    "name": "Turn on"
                }
            },
            "title": "Remote"
        },
        "renault": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "kamereon_no_account": "Unable to find Kamereon account",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_credentials": "Invalid authentication"
                },
                "step": {
                    "kamereon": {
                        "data": {
                            "kamereon_account_id": "Kamereon account id"
                        },
                        "title": "Select Kamereon account id"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please update your password for {username}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "locale": "Locale",
                            "password": "Password",
                            "username": "Email"
                        },
                        "title": "Set Renault credentials"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "charging": {
                        "name": "Charging"
                    },
                    "driver_door_status": {
                        "name": "Driver door"
                    },
                    "hatch_status": {
                        "name": "Hatch"
                    },
                    "hvac_status": {
                        "name": "HVAC"
                    },
                    "lock_status": {
                        "name": "Lock"
                    },
                    "passenger_door_status": {
                        "name": "Passenger door"
                    },
                    "plugged_in": {
                        "name": "Plug"
                    },
                    "rear_left_door_status": {
                        "name": "Rear left door"
                    },
                    "rear_right_door_status": {
                        "name": "Rear right door"
                    }
                },
                "button": {
                    "start_air_conditioner": {
                        "name": "Start air conditioner"
                    },
                    "start_charge": {
                        "name": "Start charge"
                    },
                    "stop_charge": {
                        "name": "Stop charge"
                    }
                },
                "device_tracker": {
                    "location": {
                        "name": "Location"
                    }
                },
                "select": {
                    "charge_mode": {
                        "name": "Charge mode",
                        "state": {
                            "always": "Instant",
                            "always_charging": "Instant",
                            "schedule_mode": "Planner"
                        }
                    }
                },
                "sensor": {
                    "admissible_charging_power": {
                        "name": "Admissible charging power"
                    },
                    "battery_autonomy": {
                        "name": "Battery autonomy"
                    },
                    "battery_available_energy": {
                        "name": "Battery available energy"
                    },
                    "battery_last_activity": {
                        "name": "Last battery activity"
                    },
                    "battery_level": {
                        "name": "Battery level"
                    },
                    "battery_temperature": {
                        "name": "Battery temperature"
                    },
                    "charge_state": {
                        "name": "Charge state",
                        "state": {
                            "charge_ended": "Charge ended",
                            "charge_error": "Not charging or plugged in",
                            "charge_in_progress": "Charging",
                            "energy_flap_opened": "Energy flap opened",
                            "not_in_charge": "Not charging",
                            "unavailable": "Unavailable",
                            "waiting_for_a_planned_charge": "Waiting for planned charge",
                            "waiting_for_current_charge": "Waiting for current charge"
                        }
                    },
                    "charging_power": {
                        "name": "Charging power"
                    },
                    "charging_remaining_time": {
                        "name": "Charging remaining time"
                    },
                    "fuel_autonomy": {
                        "name": "Fuel autonomy"
                    },
                    "fuel_quantity": {
                        "name": "Fuel quantity"
                    },
                    "hvac_last_activity": {
                        "name": "Last HVAC activity"
                    },
                    "hvac_soc_threshold": {
                        "name": "HVAC SoC threshold"
                    },
                    "location_last_activity": {
                        "name": "Last location activity"
                    },
                    "mileage": {
                        "name": "Mileage"
                    },
                    "outside_temperature": {
                        "name": "Outside temperature"
                    },
                    "plug_state": {
                        "name": "Plug state",
                        "state": {
                            "plug_error": "Plug error",
                            "plug_unknown": "Plug unknown",
                            "plugged": "Plugged in",
                            "unplugged": "Unplugged"
                        }
                    },
                    "res_state": {
                        "name": "Remote engine start"
                    },
                    "res_state_code": {
                        "name": "Remote engine start code"
                    }
                }
            },
            "services": {
                "ac_cancel": {
                    "description": "Canceles A\/C on vehicle.",
                    "fields": {
                        "vehicle": {
                            "description": "The vehicle to send the command to.",
                            "name": "Vehicle"
                        }
                    },
                    "name": "Cancel A\/C"
                },
                "ac_start": {
                    "description": "Starts A\/C on vehicle.",
                    "fields": {
                        "temperature": {
                            "description": "Target A\/C temperature in °C.",
                            "name": "Temperature"
                        },
                        "vehicle": {
                            "description": "The vehicle to send the command to.",
                            "name": "Vehicle"
                        },
                        "when": {
                            "description": "Timestamp for the start of the A\/C (optional - defaults to now).",
                            "name": "When"
                        }
                    },
                    "name": "Start A\/C"
                },
                "charge_set_schedules": {
                    "description": "Updates charge schedule on vehicle.",
                    "fields": {
                        "schedules": {
                            "description": "Schedule details.",
                            "name": "Schedules"
                        },
                        "vehicle": {
                            "description": "The vehicle to send the command to.",
                            "name": "Vehicle"
                        }
                    },
                    "name": "Update charge schedule"
                }
            }
        },
        "renson": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "air_quality_control": {
                        "name": "Air quality control"
                    },
                    "breeze": {
                        "name": "Breeze"
                    },
                    "breeze_conditions_met": {
                        "name": "Breeze conditions met"
                    },
                    "co2_control": {
                        "name": "CO2 control"
                    },
                    "frost_protection_active": {
                        "name": "Frost protection active"
                    },
                    "humidity_control": {
                        "name": "Humidity control"
                    },
                    "preheater": {
                        "name": "Preheater"
                    }
                },
                "button": {
                    "sync_time": {
                        "name": "Sync time with device"
                    }
                },
                "number": {
                    "filter_change": {
                        "name": "Filter clean\/replacement"
                    }
                },
                "sensor": {
                    "air_quality": {
                        "name": "Air quality"
                    },
                    "air_quality_category": {
                        "name": "Air quality category",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "poor": "Poor"
                        }
                    },
                    "breeze_level": {
                        "name": "Breeze level",
                        "state": {
                            "breeze": "Breeze",
                            "level1": "Level 1",
                            "level2": "Level 2",
                            "level3": "Level 3",
                            "level4": "Level 4",
                            "off": "Off"
                        }
                    },
                    "breeze_temperature": {
                        "name": "Breeze temperature"
                    },
                    "bypass_activation_temperature": {
                        "name": "Bypass activation temperature"
                    },
                    "bypass_level": {
                        "name": "Bypass level"
                    },
                    "co2_hysteresis": {
                        "name": "CO2 hysteresis"
                    },
                    "co2_quality_category": {
                        "name": "CO2 quality category",
                        "state": {
                            "bad": "Bad",
                            "good": "Good",
                            "poor": "Poor"
                        }
                    },
                    "co2_threshold": {
                        "name": "CO2 threshold"
                    },
                    "day_pollution_level": {
                        "name": "Day pollution level",
                        "state": {
                            "level1": "Level 1",
                            "level2": "Level 2",
                            "level3": "Level 3",
                            "level4": "Level 4"
                        }
                    },
                    "extract_air_temperature": {
                        "name": "Extract air temperature"
                    },
                    "filter_change": {
                        "name": "Filter change"
                    },
                    "manual_level": {
                        "name": "Manual level",
                        "state": {
                            "breeze": "Breeze",
                            "holiday": "Holiday",
                            "level1": "Level 1",
                            "level2": "Level 2",
                            "level3": "Level 3",
                            "level4": "Level 4",
                            "off": "Off"
                        }
                    },
                    "night_pollution_level": {
                        "name": "Night pollution level",
                        "state": {
                            "level1": "Level 1",
                            "level2": "Level 2",
                            "level3": "Level 3",
                            "level4": "Level 4"
                        }
                    },
                    "outdoor_air_temperature": {
                        "name": "Outdoor air temperature"
                    },
                    "start_day_time": {
                        "name": "Start day time"
                    },
                    "start_night_time": {
                        "name": "Start night time"
                    },
                    "total_airflow_in": {
                        "name": "Total airflow in"
                    },
                    "total_airflow_out": {
                        "name": "Total airflow out"
                    },
                    "ventilation_level": {
                        "name": "Ventilation level",
                        "state": {
                            "breeze": "Breeze",
                            "holiday": "Holiday",
                            "level1": "Level 1",
                            "level2": "Level 2",
                            "level3": "Level 3",
                            "level4": "Level 4",
                            "off": "Off"
                        }
                    }
                }
            }
        },
        "reolink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "api_error": "API error occurred",
                    "cannot_connect": "Failed to connect, check the IP address of the camera",
                    "invalid_auth": "Invalid authentication",
                    "not_admin": "User needs to be admin, user ''{username}'' has authorisation level ''{userlevel}''",
                    "unknown": "Unexpected error",
                    "webhook_exception": "Home Assistant URL is not available, go to Settings > System > Network > Home Assistant URL and correct the URLs, see {more_info}"
                },
                "flow_title": "{hostname} ({ip_address})",
                "step": {
                    "reauth_confirm": {
                        "description": "The Reolink integration needs to re-authenticate your connection details",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "use_https": "Enable HTTPS",
                            "username": "Username"
                        },
                        "description": "See the [troubleshooting steps]({troubleshooting_link}) if you encounter problems. {error}"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "face": {
                        "name": "Face"
                    },
                    "face_lens_0": {
                        "name": "Face lens 0"
                    },
                    "face_lens_1": {
                        "name": "Face lens 1"
                    },
                    "motion_lens_0": {
                        "name": "Motion lens 0"
                    },
                    "motion_lens_1": {
                        "name": "Motion lens 1"
                    },
                    "person": {
                        "name": "Person"
                    },
                    "person_lens_0": {
                        "name": "Person lens 0"
                    },
                    "person_lens_1": {
                        "name": "Person lens 1"
                    },
                    "pet": {
                        "name": "Pet"
                    },
                    "pet_lens_0": {
                        "name": "Pet lens 0"
                    },
                    "pet_lens_1": {
                        "name": "Pet lens 1"
                    },
                    "vehicle": {
                        "name": "Vehicle"
                    },
                    "vehicle_lens_0": {
                        "name": "Vehicle lens 0"
                    },
                    "vehicle_lens_1": {
                        "name": "Vehicle lens 1"
                    },
                    "visitor": {
                        "name": "Visitor"
                    },
                    "visitor_lens_0": {
                        "name": "Visitor lens 0"
                    },
                    "visitor_lens_1": {
                        "name": "Visitor lens 1"
                    }
                },
                "button": {
                    "guard_go_to": {
                        "name": "Guard go to"
                    },
                    "guard_set": {
                        "name": "Guard set current position"
                    },
                    "ptz_calibrate": {
                        "name": "PTZ calibrate"
                    },
                    "ptz_down": {
                        "name": "PTZ down"
                    },
                    "ptz_left": {
                        "name": "PTZ left"
                    },
                    "ptz_right": {
                        "name": "PTZ right"
                    },
                    "ptz_stop": {
                        "name": "PTZ stop"
                    },
                    "ptz_up": {
                        "name": "PTZ up"
                    },
                    "ptz_zoom_in": {
                        "name": "PTZ zoom in"
                    },
                    "ptz_zoom_out": {
                        "name": "PTZ zoom out"
                    }
                },
                "light": {
                    "floodlight": {
                        "name": "Floodlight"
                    },
                    "ir_lights": {
                        "name": "Infra red lights in night mode"
                    },
                    "status_led": {
                        "name": "Status LED"
                    }
                },
                "number": {
                    "ai_face_delay": {
                        "name": "AI face delay"
                    },
                    "ai_face_sensititvity": {
                        "name": "AI face sensitivity"
                    },
                    "ai_person_delay": {
                        "name": "AI person delay"
                    },
                    "ai_person_sensititvity": {
                        "name": "AI person sensitivity"
                    },
                    "ai_pet_delay": {
                        "name": "AI pet delay"
                    },
                    "ai_pet_sensititvity": {
                        "name": "AI pet sensitivity"
                    },
                    "ai_vehicle_delay": {
                        "name": "AI vehicle delay"
                    },
                    "ai_vehicle_sensititvity": {
                        "name": "AI vehicle sensitivity"
                    },
                    "auto_quick_reply_time": {
                        "name": "Auto quick reply time"
                    },
                    "auto_track_disappear_time": {
                        "name": "Auto track disappear time"
                    },
                    "auto_track_limit_left": {
                        "name": "Auto track limit left"
                    },
                    "auto_track_limit_right": {
                        "name": "Auto track limit right"
                    },
                    "auto_track_stop_time": {
                        "name": "Auto track stop time"
                    },
                    "floodlight_brightness": {
                        "name": "Floodlight turn on brightness"
                    },
                    "focus": {
                        "name": "Focus"
                    },
                    "guard_return_time": {
                        "name": "Guard return time"
                    },
                    "motion_sensitivity": {
                        "name": "Motion sensitivity"
                    },
                    "volume": {
                        "name": "Volume"
                    },
                    "zoom": {
                        "name": "Zoom"
                    }
                },
                "select": {
                    "auto_quick_reply_message": {
                        "name": "Auto quick reply message",
                        "state": {
                            "off": "Off"
                        }
                    },
                    "auto_track_method": {
                        "name": "Auto track method",
                        "state": {
                            "digital": "Digital",
                            "digitalfirst": "Digital first",
                            "pantiltfirst": "Pan\/tilt first"
                        }
                    },
                    "day_night_mode": {
                        "name": "Day night mode",
                        "state": {
                            "auto": "Auto",
                            "blackwhite": "Black&White",
                            "color": "Color"
                        }
                    },
                    "floodlight_mode": {
                        "name": "Floodlight mode",
                        "state": {
                            "adaptive": "Adaptive",
                            "auto": "Auto",
                            "autoadaptive": "Auto adaptive",
                            "off": "Off",
                            "onatnight": "On at night",
                            "schedule": "Schedule"
                        }
                    },
                    "ptz_preset": {
                        "name": "PTZ preset"
                    },
                    "status_led": {
                        "name": "Status LED",
                        "state": {
                            "alwaysonatnight": "Auto & always on at night",
                            "auto": "Auto",
                            "stayoff": "Stay off"
                        }
                    }
                },
                "sensor": {
                    "event_connection": {
                        "name": "Event connection",
                        "state": {
                            "fast_poll": "Fast poll",
                            "onvif_long_poll": "ONVIF long poll",
                            "onvif_push": "ONVIF push"
                        }
                    },
                    "ptz_pan_position": {
                        "name": "PTZ pan position"
                    },
                    "wifi_signal": {
                        "name": "Wi-Fi signal"
                    }
                },
                "siren": {
                    "siren": {
                        "name": "Siren"
                    }
                },
                "switch": {
                    "auto_focus": {
                        "name": "Auto focus"
                    },
                    "auto_tracking": {
                        "name": "Auto tracking"
                    },
                    "buzzer": {
                        "name": "Buzzer on event"
                    },
                    "doorbell_button_sound": {
                        "name": "Doorbell button sound"
                    },
                    "email": {
                        "name": "Email on event"
                    },
                    "ftp_upload": {
                        "name": "FTP upload"
                    },
                    "gaurd_return": {
                        "name": "Guard return"
                    },
                    "push_notifications": {
                        "name": "Push notifications"
                    },
                    "record": {
                        "name": "Record"
                    },
                    "record_audio": {
                        "name": "Record audio"
                    },
                    "siren_on_event": {
                        "name": "Siren on event"
                    }
                }
            },
            "issues": {
                "enable_port": {
                    "description": "Failed to automatically enable {ports}port(s) on {name}. Use the [Reolink client]({info_link}) to manually set it to ON",
                    "title": "Reolink port not enabled"
                },
                "firmware_update": {
                    "description": "\"{name}\" with model \"{model}\" and hardware version \"{hw_version}\" is running a old firmware version \"{current_firmware}\", while at least firmware version \"{required_firmware}\" is required for proper operation of the Reolink integration. The latest firmware can be downloaded from the [Reolink download center]({download_link}).",
                    "title": "Reolink firmware update required"
                },
                "https_webhook": {
                    "description": "Reolink products can not push motion events to an HTTPS address (SSL), please configure a (local) HTTP address under \"Home Assistant URL\" in the [network settings]({network_link}). The current (local) address is: `{base_url}`, a valid address could, for example, be `http:\/\/192.168.1.10:8123` where `192.168.1.10` is the IP of the Home Assistant device",
                    "title": "Reolink webhook URL uses HTTPS (SSL)"
                },
                "ssl": {
                    "description": "Global SSL certificate configured in the [configuration.yaml under http]({ssl_link}) while a local HTTP address `{base_url}` is configured under \"Home Assistant URL\" in the [network settings]({network_link}). Therefore, the Reolink device can not reach Home Assistant to push its motion\/AI events. Please make sure the local HTTP address is not covered by the SSL certificate, by for instance using [NGINX add-on]({nginx_link}) instead of a globally enforced SSL certificate.",
                    "title": "Reolink incompatible with global SSL certificate"
                },
                "webhook_url": {
                    "description": "Did not receive initial ONVIF state from {name}. Most likely, the Reolink camera can not reach the current (local) Home Assistant URL `{base_url}`, please configure a (local) HTTP address under \"Home Assistant URL\" in the [network settings]({network_link}) that points to Home Assistant. For example `http:\/\/192.168.1.10:8123` where `192.168.1.10` is the IP of the Home Assistant device. Also, make sure the Reolink camera can reach that URL. Using fast motion\/AI state polling until the first ONVIF push is received.",
                    "title": "Reolink webhook URL unreachable"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "protocol": "Protocol"
                        }
                    }
                }
            }
        },
        "rest": {
            "services": {
                "reload": {
                    "description": "Reloads REST entities from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "rflink": {
            "services": {
                "send_command": {
                    "description": "Sends device command through RFLink.",
                    "fields": {
                        "command": {
                            "description": "The command to be sent.",
                            "name": "Command"
                        },
                        "device_id": {
                            "description": "RFLink device ID.",
                            "name": "Device ID"
                        }
                    },
                    "name": "Send command"
                }
            }
        },
        "rfxtrx": {
            "config": {
                "abort": {
                    "already_configured": "Already configured. Only a single configuration possible.",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "setup_network": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "title": "Select connection address"
                    },
                    "setup_serial": {
                        "data": {
                            "device": "Select device"
                        },
                        "title": "Device"
                    },
                    "setup_serial_manual_path": {
                        "data": {
                            "device": "USB Device Path"
                        },
                        "title": "Path"
                    },
                    "user": {
                        "data": {
                            "type": "Connection type"
                        },
                        "title": "Select connection type"
                    }
                }
            },
            "device_automation": {
                "action_type": {
                    "send_command": "Send command: {subtype}",
                    "send_status": "Send status update: {subtype}"
                },
                "trigger_type": {
                    "command": "Received command: {subtype}",
                    "status": "Received status: {subtype}"
                }
            },
            "entity": {
                "sensor": {
                    "chill": {
                        "name": "Chill"
                    },
                    "count": {
                        "name": "Count"
                    },
                    "counter_value": {
                        "name": "Counter value"
                    },
                    "current_ch_1": {
                        "name": "Current Ch. 1"
                    },
                    "current_ch_2": {
                        "name": "Current Ch. 2"
                    },
                    "current_ch_3": {
                        "name": "Current Ch. 3"
                    },
                    "forecast": {
                        "name": "Forecast"
                    },
                    "forecast_status": {
                        "name": "Forecast status"
                    },
                    "humidity_status": {
                        "name": "Humidity status"
                    },
                    "instantaneous_power": {
                        "name": "Instantaneous power"
                    },
                    "sensor_status": {
                        "name": "Sensor status"
                    },
                    "sound": {
                        "name": "Sound"
                    },
                    "temperature_2": {
                        "name": "Temperature 2"
                    },
                    "total_energy_usage": {
                        "name": "Total energy usage"
                    },
                    "uv_index": {
                        "name": "UV index"
                    },
                    "wind_average_speed": {
                        "name": "Wind average speed"
                    },
                    "wind_direction": {
                        "name": "Wind direction"
                    },
                    "wind_gust": {
                        "name": "Wind gust"
                    }
                }
            },
            "options": {
                "error": {
                    "already_configured_device": "Device is already configured",
                    "invalid_event_code": "Invalid event code",
                    "invalid_input_2262_off": "Invalid input for command off",
                    "invalid_input_2262_on": "Invalid input for command on",
                    "invalid_input_off_delay": "Invalid input for off delay",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "prompt_options": {
                        "data": {
                            "automatic_add": "Enable automatic add",
                            "debug": "Enable debugging",
                            "device": "Select device to configure",
                            "event_code": "Enter event code to add",
                            "protocols": "Protocols"
                        },
                        "title": "Rfxtrx Options"
                    },
                    "set_device_options": {
                        "data": {
                            "command_off": "Data bits value for command off",
                            "command_on": "Data bits value for command on",
                            "data_bit": "Number of data bits",
                            "off_delay": "Off delay",
                            "off_delay_enabled": "Enable off delay",
                            "replace_device": "Select device to replace",
                            "venetian_blind_mode": "Venetian blind mode"
                        },
                        "title": "Configure device options"
                    }
                }
            },
            "services": {
                "send": {
                    "description": "Sends a raw event on radio.",
                    "fields": {
                        "event": {
                            "description": "A hexadecimal string to send.",
                            "name": "Event"
                        }
                    },
                    "name": "Send"
                }
            }
        },
        "rhasspy": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to enable Rhasspy support?"
                    }
                }
            }
        },
        "ridwell": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please re-enter the password for {username}:",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Input your username and password:"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "next_pickup": {
                        "name": "Next pickup"
                    }
                },
                "switch": {
                    "opt_in": {
                        "name": "Opt-in to next pickup"
                    }
                }
            }
        },
        "ring": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "2fa": {
                        "data": {
                            "2fa": "Two-factor code"
                        },
                        "title": "Two-factor authentication"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Sign-in with Ring account"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "ding": {
                        "name": "Ding"
                    }
                },
                "light": {
                    "light": {
                        "name": "Light"
                    }
                },
                "sensor": {
                    "last_activity": {
                        "name": "Last activity"
                    },
                    "last_ding": {
                        "name": "Last ding"
                    },
                    "last_motion": {
                        "name": "Last motion"
                    },
                    "volume": {
                        "name": "Volume"
                    },
                    "wifi_signal_category": {
                        "name": "Wi-Fi signal category"
                    },
                    "wifi_signal_strength": {
                        "name": "Wi-Fi signal strength"
                    }
                },
                "siren": {
                    "siren": {
                        "name": "Siren"
                    }
                },
                "switch": {
                    "siren": {
                        "name": "Siren"
                    }
                }
            },
            "services": {
                "update": {
                    "description": "Updates the data we have for all your ring devices.",
                    "name": "Update"
                }
            }
        },
        "risco": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "cloud": {
                        "data": {
                            "password": "Password",
                            "pin": "PIN Code",
                            "username": "Username"
                        }
                    },
                    "local": {
                        "data": {
                            "host": "Host",
                            "pin": "PIN Code",
                            "port": "Port"
                        }
                    },
                    "user": {
                        "menu_options": {
                            "cloud": "Risco Cloud (recommended)",
                            "local": "Local Risco Panel (advanced)"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "alarmed": {
                        "name": "Alarmed"
                    },
                    "armed": {
                        "name": "Armed"
                    }
                },
                "switch": {
                    "bypassed": {
                        "name": "Bypassed"
                    }
                }
            },
            "options": {
                "step": {
                    "ha_to_risco": {
                        "data": {
                            "armed_away": "Armed Away",
                            "armed_custom_bypass": "Armed Custom Bypass",
                            "armed_home": "Armed Home",
                            "armed_night": "Armed Night"
                        },
                        "description": "Select what state to set your Risco alarm to when arming the Home Assistant alarm",
                        "title": "Map Home Assistant states to Risco states"
                    },
                    "init": {
                        "data": {
                            "code_arm_required": "Require PIN to arm",
                            "code_disarm_required": "Require PIN to disarm",
                            "scan_interval": "How often to poll Risco (in seconds)"
                        },
                        "title": "Configure options"
                    },
                    "risco_to_ha": {
                        "data": {
                            "A": "Group A",
                            "B": "Group B",
                            "C": "Group C",
                            "D": "Group D",
                            "arm": "Armed (AWAY)",
                            "partial_arm": "Partially Armed (STAY)"
                        },
                        "description": "Select what state your Home Assistant alarm will report for every state reported by Risco",
                        "title": "Map Risco states to Home Assistant states"
                    }
                }
            }
        },
        "rituals_perfume_genie": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        },
                        "title": "Connect to your Rituals account"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "charging": {
                        "name": "Charging"
                    }
                },
                "number": {
                    "perfume_amount": {
                        "name": "Perfume amount"
                    }
                },
                "select": {
                    "room_size_square_meter": {
                        "name": "Room size"
                    }
                },
                "sensor": {
                    "battery_percentage": {
                        "name": "Battery"
                    },
                    "fill": {
                        "name": "Fill"
                    },
                    "perfume": {
                        "name": "Perfume"
                    },
                    "wifi_percentage": {
                        "name": "Wi-Fi signal"
                    }
                }
            }
        },
        "roborock": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_code": "The code you entered was incorrect, please check it and try again.",
                    "invalid_email": "There is no account associated with the email you entered, please try again.",
                    "invalid_email_format": "There is an issue with the formatting of your email - please try again.",
                    "unknown": "Unexpected error",
                    "unknown_roborock": "There was an unknown roborock exception - please check your logs.",
                    "unknown_url": "There was an issue determining the correct url for your roborock account - please check your logs."
                },
                "step": {
                    "code": {
                        "data": {
                            "code": "Verification code"
                        },
                        "description": "Type the verification code sent to your email"
                    },
                    "user": {
                        "data": {
                            "username": "Email"
                        },
                        "description": "Enter your Roborock email address."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "mop_attached": {
                        "name": "Mop attached"
                    },
                    "mop_drying_status": {
                        "name": "Mop drying"
                    },
                    "water_box_attached": {
                        "name": "Water box attached"
                    },
                    "water_shortage": {
                        "name": "Water shortage"
                    }
                },
                "number": {
                    "volume": {
                        "name": "Volume"
                    }
                },
                "select": {
                    "mop_intensity": {
                        "name": "Mop intensity",
                        "state": {
                            "custom": "Custom",
                            "custom_water_flow": "Custom water flow",
                            "high": "High",
                            "intense": "Intense",
                            "low": "Low",
                            "medium": "Medium",
                            "mild": "Mild",
                            "moderate": "Moderate",
                            "off": "Off"
                        }
                    },
                    "mop_mode": {
                        "name": "Mop mode",
                        "state": {
                            "custom": "Custom",
                            "deep": "Deep",
                            "deep_plus": "Deep+",
                            "fast": "Fast",
                            "standard": "Standard"
                        }
                    }
                },
                "sensor": {
                    "clean_percent": {
                        "name": "Cleaning progress"
                    },
                    "cleaning_area": {
                        "name": "Cleaning area"
                    },
                    "cleaning_time": {
                        "name": "Cleaning time"
                    },
                    "dock_error": {
                        "name": "Dock error",
                        "state": {
                            "dirty_tank_latch_open": "Dirty tank latch open",
                            "duct_blockage": "Duct blockage",
                            "no_dustbin": "No dustbin",
                            "ok": "Ok",
                            "waste_water_tank_full": "Waste water tank full",
                            "water_empty": "Water empty"
                        }
                    },
                    "filter_time_left": {
                        "name": "Filter time left"
                    },
                    "last_clean_end": {
                        "name": "Last clean end"
                    },
                    "last_clean_start": {
                        "name": "Last clean begin"
                    },
                    "main_brush_time_left": {
                        "name": "Main brush time left"
                    },
                    "mop_drying_remaining_time": {
                        "name": "Mop drying remaining time"
                    },
                    "sensor_time_left": {
                        "name": "Sensor time left"
                    },
                    "side_brush_time_left": {
                        "name": "Side brush time left"
                    },
                    "status": {
                        "name": "Status",
                        "state": {
                            "charger_disconnected": "Charger disconnected",
                            "charging": "Charging",
                            "charging_complete": "Charging complete",
                            "charging_problem": "Charging problem",
                            "cleaning": "Cleaning",
                            "device_offline": "Device offline",
                            "docking": "Docking",
                            "emptying_the_bin": "Emptying the bin",
                            "error": "Error",
                            "going_to_target": "Going to target",
                            "going_to_wash_the_mop": "Going to wash the mop",
                            "idle": "Idle",
                            "manual_mode": "Manual mode",
                            "paused": "Paused",
                            "remote_control_active": "Remote control active",
                            "returning_home": "Returning home",
                            "segment_cleaning": "Segment cleaning",
                            "shutting_down": "Shutting down",
                            "spot_cleaning": "Spot cleaning",
                            "starting": "Starting",
                            "updating": "Updating",
                            "washing_the_mop": "Washing the mop",
                            "zoned_cleaning": "Zoned cleaning"
                        }
                    },
                    "total_cleaning_area": {
                        "name": "Total cleaning area"
                    },
                    "total_cleaning_time": {
                        "name": "Total cleaning time"
                    },
                    "vacuum_error": {
                        "name": "Vacuum error",
                        "state": {
                            "battery_error": "Battery error",
                            "bumper_stuck": "Bumper stuck",
                            "cannot_cross_carpet": "Cannot cross carpet",
                            "charging_error": "Charging error",
                            "cliff_sensor_error": "Cliff sensor error",
                            "dock_locator_error": "Dock locator error",
                            "fan_error": "Fan error",
                            "filter_blocked": "Filter blocked",
                            "internal_error": "Internal error",
                            "invisible_wall_detected": "Invisible wall detected",
                            "lidar_blocked": "Lidar blocked",
                            "low_battery": "Low battery",
                            "main_brush_jammed": "Main brush jammed",
                            "no_dustbin": "No dustbin",
                            "nogo_zone_detected": "No-go zone detected",
                            "none": "None",
                            "return_to_dock_fail": "Return to dock fail",
                            "robot_on_carpet": "Robot on carpet",
                            "robot_tilted": "Robot tilted",
                            "robot_trapped": "Robot trapped",
                            "side_brush_error": "Side brush error",
                            "side_brush_jammed": "Side brush jammed",
                            "vertical_bumper_pressed": "Vertical bumper pressed",
                            "vibrarise_jammed": "VibraRise jammed",
                            "wall_sensor_dirty": "Wall sensor dirty",
                            "wheels_jammed": "Wheels jammed",
                            "wheels_suspended": "Wheels suspended"
                        }
                    }
                },
                "switch": {
                    "child_lock": {
                        "name": "Child lock"
                    },
                    "dnd_switch": {
                        "name": "Do not disturb"
                    },
                    "off_peak_switch": {
                        "name": "Off-peak charging"
                    },
                    "status_indicator": {
                        "name": "Status indicator light"
                    }
                },
                "time": {
                    "dnd_end_time": {
                        "name": "Do not disturb end"
                    },
                    "dnd_start_time": {
                        "name": "Do not disturb begin"
                    },
                    "off_peak_end": {
                        "name": "Off-peak end"
                    },
                    "off_peak_end_time": {
                        "name": "Off-peak end"
                    },
                    "off_peak_start": {
                        "name": "Off-peak start"
                    },
                    "off_peak_start_time": {
                        "name": "Off-peak start"
                    }
                },
                "vacuum": {
                    "roborock": {
                        "state_attributes": {
                            "fan_speed": {
                                "state": {
                                    "auto": "Auto",
                                    "balanced": "Balanced",
                                    "custom": "Custom",
                                    "gentle": "Gentle",
                                    "max": "Max",
                                    "max_plus": "Max plus",
                                    "medium": "Medium",
                                    "off": "Off",
                                    "quiet": "Quiet",
                                    "silent": "Silent",
                                    "standard": "Standard",
                                    "turbo": "Turbo"
                                }
                            }
                        }
                    }
                }
            },
            "issues": {
                "service_deprecation_start_pause": {
                    "description": "Roborock vacuum support for the vacuum.start_pause service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call vacuum.pause or vacuum.start and select submit below to mark this issue as resolved.",
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Roborock vacuum support for the vacuum.start_pause service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call vacuum.pause or vacuum.start and select submit below to mark this issue as resolved.",
                                "title": "Roborock vacuum support for vacuum.start_pause is being removed"
                            }
                        }
                    },
                    "title": "Roborock vacuum support for vacuum.start_pause is being removed"
                }
            }
        },
        "roku": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Enter your Roku information."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "headphones_connected": {
                        "name": "Headphones connected"
                    },
                    "supports_airplay": {
                        "name": "Supports AirPlay"
                    },
                    "supports_ethernet": {
                        "name": "Supports ethernet"
                    },
                    "supports_find_remote": {
                        "name": "Supports find remote"
                    }
                },
                "select": {
                    "application": {
                        "name": "Application"
                    },
                    "channel": {
                        "name": "Channel"
                    }
                },
                "sensor": {
                    "active_app": {
                        "name": "Active app"
                    },
                    "active_app_id": {
                        "name": "Active app ID"
                    }
                }
            },
            "services": {
                "search": {
                    "description": "Emulates opening the search screen and entering the search keyword.",
                    "fields": {
                        "keyword": {
                            "description": "The keyword to search for.",
                            "name": "Keyword"
                        }
                    },
                    "name": "Search"
                }
            }
        },
        "roomba": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "not_irobot_device": "Discovered device is not an iRobot device",
                    "short_blid": "The BLID was truncated"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "link": {
                        "description": "Make sure that the iRobot app is not running on any device. Press and hold the Home button (or both Home and Spot buttons) on {name} until the device generates a sound (about two seconds), then submit within 30 seconds.",
                        "title": "Retrieve Password"
                    },
                    "link_manual": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password could not be retrieved from the device automatically. Please make sure that the iRobot app is not open on any device while trying to retrieve the password. Please follow the steps outlined in the documentation at: {auth_help_url}",
                        "title": "Enter Password"
                    },
                    "manual": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "No Roomba or Braava have been discovered on your network.",
                        "title": "Manually connect to the device"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Select a Roomba or Braava.",
                        "title": "Automatically connect to the device"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "bin_full": {
                        "name": "Bin full"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "continuous": "Continuous",
                            "delay": "Delay"
                        }
                    }
                }
            }
        },
        "roon": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "fallback": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Could not discover Roon server, please enter your Hostname and Port."
                    },
                    "link": {
                        "description": "You must authorize Home Assistant in Roon. After you click submit, go to the Roon Core application, open Settings and enable HomeAssistant on the Extensions tab.",
                        "title": "Authorize HomeAssistant in Roon"
                    }
                }
            },
            "services": {
                "transfer": {
                    "description": "Transfers playback from one player to another.",
                    "fields": {
                        "transfer_id": {
                            "description": "ID of the destination player.",
                            "name": "Transfer ID"
                        }
                    },
                    "name": "Transfer"
                }
            }
        },
        "route53": {
            "services": {
                "update_records": {
                    "description": "Triggers update of records.",
                    "name": "Update records"
                }
            }
        },
        "rpi_power": {
            "config": {
                "abort": {
                    "no_devices_found": "Can't find the system class needed for this component, make sure that your kernel is recent and the hardware is supported",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "title": "Raspberry Pi Power Supply Checker"
        },
        "rtsp_to_webrtc": {
            "config": {
                "abort": {
                    "server_failure": "RTSPtoWebRTC server returned an error. Check logs for more information.",
                    "server_unreachable": "Unable to communicate with RTSPtoWebRTC server. Check logs for more information.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_url": "Must be a valid RTSPtoWebRTC server URL e.g. https:\/\/example.com",
                    "server_failure": "RTSPtoWebRTC server returned an error. Check logs for more information.",
                    "server_unreachable": "Unable to communicate with RTSPtoWebRTC server. Check logs for more information."
                },
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to configure Home Assistant to connect to the RTSPtoWebRTC server provided by the add-on: {addon}?",
                        "title": "RTSPtoWebRTC via Home Assistant add-on"
                    },
                    "user": {
                        "data": {
                            "server_url": "RTSPtoWebRTC server URL e.g. https:\/\/example.com"
                        },
                        "description": "The RTSPtoWebRTC integration requires a server to translate RTSP streams into WebRTC. Enter the URL to the RTSPtoWebRTC server.",
                        "title": "Configure RTSPtoWebRTC"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "stun_server": "Stun server address (host:port)"
                        }
                    }
                }
            }
        },
        "ruckus_unleashed": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_host": "Invalid hostname or IP address",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "ruuvi_gateway": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host (IP address or DNS name)",
                            "token": "Bearer token (configured during gateway setup)"
                        }
                    }
                }
            }
        },
        "rympro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "total_consumption": {
                        "name": "Total consumption"
                    }
                }
            }
        },
        "sabnzbd": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "name": "Name",
                            "url": "URL"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "daily_total": {
                        "name": "Daily total"
                    },
                    "free_disk_space": {
                        "name": "Free disk space"
                    },
                    "left": {
                        "name": "Left to download"
                    },
                    "monthly_total": {
                        "name": "Monthly total"
                    },
                    "overall_total": {
                        "name": "Overall total"
                    },
                    "queue": {
                        "name": "Queue"
                    },
                    "queue_count": {
                        "name": "Queue count"
                    },
                    "speed": {
                        "name": "Speed"
                    },
                    "status": {
                        "name": "Status"
                    },
                    "total_disk_space": {
                        "name": "Total disk space"
                    },
                    "weekly_total": {
                        "name": "Weekly total"
                    }
                }
            },
            "services": {
                "pause": {
                    "description": "Pauses downloads.",
                    "fields": {
                        "api_key": {
                            "description": "The SABnzbd API key to pause downloads.",
                            "name": "SABnzbd API key"
                        }
                    },
                    "name": "Pause"
                },
                "resume": {
                    "description": "Resumes downloads.",
                    "fields": {
                        "api_key": {
                            "description": "The SABnzbd API key to resume downloads.",
                            "name": "SABnzbd API key"
                        }
                    },
                    "name": "Resume"
                },
                "set_speed": {
                    "description": "Sets the download speed limit.",
                    "fields": {
                        "api_key": {
                            "description": "The SABnzbd API key to set speed limit.",
                            "name": "SABnzbd API key"
                        },
                        "speed": {
                            "description": "Speed limit. If specified as a number with no units, will be interpreted as a percent. If units are provided (e.g., 500K) will be interpreted absolutely.",
                            "name": "Speed"
                        }
                    },
                    "name": "Set speed"
                }
            }
        },
        "samsungtv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "auth_missing": "Home Assistant is not authorized to connect to this Samsung TV. Check your TV's External Device Manager settings to authorize Home Assistant.",
                    "cannot_connect": "Failed to connect",
                    "id_missing": "This Samsung device doesn't have a SerialNumber.",
                    "not_supported": "This Samsung device is currently not supported.",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "auth_missing": "Home Assistant is not authorized to connect to this Samsung TV. Check your TV's External Device Manager settings to authorize Home Assistant.",
                    "invalid_pin": "PIN is invalid, please try again."
                },
                "flow_title": "{device}",
                "step": {
                    "confirm": {
                        "description": "Do you want to set up {device}? If you never connected Home Assistant before you should see a popup on your TV asking for authorization."
                    },
                    "encrypted_pairing": {
                        "description": "Please enter the PIN displayed on {device}."
                    },
                    "pairing": {
                        "description": "Do you want to set up {device}? If you never connected Home Assistant before you should see a popup on your TV asking for authorization."
                    },
                    "reauth_confirm": {
                        "description": "After submitting, accept the popup on {device} requesting authorization within 30 seconds or input PIN."
                    },
                    "reauth_confirm_encrypted": {
                        "description": "Please enter the PIN displayed on {device}."
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        },
                        "description": "Enter your Samsung TV information. If you never connected Home Assistant before you should see a popup on your TV asking for authorization."
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "samsungtv.turn_on": "Device is requested to turn on"
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring SamsungTV using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the SamsungTV YAML configuration from your `configuration.yaml` file and restart Home Assistant to fix this issue.\n\nPlease note that previously configured `turn_on_action` needs to be manually converted to use the `turn_on` trigger ([documentation]({on_action_url})).",
                    "title": "The SamsungTV YAML configuration is being removed"
                }
            }
        },
        "scene": {
            "services": {
                "apply": {
                    "description": "Activates a scene with configuration.",
                    "fields": {
                        "entities": {
                            "description": "List of entities and their target state.",
                            "name": "Entities state"
                        },
                        "transition": {
                            "description": "Time it takes the devices to transition into the states defined in the scene.",
                            "name": "Transition"
                        }
                    },
                    "name": "Apply"
                },
                "create": {
                    "description": "Creates a new scene.",
                    "fields": {
                        "entities": {
                            "description": "List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead.",
                            "name": "Entities state"
                        },
                        "scene_id": {
                            "description": "The entity ID of the new scene.",
                            "name": "Scene entity ID"
                        },
                        "snapshot_entities": {
                            "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`.",
                            "name": "Snapshot entities"
                        }
                    },
                    "name": "Create"
                },
                "reload": {
                    "description": "Reloads the scenes from the YAML-configuration.",
                    "name": "Reload"
                },
                "turn_on": {
                    "description": "Activates a scene.",
                    "fields": {
                        "transition": {
                            "description": "Time it takes the devices to transition into the states defined in the scene.",
                            "name": "Transition"
                        }
                    },
                    "name": "Activate"
                }
            },
            "title": "Scene"
        },
        "schedule": {
            "entity_component": {
                "_": {
                    "name": "Schedule",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "next_event": {
                            "name": "Next event"
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads schedules from the YAML-configuration.",
                    "name": "Reload"
                }
            },
            "title": "Schedule"
        },
        "schlage": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "keypad_disabled": {
                        "name": "Keypad disabled"
                    }
                },
                "switch": {
                    "beeper": {
                        "name": "Keypress Beep"
                    },
                    "lock_and_leave": {
                        "name": "1-Touch Locking"
                    }
                }
            }
        },
        "scrape": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "resource_error": "Could not update rest data. Verify your configuration"
                },
                "step": {
                    "sensor": {
                        "data": {
                            "attribute": "Attribute",
                            "device_class": "Device Class",
                            "index": "Index",
                            "name": "Name",
                            "select": "Select",
                            "state_class": "State Class",
                            "unit_of_measurement": "Unit of Measurement",
                            "value_template": "Value Template"
                        },
                        "data_description": {
                            "attribute": "Get value of an attribute on the selected tag",
                            "device_class": "The type\/class of the sensor to set the icon in the frontend",
                            "index": "Defines which of the elements returned by the CSS selector to use",
                            "select": "Defines what tag to search for. Check Beautifulsoup CSS selectors for details",
                            "state_class": "The state_class of the sensor",
                            "unit_of_measurement": "Choose temperature measurement or create your own",
                            "value_template": "Defines a template to get the state of the sensor"
                        }
                    },
                    "user": {
                        "data": {
                            "authentication": "Select authentication method",
                            "encoding": "Character encoding",
                            "headers": "Headers",
                            "method": "Method",
                            "password": "Password",
                            "payload": "Payload",
                            "resource": "Resource",
                            "timeout": "Timeout",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "data_description": {
                            "authentication": "Type of the HTTP authentication. Either basic or digest",
                            "encoding": "Character encoding to use. Defaults to UTF-8",
                            "headers": "Headers to use for the web request",
                            "payload": "Payload to use when method is POST",
                            "resource": "The URL to the website that contains the value",
                            "timeout": "Timeout for connection to website",
                            "verify_ssl": "Enables\/disables verification of SSL\/TLS certificate, for example if it is self-signed"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "add_sensor": {
                        "data": {
                            "attribute": "Attribute",
                            "device_class": "Device Class",
                            "index": "Index",
                            "name": "Name",
                            "select": "Select",
                            "state_class": "State Class",
                            "unit_of_measurement": "Unit of Measurement",
                            "value_template": "Value Template"
                        },
                        "data_description": {
                            "attribute": "Get value of an attribute on the selected tag",
                            "device_class": "The type\/class of the sensor to set the icon in the frontend",
                            "index": "Defines which of the elements returned by the CSS selector to use",
                            "select": "Defines what tag to search for. Check Beautifulsoup CSS selectors for details",
                            "state_class": "The state_class of the sensor",
                            "unit_of_measurement": "Choose temperature measurement or create your own",
                            "value_template": "Defines a template to get the state of the sensor"
                        }
                    },
                    "edit_sensor": {
                        "data": {
                            "attribute": "Attribute",
                            "device_class": "Device Class",
                            "index": "Index",
                            "name": "Name",
                            "select": "Select",
                            "state_class": "State Class",
                            "unit_of_measurement": "Unit of Measurement",
                            "value_template": "Value Template"
                        },
                        "data_description": {
                            "attribute": "Get value of an attribute on the selected tag",
                            "device_class": "The type\/class of the sensor to set the icon in the frontend",
                            "index": "Defines which of the elements returned by the CSS selector to use",
                            "select": "Defines what tag to search for. Check Beautifulsoup CSS selectors for details",
                            "state_class": "The state_class of the sensor",
                            "unit_of_measurement": "Choose temperature measurement or create your own",
                            "value_template": "Defines a template to get the state of the sensor"
                        }
                    },
                    "init": {
                        "menu_options": {
                            "add_sensor": "Add sensor",
                            "remove_sensor": "Remove sensor",
                            "resource": "Configure resource",
                            "select_edit_sensor": "Configure sensor"
                        }
                    },
                    "resource": {
                        "data": {
                            "authentication": "Select authentication method",
                            "encoding": "Character encoding",
                            "headers": "Headers",
                            "method": "Method",
                            "password": "Password",
                            "payload": "Payload",
                            "resource": "Resource",
                            "timeout": "Timeout",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "data_description": {
                            "authentication": "Type of the HTTP authentication. Either basic or digest",
                            "encoding": "Character encoding to use. Defaults to UTF-8",
                            "headers": "Headers to use for the web request",
                            "payload": "Payload to use when method is POST",
                            "resource": "The URL to the website that contains the value",
                            "timeout": "Timeout for connection to website",
                            "verify_ssl": "Enables\/disables verification of SSL\/TLS certificate, for example if it is self-signed"
                        }
                    }
                }
            },
            "selector": {
                "device_class": {
                    "options": {
                        "apparent_power": "Apparent power",
                        "aqi": "Air quality index",
                        "atmospheric_pressure": "Atmospheric pressure",
                        "battery": "Battery",
                        "carbon_dioxide": "Carbon dioxide",
                        "carbon_monoxide": "Carbon monoxide",
                        "current": "Current",
                        "data_rate": "Data rate",
                        "data_size": "Data size",
                        "date": "Date",
                        "distance": "Distance",
                        "duration": "Duration",
                        "energy": "Energy",
                        "energy_storage": "Stored energy",
                        "frequency": "Frequency",
                        "gas": "Gas",
                        "humidity": "Humidity",
                        "illuminance": "Illuminance",
                        "irradiance": "Irradiance",
                        "moisture": "Moisture",
                        "monetary": "Balance",
                        "nitrogen_dioxide": "Nitrogen dioxide",
                        "nitrogen_monoxide": "Nitrogen monoxide",
                        "nitrous_oxide": "Nitrous oxide",
                        "none": "No device class",
                        "ozone": "Ozone",
                        "ph": "pH",
                        "pm1": "PM1",
                        "pm10": "PM10",
                        "pm25": "PM2.5",
                        "power": "Power",
                        "power_factor": "Power factor",
                        "precipitation": "Precipitation",
                        "precipitation_intensity": "Precipitation intensity",
                        "pressure": "Pressure",
                        "reactive_power": "Reactive power",
                        "signal_strength": "Signal strength",
                        "sound_pressure": "Sound pressure",
                        "speed": "Speed",
                        "sulphur_dioxide": "Sulphur dioxide",
                        "temperature": "Temperature",
                        "timestamp": "Timestamp",
                        "volatile_organic_compounds": "VOCs",
                        "volatile_organic_compounds_parts": "VOCs",
                        "voltage": "Voltage",
                        "volume": "Volume",
                        "volume_storage": "Stored volume",
                        "water": "Water",
                        "weight": "Weight",
                        "wind_speed": "Wind speed"
                    }
                },
                "state_class": {
                    "options": {
                        "measurement": "Measurement",
                        "none": "No state class",
                        "total": "Total",
                        "total_increasing": "Total increasing"
                    }
                },
                "unit_of_measurement": {
                    "options": {
                        "none": "No unit of measurement"
                    }
                }
            }
        },
        "screenlogic": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "gateway_entry": {
                        "data": {
                            "ip_address": "IP Address",
                            "port": "Port"
                        },
                        "description": "Enter your ScreenLogic Gateway information.",
                        "title": "ScreenLogic"
                    },
                    "gateway_select": {
                        "data": {
                            "selected_gateway": "Gateway"
                        },
                        "description": "The following ScreenLogic gateways were discovered. Please select one to configure, or choose to manually configure a ScreenLogic gateway.",
                        "title": "ScreenLogic"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Seconds between scans"
                        },
                        "description": "Specify settings for {gateway_name}",
                        "title": "ScreenLogic"
                    }
                }
            },
            "services": {
                "set_color_mode": {
                    "description": "Sets the color mode for all color-capable lights attached to this ScreenLogic gateway.",
                    "fields": {
                        "color_mode": {
                            "description": "The ScreenLogic color mode to set.",
                            "name": "Color Mode"
                        }
                    },
                    "name": "Set Color Mode"
                }
            }
        },
        "script": {
            "entity_component": {
                "_": {
                    "name": "Script",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "current": {
                            "name": "Running automations"
                        },
                        "last_action": {
                            "name": "Last action"
                        },
                        "last_triggered": {
                            "name": "Last triggered"
                        },
                        "max": {
                            "name": "Max running scripts"
                        },
                        "mode": {
                            "name": "Run mode",
                            "state": {
                                "parallel": "Parallel",
                                "queued": "Queued",
                                "restart": "Restart",
                                "single": "Single"
                            }
                        }
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads all the available scripts.",
                    "name": "Reload"
                },
                "toggle": {
                    "description": "Toggle a script. Starts it, if isn't running, stops it otherwise.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Stops a running script.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Runs the sequence of actions defined in a script.",
                    "name": "Turn on"
                }
            },
            "title": "Script"
        },
        "season": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "type": "Type of season definition"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "season": {
                        "state": {
                            "autumn": "Autumn",
                            "spring": "Spring",
                            "summer": "Summer",
                            "winter": "Winter"
                        }
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Season using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Season YAML configuration has been removed"
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "season__season": {
                            "autumn": "Autumn",
                            "spring": "Spring",
                            "summer": "Summer",
                            "winter": "Winter"
                        },
                        "season__season__": {
                            "autumn": "Autumn",
                            "spring": "Spring",
                            "summer": "Summer",
                            "winter": "Winter"
                        }
                    }
                }
            },
            "title": "Season"
        },
        "select": {
            "device_automation": {
                "action_type": {
                    "select_first": "Change {entity_name} to first option",
                    "select_last": "Change {entity_name} to last option",
                    "select_next": "Change {entity_name} to next option",
                    "select_option": "Change {entity_name} option",
                    "select_previous": "Change {entity_name} to previous option"
                },
                "condition_type": {
                    "selected_option": "Current {entity_name} selected option"
                },
                "trigger_type": {
                    "current_option_changed": "{entity_name} option changed"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Select",
                    "state_attributes": {
                        "options": {
                            "name": "Options"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "select_first": {
                    "description": "Selects the first option.",
                    "name": "First"
                },
                "select_last": {
                    "description": "Selects the last option.",
                    "name": "Last"
                },
                "select_next": {
                    "description": "Selects the next option.",
                    "fields": {
                        "cycle": {
                            "description": "If the option should cycle from the last to the first.",
                            "name": "Cycle"
                        }
                    },
                    "name": "Next"
                },
                "select_option": {
                    "description": "Selects an option.",
                    "fields": {
                        "option": {
                            "description": "Option to be selected.",
                            "name": "Option"
                        }
                    },
                    "name": "Select"
                },
                "select_previous": {
                    "description": "Selects the previous option.",
                    "fields": {
                        "cycle": {
                            "description": "If the option should cycle from the first to the last.",
                            "name": "Cycle"
                        }
                    },
                    "name": "Previous"
                }
            },
            "title": "Select"
        },
        "sense": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_validate": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The Sense integration needs to re-authenticate your account {email}.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password",
                            "timeout": "Timeout"
                        },
                        "title": "Connect to your Sense Energy Monitor"
                    },
                    "validation": {
                        "data": {
                            "code": "Verification code"
                        },
                        "title": "Sense Multi-factor authentication"
                    }
                }
            }
        },
        "senseme": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address"
                },
                "flow_title": "{name} - {model} ({host})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} - {model} ({host})?"
                    },
                    "manual": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Enter an IP Address."
                    },
                    "user": {
                        "data": {
                            "device": "Device"
                        },
                        "description": "Select a device, or choose 'IP Address' to manually enter an IP Address."
                    }
                }
            }
        },
        "sensibo": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "incorrect_api_key": "Invalid API key for selected account",
                    "invalid_auth": "Invalid authentication",
                    "no_devices": "No devices discovered",
                    "no_username": "Could not get username"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "data_description": {
                            "api_key": "Follow the documentation to get your api key"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "data_description": {
                            "api_key": "Follow the documentation to get your api key"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "filter_clean": {
                        "name": "Filter clean required"
                    },
                    "is_main_sensor": {
                        "name": "Main sensor"
                    },
                    "pure_ac_integration": {
                        "name": "Pure Boost linked with AC"
                    },
                    "pure_geo_integration": {
                        "name": "Pure Boost linked with presence"
                    },
                    "pure_measure_integration": {
                        "name": "Pure Boost linked with indoor air quality"
                    },
                    "pure_prime_integration": {
                        "name": "Pure Boost linked with outdoor air quality"
                    },
                    "room_occupied": {
                        "name": "Room occupied"
                    }
                },
                "button": {
                    "reset_filter": {
                        "name": "Reset filter"
                    }
                },
                "climate": {
                    "climate_device": {
                        "state_attributes": {
                            "fan_mode": {
                                "state": {
                                    "auto": "Auto",
                                    "high": "High",
                                    "low": "Low",
                                    "medium": "Medium",
                                    "medium_high": "Medium high",
                                    "medium_low": "Medium low",
                                    "quiet": "Quiet",
                                    "strong": "Strong"
                                }
                            },
                            "swing_mode": {
                                "state": {
                                    "both": "Both",
                                    "fixedbottom": "Fixed bottom",
                                    "fixedmiddle": "Fixed middle",
                                    "fixedmiddlebottom": "Fixed middle bottom",
                                    "fixedmiddletop": "Fixed middle top",
                                    "fixedtop": "Fixed top",
                                    "horizontal": "Horizontal",
                                    "rangebottom": "Range bottom",
                                    "rangefull": "Range full",
                                    "rangemiddle": "Range middle",
                                    "rangetop": "Range top",
                                    "stopped": "Off"
                                }
                            }
                        }
                    }
                },
                "number": {
                    "calibration_humidity": {
                        "name": "Humidity calibration"
                    },
                    "calibration_temperature": {
                        "name": "Temperature calibration"
                    }
                },
                "select": {
                    "horizontalswing": {
                        "name": "Horizontal swing",
                        "state": {
                            "fixedcenter": "Fixed center",
                            "fixedcenterleft": "Fixed center left",
                            "fixedcenterright": "Fixed center right",
                            "fixedleft": "Fixed left",
                            "fixedleftright": "Fixed left right",
                            "fixedright": "Fixed right",
                            "rangecenter": "Range center",
                            "rangefull": "Range full",
                            "rangeleft": "Range left",
                            "rangeright": "Range right",
                            "stopped": "Off"
                        }
                    },
                    "light": {
                        "name": "Light",
                        "state": {
                            "dim": "Dim",
                            "off": "Off",
                            "on": "On"
                        }
                    }
                },
                "sensor": {
                    "airq_co2": {
                        "name": "AirQ CO2"
                    },
                    "airq_tvoc": {
                        "name": "AirQ TVOC"
                    },
                    "battery_voltage": {
                        "name": "Battery voltage"
                    },
                    "climate_react_high": {
                        "name": "Climate React high temperature threshold",
                        "state_attributes": {
                            "fanlevel": {
                                "name": "Fan mode",
                                "state": {
                                    "auto": "Auto",
                                    "high": "High",
                                    "low": "Low",
                                    "medium": "Medium",
                                    "medium_high": "Medium high",
                                    "medium_low": "Medium low",
                                    "quiet": "Quiet",
                                    "strong": "Strong"
                                }
                            },
                            "horizontalswing": {
                                "name": "Horizontal swing",
                                "state": {
                                    "fixedcenter": "Fixed center",
                                    "fixedcenterleft": "Fixed center left",
                                    "fixedcenterright": "Fixed center right",
                                    "fixedleft": "Fixed left",
                                    "fixedleftright": "Fixed left right",
                                    "fixedright": "Fixed right",
                                    "rangecenter": "Range center",
                                    "rangefull": "Range full",
                                    "stopped": "Off"
                                }
                            },
                            "light": {
                                "name": "Light",
                                "state": {
                                    "dim": "Dim",
                                    "off": "Off",
                                    "on": "On"
                                }
                            },
                            "mode": {
                                "name": "Mode",
                                "state": {
                                    "auto": "Auto",
                                    "cool": "Cool",
                                    "dry": "Dry",
                                    "fan_only": "Fan only",
                                    "heat": "Heat",
                                    "heat_cool": "Heat\/Cool",
                                    "off": "Off"
                                }
                            },
                            "on": {
                                "name": "On",
                                "state": {
                                    "false": "Off",
                                    "true": "On"
                                }
                            },
                            "swing": {
                                "name": "Swing mode",
                                "state": {
                                    "both": "Both",
                                    "fixedbottom": "Fixed bottom",
                                    "fixedmiddle": "Fixed middle",
                                    "fixedmiddlebottom": "Fixed middle bottom",
                                    "fixedmiddletop": "Fixed middle top",
                                    "fixedtop": "Fixed top",
                                    "horizontal": "Horizontal",
                                    "rangebottom": "Range bottom",
                                    "rangefull": "Range full",
                                    "rangemiddle": "Range middle",
                                    "rangetop": "Range top",
                                    "stopped": "Off"
                                }
                            },
                            "targettemperature": {
                                "name": "Target temperature"
                            },
                            "temperatureunit": {
                                "name": "Temperature unit",
                                "state": {
                                    "c": "Celsius",
                                    "f": "Fahrenheit"
                                }
                            }
                        }
                    },
                    "climate_react_low": {
                        "name": "Climate React low temperature threshold",
                        "state_attributes": {
                            "fanlevel": {
                                "name": "Fan mode",
                                "state": {
                                    "auto": "Auto",
                                    "high": "High",
                                    "low": "Low",
                                    "medium": "Medium",
                                    "medium_high": "Medium high",
                                    "medium_low": "Medium low",
                                    "quiet": "Quiet",
                                    "strong": "Strong"
                                }
                            },
                            "horizontalswing": {
                                "name": "Horizontal swing",
                                "state": {
                                    "fixedcenter": "Fixed center",
                                    "fixedcenterleft": "Fixed center left",
                                    "fixedcenterright": "Fixed center right",
                                    "fixedleft": "Fixed left",
                                    "fixedleftright": "Fixed left right",
                                    "fixedright": "Fixed right",
                                    "rangecenter": "Range center",
                                    "rangefull": "Range full",
                                    "stopped": "Off"
                                }
                            },
                            "light": {
                                "name": "Light",
                                "state": {
                                    "dim": "Dim",
                                    "off": "Off",
                                    "on": "On"
                                }
                            },
                            "mode": {
                                "name": "Mode",
                                "state": {
                                    "auto": "Auto",
                                    "cool": "Cool",
                                    "dry": "Dry",
                                    "fan_only": "Fan only",
                                    "heat": "Heat",
                                    "heat_cool": "Heat\/Cool",
                                    "off": "Off"
                                }
                            },
                            "on": {
                                "name": "On",
                                "state": {
                                    "false": "Off",
                                    "true": "On"
                                }
                            },
                            "swing": {
                                "name": "Swing mode",
                                "state": {
                                    "both": "Both",
                                    "fixedbottom": "Fixed bottom",
                                    "fixedmiddle": "Fixed middle",
                                    "fixedmiddlebottom": "Fixed middle bottom",
                                    "fixedmiddletop": "Fixed middle top",
                                    "fixedtop": "Fixed top",
                                    "horizontal": "Horizontal",
                                    "rangebottom": "Range bottom",
                                    "rangefull": "Range full",
                                    "rangemiddle": "Range middle",
                                    "rangetop": "Range top",
                                    "stopped": "Off"
                                }
                            },
                            "targettemperature": {
                                "name": "Target temperature"
                            },
                            "temperatureunit": {
                                "name": "Temperature unit",
                                "state": {
                                    "c": "Celsius",
                                    "f": "Fahrenheit"
                                }
                            }
                        }
                    },
                    "ethanol": {
                        "name": "Ethanol"
                    },
                    "feels_like": {
                        "name": "Temperature feels like"
                    },
                    "filter_last_reset": {
                        "name": "Filter last reset"
                    },
                    "rssi": {
                        "name": "RSSI"
                    },
                    "sensitivity": {
                        "name": "Pure sensitivity",
                        "state": {
                            "n": "Normal",
                            "s": "Sensitive"
                        }
                    },
                    "smart_type": {
                        "name": "Climate React type",
                        "state": {
                            "feelslike": "Feels like",
                            "humidity": "Humidity",
                            "temperature": "Temperature"
                        }
                    },
                    "timer_time": {
                        "name": "Timer end time"
                    },
                    "tvoc": {
                        "name": "TVOC"
                    }
                },
                "switch": {
                    "climate_react_switch": {
                        "name": "Climate React",
                        "state_attributes": {
                            "type": {
                                "name": "Type",
                                "state": {
                                    "feelslike": "Feels like",
                                    "humidity": "Humidity",
                                    "temperature": "Temperature"
                                }
                            }
                        }
                    },
                    "pure_boost_switch": {
                        "name": "Pure Boost"
                    },
                    "timer_on_switch": {
                        "name": "Timer",
                        "state_attributes": {
                            "id": {
                                "name": "Id"
                            },
                            "turn_on": {
                                "name": "Turns on",
                                "state": {
                                    "false": "Off",
                                    "true": "On"
                                }
                            }
                        }
                    }
                },
                "update": {
                    "fw_ver_available": {
                        "name": "Update available"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "sensibo__sensitivity": {
                            "n": "Normal",
                            "s": "Sensitive"
                        },
                        "sensibo__smart_type": {
                            "feelslike": "Feels like",
                            "humidity": "Humidity",
                            "temperature": "Temperature"
                        }
                    }
                }
            },
            "services": {
                "assume_state": {
                    "description": "Sets Sensibo device to external state.",
                    "fields": {
                        "state": {
                            "description": "State to set.",
                            "name": "State"
                        }
                    },
                    "name": "Assume state"
                },
                "enable_climate_react": {
                    "description": "Enables and configures climate react.",
                    "fields": {
                        "high_temperature_state": {
                            "description": "What should happen at high threshold. Requires full state.",
                            "name": "State high threshold"
                        },
                        "high_temperature_threshold": {
                            "description": "When temp\/humidity goes above.",
                            "name": "Threshold high"
                        },
                        "low_temperature_state": {
                            "description": "What should happen at low threshold. Requires full state.",
                            "name": "State low threshold"
                        },
                        "low_temperature_threshold": {
                            "description": "When temp\/humidity goes below.",
                            "name": "Threshold low"
                        },
                        "smart_type": {
                            "description": "Choose between temperature\/feels like\/humidity.",
                            "name": "Trigger type"
                        }
                    },
                    "name": "Enable climate react"
                },
                "enable_pure_boost": {
                    "description": "Enables and configures Pure Boost settings.",
                    "fields": {
                        "ac_integration": {
                            "description": "Integrate with Air Conditioner.",
                            "name": "AC integration"
                        },
                        "geo_integration": {
                            "description": "Integrate with Presence.",
                            "name": "Geo integration"
                        },
                        "indoor_integration": {
                            "description": "Integrate with checking indoor air quality.",
                            "name": "Indoor air quality"
                        },
                        "outdoor_integration": {
                            "description": "Integrate with checking outdoor air quality.",
                            "name": "Outdoor air quality"
                        },
                        "sensitivity": {
                            "description": "Set the sensitivity for Pure Boost.",
                            "name": "Sensitivity"
                        }
                    },
                    "name": "Enable pure boost"
                },
                "enable_timer": {
                    "description": "Enables the timer with custom time.",
                    "fields": {
                        "minutes": {
                            "description": "Countdown for timer (for timer state on).",
                            "name": "Minutes"
                        }
                    },
                    "name": "Enable timer"
                },
                "full_state": {
                    "description": "Sets full state for Sensibo device.",
                    "fields": {
                        "fan_mode": {
                            "description": "set fan mode.",
                            "name": "Fan mode"
                        },
                        "horizontal_swing_mode": {
                            "description": "Set horizontal swing mode.",
                            "name": "Horizontal swing mode"
                        },
                        "light": {
                            "description": "Set light on or off.",
                            "name": "Light"
                        },
                        "mode": {
                            "description": "HVAC mode to set.",
                            "name": "HVAC mode"
                        },
                        "swing_mode": {
                            "description": "Set swing mode.",
                            "name": "Swing mode"
                        },
                        "target_temperature": {
                            "description": "Set target temperature.",
                            "name": "Target temperature"
                        }
                    },
                    "name": "Set full state"
                }
            }
        },
        "sensor": {
            "device_automation": {
                "condition_type": {
                    "is_apparent_power": "Current {entity_name} apparent power",
                    "is_aqi": "Current {entity_name} air quality index",
                    "is_atmospheric_pressure": "Current {entity_name} atmospheric pressure",
                    "is_battery_level": "Current {entity_name} battery level",
                    "is_carbon_dioxide": "Current {entity_name} carbon dioxide concentration level",
                    "is_carbon_monoxide": "Current {entity_name} carbon monoxide concentration level",
                    "is_current": "Current {entity_name} current",
                    "is_data_rate": "Current {entity_name} data rate",
                    "is_data_size": "Current {entity_name} data size",
                    "is_distance": "Current {entity_name} distance",
                    "is_duration": "Current {entity_name} duration",
                    "is_energy": "Current {entity_name} energy",
                    "is_frequency": "Current {entity_name} frequency",
                    "is_gas": "Current {entity_name} gas",
                    "is_humidity": "Current {entity_name} humidity",
                    "is_illuminance": "Current {entity_name} illuminance",
                    "is_irradiance": "Current {entity_name} irradiance",
                    "is_moisture": "Current {entity_name} moisture",
                    "is_monetary": "Current {entity_name} money",
                    "is_nitrogen_dioxide": "Current {entity_name} nitrogen dioxide concentration level",
                    "is_nitrogen_monoxide": "Current {entity_name} nitrogen monoxide concentration level",
                    "is_nitrous_oxide": "Current {entity_name} nitrous oxide concentration level",
                    "is_ozone": "Current {entity_name} ozone concentration level",
                    "is_ph": "Current {entity_name} pH level",
                    "is_pm1": "Current {entity_name} PM1 concentration level",
                    "is_pm10": "Current {entity_name} PM10 concentration level",
                    "is_pm25": "Current {entity_name} PM2.5 concentration level",
                    "is_power": "Current {entity_name} power",
                    "is_power_factor": "Current {entity_name} power factor",
                    "is_precipitation": "Current {entity_name} precipitation",
                    "is_precipitation_intensity": "Current {entity_name} precipitation intensity",
                    "is_pressure": "Current {entity_name} pressure",
                    "is_reactive_power": "Current {entity_name} reactive power",
                    "is_signal_strength": "Current {entity_name} signal strength",
                    "is_sound_pressure": "Current {entity_name} sound pressure",
                    "is_speed": "Current {entity_name} speed",
                    "is_sulphur_dioxide": "Current {entity_name} sulphur dioxide concentration level",
                    "is_temperature": "Current {entity_name} temperature",
                    "is_value": "Current {entity_name} value",
                    "is_volatile_organic_compounds": "Current {entity_name} volatile organic compounds concentration level",
                    "is_volatile_organic_compounds_parts": "Current {entity_name} volatile organic compounds concentration level",
                    "is_voltage": "Current {entity_name} voltage",
                    "is_volume": "Current {entity_name} volume",
                    "is_water": "Current {entity_name} water",
                    "is_weight": "Current {entity_name} weight",
                    "is_wind_speed": "Current {entity_name} wind speed"
                },
                "trigger_type": {
                    "apparent_power": "{entity_name} apparent power changes",
                    "aqi": "{entity_name} air quality index changes",
                    "atmospheric_pressure": "{entity_name} atmospheric pressure changes",
                    "battery_level": "{entity_name} battery level changes",
                    "carbon_dioxide": "{entity_name} carbon dioxide concentration changes",
                    "carbon_monoxide": "{entity_name} carbon monoxide concentration changes",
                    "current": "{entity_name} current changes",
                    "data_rate": "{entity_name} data rate changes",
                    "data_size": "{entity_name} data size changes",
                    "distance": "{entity_name} distance changes",
                    "duration": "{entity_name} duration changes",
                    "energy": "{entity_name} energy changes",
                    "frequency": "{entity_name} frequency changes",
                    "gas": "{entity_name} gas changes",
                    "humidity": "{entity_name} humidity changes",
                    "illuminance": "{entity_name} illuminance changes",
                    "irradiance": "{entity_name} irradiance changes",
                    "moisture": "{entity_name} moisture changes",
                    "monetary": "{entity_name} money changes",
                    "nitrogen_dioxide": "{entity_name} nitrogen dioxide concentration changes",
                    "nitrogen_monoxide": "{entity_name} nitrogen monoxide concentration changes",
                    "nitrous_oxide": "{entity_name} nitrous oxide concentration changes",
                    "ozone": "{entity_name} ozone concentration changes",
                    "ph": "{entity_name} pH level changes",
                    "pm1": "{entity_name} PM1 concentration changes",
                    "pm10": "{entity_name} PM10 concentration changes",
                    "pm25": "{entity_name} PM2.5 concentration changes",
                    "power": "{entity_name} power changes",
                    "power_factor": "{entity_name} power factor changes",
                    "precipitation": "{entity_name} precipitation changes",
                    "precipitation_intensity": "{entity_name} precipitation intensity changes",
                    "pressure": "{entity_name} pressure changes",
                    "reactive_power": "{entity_name} reactive power changes",
                    "signal_strength": "{entity_name} signal strength changes",
                    "sound_pressure": "{entity_name} sound pressure changes",
                    "speed": "{entity_name} speed changes",
                    "sulphur_dioxide": "{entity_name} sulphur dioxide concentration changes",
                    "temperature": "{entity_name} temperature changes",
                    "value": "{entity_name} value changes",
                    "volatile_organic_compounds": "{entity_name} volatile organic compounds concentration changes",
                    "volatile_organic_compounds_parts": "{entity_name} volatile organic compounds concentration changes",
                    "voltage": "{entity_name} voltage changes",
                    "volume": "{entity_name} volume changes",
                    "water": "{entity_name} water changes",
                    "weight": "{entity_name} weight changes",
                    "wind_speed": "{entity_name} wind speed changes"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Sensor",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "last_reset": {
                            "name": "Last reset"
                        },
                        "options": {
                            "name": "Possible states"
                        },
                        "state_class": {
                            "name": "State class",
                            "state": {
                                "measurement": "Measurement",
                                "total": "Total",
                                "total_increasing": "Total increasing"
                            }
                        }
                    }
                },
                "apparent_power": {
                    "name": "Apparent power"
                },
                "aqi": {
                    "name": "Air quality index"
                },
                "atmospheric_pressure": {
                    "name": "Atmospheric pressure"
                },
                "battery": {
                    "name": "Battery"
                },
                "carbon_dioxide": {
                    "name": "Carbon dioxide"
                },
                "carbon_monoxide": {
                    "name": "Carbon monoxide"
                },
                "current": {
                    "name": "Current"
                },
                "data_rate": {
                    "name": "Data rate"
                },
                "data_size": {
                    "name": "Data size"
                },
                "date": {
                    "name": "Date"
                },
                "distance": {
                    "name": "Distance"
                },
                "duration": {
                    "name": "Duration"
                },
                "energy": {
                    "name": "Energy"
                },
                "energy_storage": {
                    "name": "Stored energy"
                },
                "enum": {
                    "name": "Sensor"
                },
                "frequency": {
                    "name": "Frequency"
                },
                "gas": {
                    "name": "Gas"
                },
                "humidity": {
                    "name": "Humidity"
                },
                "illuminance": {
                    "name": "Illuminance"
                },
                "irradiance": {
                    "name": "Irradiance"
                },
                "moisture": {
                    "name": "Moisture"
                },
                "monetary": {
                    "name": "Balance"
                },
                "nitrogen_dioxide": {
                    "name": "Nitrogen dioxide"
                },
                "nitrogen_monoxide": {
                    "name": "Nitrogen monoxide"
                },
                "nitrous_oxide": {
                    "name": "Nitrous oxide"
                },
                "ozone": {
                    "name": "Ozone"
                },
                "ph": {
                    "name": "pH"
                },
                "pm10": {
                    "name": "PM10"
                },
                "pm1": {
                    "name": "PM1"
                },
                "pm25": {
                    "name": "PM2.5"
                },
                "power": {
                    "name": "Power"
                },
                "power_factor": {
                    "name": "Power factor"
                },
                "precipitation": {
                    "name": "Precipitation"
                },
                "precipitation_intensity": {
                    "name": "Precipitation intensity"
                },
                "pressure": {
                    "name": "Pressure"
                },
                "reactive_power": {
                    "name": "Reactive power"
                },
                "signal_strength": {
                    "name": "Signal strength"
                },
                "sound_pressure": {
                    "name": "Sound pressure"
                },
                "speed": {
                    "name": "Speed"
                },
                "sulphur_dioxide": {
                    "name": "Sulphur dioxide"
                },
                "temperature": {
                    "name": "Temperature"
                },
                "timestamp": {
                    "name": "Timestamp"
                },
                "volatile_organic_compounds": {
                    "name": "VOCs"
                },
                "volatile_organic_compounds_parts": {
                    "name": "VOCs"
                },
                "voltage": {
                    "name": "Voltage"
                },
                "volume": {
                    "name": "Volume"
                },
                "volume_storage": {
                    "name": "Stored volume"
                },
                "water": {
                    "name": "Water"
                },
                "weight": {
                    "name": "Weight"
                },
                "wind_speed": {
                    "name": "Wind speed"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "title": "Sensor"
        },
        "sensorpro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "sensorpush": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "sentry": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "bad_dsn": "Invalid DSN",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "dsn": "Sentry DSN"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "environment": "Optional name of the environment.",
                            "event_custom_components": "Send events from custom components",
                            "event_handled": "Send handled events",
                            "event_third_party_packages": "Send events from third-party packages",
                            "logging_event_level": "The log level Sentry will register an event for",
                            "logging_level": "The log level Sentry will record logs as breadcrums for",
                            "tracing": "Enable performance tracing",
                            "tracing_sample_rate": "Tracing sample rate; between 0.0 and 1.0 (1.0 = 100%)"
                        }
                    }
                }
            }
        },
        "senz": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "oauth_error": "Received invalid token data."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring nVent RAYCHEM SENZ using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The nVent RAYCHEM SENZ YAML configuration has been removed"
                }
            }
        },
        "sfr_box": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "auth": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "choose_auth": {
                        "description": "Setting credentials enables additional functionality.",
                        "menu_options": {
                            "auth": "Set credentials (recommended)",
                            "skip_auth": "Skip authentication"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Setting the credentials is optional, but enables additional functionality."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "dsl_status": {
                        "name": "DSL status"
                    },
                    "ftth_status": {
                        "name": "FTTH status"
                    },
                    "wan_status": {
                        "name": "WAN status"
                    }
                },
                "button": {
                    "reboot": {
                        "name": "Restart"
                    }
                },
                "sensor": {
                    "dsl_attenuation_down": {
                        "name": "DSL attenuation down"
                    },
                    "dsl_attenuation_up": {
                        "name": "DSL attenuation up"
                    },
                    "dsl_counter": {
                        "name": "DSL counter"
                    },
                    "dsl_crc": {
                        "name": "DSL CRC"
                    },
                    "dsl_line_status": {
                        "name": "DSL line status",
                        "state": {
                            "loss_of_power": "Loss Of Power",
                            "loss_of_signal": "Loss Of Signal",
                            "loss_of_signal_quality": "Loss Of Signal Quality",
                            "no_defect": "No Defect",
                            "of_frame": "Of Frame",
                            "unknown": "Unknown"
                        }
                    },
                    "dsl_linemode": {
                        "name": "DSL line mode"
                    },
                    "dsl_noise_down": {
                        "name": "DSL noise down"
                    },
                    "dsl_noise_up": {
                        "name": "DSL noise up"
                    },
                    "dsl_rate_down": {
                        "name": "DSL rate down"
                    },
                    "dsl_rate_up": {
                        "name": "DSL rate up"
                    },
                    "dsl_training": {
                        "name": "DSL training",
                        "state": {
                            "g_922_channel_analysis": "G.922 Channel Analysis",
                            "g_992_message_exchange": "G.992 Message Exchange",
                            "g_992_started": "G.992 Started",
                            "g_993_channel_analysis": "G.993 Channel Analysis",
                            "g_993_message_exchange": "G.993 Message Exchange",
                            "g_993_started": "G.993 Started",
                            "g_994_training": "G.994 Training",
                            "idle": "Idle",
                            "showtime": "Showtime",
                            "unknown": "Unknown"
                        }
                    },
                    "net_infra": {
                        "name": "Network infrastructure",
                        "state": {
                            "adsl": "ADSL",
                            "ftth": "FTTH",
                            "gprs": "GPRS",
                            "unknown": "Unknown"
                        }
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "voltage": {
                        "name": "Voltage"
                    },
                    "wan_mode": {
                        "name": "WAN mode",
                        "state": {
                            "adsl_ppp": "ADSL (PPP)",
                            "adsl_routed": "ADSL (Routed)",
                            "ftth_routed": "FTTH (Routed)",
                            "grps_ppp": "GPRS (PPP)",
                            "unknown": "Unknown"
                        }
                    }
                }
            }
        },
        "sharkiq": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "cannot_connect": "Failed to connect",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "Add Shark IQ Account",
                "step": {
                    "reauth": {
                        "data": {
                            "password": "Password",
                            "region": "Region",
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "region": "Region",
                            "username": "Username"
                        },
                        "data_description": {
                            "region": "Shark IQ uses different services in the EU.  Select your region to connect to the correct service for your account."
                        },
                        "description": "Sign into your Shark Clean account to control your devices."
                    }
                }
            },
            "selector": {
                "region": {
                    "options": {
                        "elsewhere": "Everywhere Else",
                        "europe": "Europe"
                    }
                }
            }
        },
        "shelly": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful",
                    "reauth_unsuccessful": "Re-authentication was unsuccessful, please remove the integration and set it up again.",
                    "unsupported_firmware": "The device is using an unsupported firmware version."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "firmware_not_fully_provisioned": "Device not fully provisioned. Please contact Shelly support",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm_discovery": {
                        "description": "Do you want to set up the {model} at {host}?\n\nBattery-powered devices that are password protected must be woken up before continuing with setting up.\nBattery-powered devices that are not password protected will be added when the device wakes up, you can now manually wake the device up using a button on it or wait for the next data update from the device."
                    },
                    "credentials": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Before setup, battery-powered devices must be woken up, you can now wake the device up using a button on it."
                    }
                }
            },
            "device_automation": {
                "trigger_subtype": {
                    "button": "Button",
                    "button1": "First button",
                    "button2": "Second button",
                    "button3": "Third button",
                    "button4": "Fourth button"
                },
                "trigger_type": {
                    "btn_down": "{subtype} button down",
                    "btn_up": "{subtype} button up",
                    "double": "{subtype} double clicked",
                    "double_push": "{subtype} double push",
                    "long": "{subtype} long clicked",
                    "long_push": "{subtype} long push",
                    "long_single": "{subtype} long clicked and then single clicked",
                    "single": "{subtype} single clicked",
                    "single_long": "{subtype} single clicked and then long clicked",
                    "single_push": "{subtype} single push",
                    "triple": "{subtype} triple clicked",
                    "triple_push": "{subtype} triple push"
                }
            },
            "entity": {
                "binary_sensor": {
                    "gas": {
                        "state_attributes": {
                            "detected": {
                                "state": {
                                    "heavy": "Heavy",
                                    "mild": "Mild",
                                    "none": "None",
                                    "test": "Test",
                                    "unknown": "Unknown"
                                }
                            }
                        }
                    }
                },
                "event": {
                    "input": {
                        "state_attributes": {
                            "event_type": {
                                "state": {
                                    "btn_down": "Button down",
                                    "btn_up": "Button up",
                                    "double": "Double push",
                                    "double_push": "Double push",
                                    "long": "Long push",
                                    "long_push": "Long push",
                                    "long_single": "Long push and then short push",
                                    "single": "Single push",
                                    "single_long": "Short push and then long push",
                                    "single_push": "Single push",
                                    "triple": "Triple push",
                                    "triple_push": "Triple push"
                                }
                            }
                        }
                    }
                },
                "sensor": {
                    "operation": {
                        "state": {
                            "fault": "Fault",
                            "normal": "Normal",
                            "unknown": "Unknown",
                            "warmup": "Warm-up"
                        },
                        "state_attributes": {
                            "self_test": {
                                "state": {
                                    "completed": "Completed",
                                    "not_completed": "Not completed",
                                    "pending": "Pending",
                                    "running": "Running"
                                }
                            }
                        }
                    },
                    "valve_status": {
                        "state": {
                            "checking": "Checking",
                            "closed": "Closed",
                            "closing": "Closing",
                            "failure": "Failure",
                            "opened": "Opened",
                            "opening": "Opening",
                            "unknown": "Unknown"
                        }
                    }
                }
            },
            "issues": {
                "device_not_calibrated": {
                    "description": "Shelly device {device_name} with IP address {ip_address} requires calibration. To calibrate the device, it must be rebooted after proper installation on the valve. You can reboot the device in its web panel, go to 'Settings' > 'Device Reboot'.",
                    "title": "Shelly device {device_name} is not calibrated"
                },
                "push_update_failure": {
                    "description": "Home Assistant is not receiving push updates from the Shelly device {device_name} with IP address {ip_address}. Check the CoIoT configuration in the web panel of the device and your network configuration.",
                    "title": "Shelly device {device_name} push update failure"
                }
            },
            "options": {
                "abort": {
                    "ble_unsupported": "Bluetooth support requires firmware version {ble_min_version} or newer."
                },
                "step": {
                    "init": {
                        "data": {
                            "ble_scanner_mode": "Bluetooth scanner mode"
                        },
                        "description": "Bluetooth scanning can be active or passive. With active, the Shelly requests data from nearby devices; with passive, the Shelly receives unsolicited data from nearby devices."
                    }
                }
            },
            "selector": {
                "ble_scanner_mode": {
                    "options": {
                        "active": "Active",
                        "disabled": "Disabled",
                        "passive": "Passive"
                    }
                }
            }
        },
        "shopping_list": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "description": "Do you want to configure the shopping list?",
                        "title": "Shopping List"
                    }
                }
            },
            "services": {
                "add_item": {
                    "description": "Adds an item to the shopping list.",
                    "fields": {
                        "name": {
                            "description": "The name of the item to add.",
                            "name": "Name"
                        }
                    },
                    "name": "Add item"
                },
                "clear_completed_items": {
                    "description": "Clears completed items from the shopping list.",
                    "name": "Clear completed items"
                },
                "complete_all": {
                    "description": "Marks all items as completed in the shopping list (without removing them from the list).",
                    "name": "Complete all"
                },
                "complete_item": {
                    "description": "Marks the first item with matching name as completed in the shopping list.",
                    "fields": {
                        "name": {
                            "description": "The name of the item to mark as completed (without removing).",
                            "name": "Name"
                        }
                    },
                    "name": "Complete item"
                },
                "incomplete_all": {
                    "description": "Marks all items as incomplete in the shopping list.",
                    "name": "Incomplete all"
                },
                "incomplete_item": {
                    "description": "Marks the first item with matching name as incomplete in the shopping list.",
                    "fields": {
                        "name": {
                            "description": "The name of the item to mark as incomplete.",
                            "name": "Name"
                        }
                    },
                    "name": "Incomplete item"
                },
                "remove_item": {
                    "description": "Removes the first item with matching name from the shopping list.",
                    "fields": {
                        "name": {
                            "description": "The name of the item to remove.",
                            "name": "Name"
                        }
                    },
                    "name": "Remove item"
                },
                "sort": {
                    "description": "Sorts all items by name in the shopping list.",
                    "fields": {
                        "reverse": {
                            "description": "Whether to sort in reverse (descending) order.",
                            "name": "Sort reverse"
                        }
                    },
                    "name": "Sort all items"
                }
            },
            "title": "Shopping List"
        },
        "sia": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_account_format": "The account is not a hex value, please use only 0-9 and A-F.",
                    "invalid_account_length": "The account is not the right length, it has to be between 3 and 16 characters.",
                    "invalid_key_format": "The key is not a hex value, please use only 0-9 and A-F.",
                    "invalid_key_length": "The key is not the right length, it has to be 16, 24 or 32 hex characters.",
                    "invalid_ping": "The ping interval needs to be between 1 and 1440 minutes.",
                    "invalid_zones": "There needs to be at least 1 zone.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "additional_account": {
                        "data": {
                            "account": "Account ID",
                            "additional_account": "Additional accounts",
                            "encryption_key": "Encryption Key",
                            "ping_interval": "Ping Interval (min)",
                            "zones": "Number of zones for the account"
                        },
                        "title": "Add another account to the current port."
                    },
                    "user": {
                        "data": {
                            "account": "Account ID",
                            "additional_account": "Additional accounts",
                            "encryption_key": "Encryption Key",
                            "ping_interval": "Ping Interval (min)",
                            "port": "Port",
                            "protocol": "Protocol",
                            "zones": "Number of zones for the account"
                        },
                        "title": "Create a connection for SIA based alarm systems."
                    }
                }
            },
            "options": {
                "step": {
                    "options": {
                        "data": {
                            "ignore_timestamps": "Ignore the timestamp check of the SIA events",
                            "zones": "Number of zones for the account"
                        },
                        "description": "Set the options for account: {account}",
                        "title": "Options for the SIA Setup."
                    }
                }
            }
        },
        "simplepush": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "device_key": "The device key of your device",
                            "event": "The event for the events.",
                            "name": "Name",
                            "password": "The password of the encryption used by your device",
                            "salt": "The salt used by your device."
                        }
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Simplepush using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the Simplepush YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Simplepush YAML configuration has been removed"
                }
            }
        },
        "simplisafe": {
            "config": {
                "abort": {
                    "already_configured": "This SimpliSafe account is already in use.",
                    "reauth_successful": "Re-authentication was successful",
                    "wrong_account": "The user credentials provided do not match this SimpliSafe account."
                },
                "error": {
                    "identifier_exists": "Account already registered",
                    "invalid_auth": "Invalid authentication",
                    "invalid_auth_code_length": "SimpliSafe authorization codes are 45 characters in length",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "auth_code": "Authorization Code"
                        },
                        "description": "SimpliSafe authenticates users via its web app. Due to technical limitations, there is a manual step at the end of this process; please ensure that you read the [documentation](http:\/\/home-assistant.io\/integrations\/simplisafe#getting-an-authorization-code) before starting.\n\nWhen you are ready, click [here]({url}) to open the SimpliSafe web app and input your credentials. If you've already logged into SimpliSafe in your browser, you may want to open a new tab, then copy\/paste the above URL into that tab.\n\nWhen the process is complete, return here and input the authorization code from the `com.simplisafe.mobile` URL."
                    }
                }
            },
            "entity": {
                "button": {
                    "clear_notifications": {
                        "name": "Clear notifications"
                    }
                }
            },
            "issues": {
                "deprecated_service": {
                    "description": "Update any automations or scripts that use this service to instead use the `{alternate_service}` service with a target entity ID of `{alternate_target}`. Then, click SUBMIT below to mark this issue as resolved.",
                    "title": "The {deprecated_service} service is being removed"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "code": "Code (used in Home Assistant UI)"
                        },
                        "title": "Configure SimpliSafe"
                    }
                }
            },
            "services": {
                "remove_pin": {
                    "description": "Removes a PIN by its label or value.",
                    "fields": {
                        "device_id": {
                            "description": "The system to remove the PIN from.",
                            "name": "System"
                        },
                        "label_or_pin": {
                            "description": "The label\/value to remove.",
                            "name": "Label\/PIN"
                        }
                    },
                    "name": "Remove PIN"
                },
                "set_pin": {
                    "description": "Sets\/updates a PIN.",
                    "fields": {
                        "device_id": {
                            "description": "The system to set the PIN on.",
                            "name": "System"
                        },
                        "label": {
                            "description": "The label of the PIN.",
                            "name": "Label"
                        },
                        "pin": {
                            "description": "The value of the PIN.",
                            "name": "PIN"
                        }
                    },
                    "name": "Set PIN"
                },
                "set_system_properties": {
                    "description": "Sets one or more system properties.",
                    "fields": {
                        "alarm_duration": {
                            "description": "The length of a triggered alarm.",
                            "name": "Alarm duration"
                        },
                        "alarm_volume": {
                            "description": "The volume level of a triggered alarm.",
                            "name": "Alarm volume"
                        },
                        "chime_volume": {
                            "description": "The volume level of the door chime.",
                            "name": "Chime volume"
                        },
                        "device_id": {
                            "description": "The system whose properties should be set.",
                            "name": "System"
                        },
                        "entry_delay_away": {
                            "description": "How long to delay when entering while \"away\".",
                            "name": "Entry delay away"
                        },
                        "entry_delay_home": {
                            "description": "How long to delay when entering while \"home\".",
                            "name": "Entry delay home"
                        },
                        "exit_delay_away": {
                            "description": "How long to delay when exiting while \"away\".",
                            "name": "Exit delay away"
                        },
                        "exit_delay_home": {
                            "description": "How long to delay when exiting while \"home\".",
                            "name": "Exit delay home"
                        },
                        "light": {
                            "description": "Whether the armed light should be visible.",
                            "name": "Light"
                        },
                        "voice_prompt_volume": {
                            "description": "The volume level of the voice prompt.",
                            "name": "Voice prompt volume"
                        }
                    },
                    "name": "Set system properties"
                }
            }
        },
        "siren": {
            "entity_component": {
                "_": {
                    "name": "Siren",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    },
                    "state_attributes": {
                        "available_tones": {
                            "name": "Available tones"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "toggle": {
                    "description": "Toggles the siren on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns the siren off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns the siren on.",
                    "fields": {
                        "duration": {
                            "description": "Number of seconds the sound is played. Must be supported by the integration.",
                            "name": "Duration"
                        },
                        "tone": {
                            "description": "The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration.",
                            "name": "Tone"
                        },
                        "volume_level": {
                            "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration.",
                            "name": "Volume"
                        }
                    },
                    "name": "Turn on"
                }
            },
            "title": "Siren"
        },
        "skybell": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please update your password for {email}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "button": {
                        "name": "Button"
                    }
                },
                "camera": {
                    "activity": {
                        "name": "Last activity"
                    },
                    "camera": {
                        "name": "Camera"
                    }
                },
                "sensor": {
                    "chime_level": {
                        "name": "Chime level"
                    },
                    "last_button_event": {
                        "name": "Last button event"
                    },
                    "last_check_in": {
                        "name": "Last check in"
                    },
                    "last_motion_event": {
                        "name": "Last motion event"
                    },
                    "motion_threshold": {
                        "name": "Motion threshold"
                    },
                    "video_profile": {
                        "name": "Video profile"
                    },
                    "wifi_ssid": {
                        "name": "Wi-Fi SSID"
                    },
                    "wifi_status": {
                        "name": "Wi-Fi status"
                    }
                },
                "switch": {
                    "do_not_disturb": {
                        "name": "Do not disturb"
                    },
                    "do_not_ring": {
                        "name": "Do not ring"
                    },
                    "motion_sensor": {
                        "name": "Motion sensor"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Skybell using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Skybell YAML configuration has been removed"
                }
            }
        },
        "slack": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "default_channel": "Default Channel",
                            "icon": "Icon",
                            "username": "Username"
                        },
                        "data_description": {
                            "api_key": "The Slack API token to use for sending Slack messages.",
                            "default_channel": "The channel to post to if no channel is specified when sending a message.",
                            "icon": "Use one of the Slack emojis as an Icon for the supplied username.",
                            "username": "Home Assistant will post to Slack using the username specified."
                        },
                        "description": "Refer to the documentation on getting your Slack API key."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "do_not_disturb_until": {
                        "name": "Do not disturb until"
                    }
                }
            }
        },
        "sleepiq": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The SleepIQ integration needs to re-authenticate your account {username}.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "slimproto": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                }
            }
        },
        "sma": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "cannot_retrieve_device_info": "Successfully connected, but unable to retrieve the device information",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "group": "Group",
                            "host": "Host",
                            "password": "Password",
                            "ssl": "Uses an SSL certificate",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Enter your SMA device information.",
                        "title": "Set up SMA Solar"
                    }
                }
            }
        },
        "smappee": {
            "config": {
                "abort": {
                    "already_configured_device": "Device is already configured",
                    "already_configured_local_device": "Local device(s) is already configured. Please remove those first before configuring a cloud device.",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "cannot_connect": "Failed to connect",
                    "invalid_mdns": "Unsupported device for the Smappee integration.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})"
                },
                "flow_title": "{name}",
                "step": {
                    "environment": {
                        "data": {
                            "environment": "Environment"
                        },
                        "description": "Set up your Smappee to integrate with Home Assistant."
                    },
                    "local": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Enter the host to initiate the Smappee local integration"
                    },
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the Smappee device with serialnumber `{serialnumber}` to Home Assistant?",
                        "title": "Discovered Smappee device"
                    }
                }
            }
        },
        "smart_meter_texas": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "smartthings": {
            "config": {
                "abort": {
                    "invalid_webhook_url": "Home Assistant is not configured correctly to receive updates from SmartThings. The webhook URL is invalid:\n> {webhook_url}\n\nPlease update your configuration per the [instructions]({component_url}), restart Home Assistant, and try again.",
                    "no_available_locations": "There are no available SmartThings Locations to set up in Home Assistant."
                },
                "error": {
                    "app_setup_error": "Unable to set up the SmartApp.  Please try again.",
                    "token_forbidden": "The token does not have the required OAuth scopes.",
                    "token_invalid_format": "The token must be in the UID\/GUID format",
                    "token_unauthorized": "The token is invalid or no longer authorized.",
                    "webhook_error": "SmartThings could not validate the webhook URL. Please ensure the webhook URL is reachable from the internet and try again."
                },
                "step": {
                    "authorize": {
                        "title": "Authorize Home Assistant"
                    },
                    "pat": {
                        "data": {
                            "access_token": "Access Token"
                        },
                        "description": "Please enter a SmartThings [Personal Access Token]({token_url}) that has been created per the [instructions]({component_url}).  This will be used to create the Home Assistant integration within your SmartThings account.",
                        "title": "Enter Personal Access Token"
                    },
                    "select_location": {
                        "data": {
                            "location_id": "Location"
                        },
                        "description": "Please select the SmartThings Location you wish to add to Home Assistant.  We will then open a new window and ask you to login and authorize installation of the Home Assistant integration into the selected location.",
                        "title": "Select Location"
                    },
                    "user": {
                        "description": "SmartThings will be configured to send push updates to Home Assistant at:\n> {webhook_url}\n\nIf this is not correct, please update your configuration, restart Home Assistant, and try again.",
                        "title": "Confirm Callback URL"
                    }
                }
            }
        },
        "smarttub": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "description": "The SmartTub integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        },
                        "description": "Enter your SmartTub email address and password to login",
                        "title": "Login"
                    }
                }
            },
            "services": {
                "reset_reminder": {
                    "description": "Reset a reminder, and set the next time it will be triggered.",
                    "fields": {
                        "days": {
                            "description": "The number of days when the next reminder should trigger.",
                            "name": "Days"
                        }
                    },
                    "name": "Reset a reminder"
                },
                "set_primary_filtration": {
                    "description": "Updates the primary filtration settings.",
                    "fields": {
                        "duration": {
                            "description": "The desired duration of the primary filtration cycle.",
                            "name": "Duration"
                        },
                        "start_hour": {
                            "description": "The hour of the day at which to begin the primary filtration cycle.",
                            "name": "Start hour"
                        }
                    },
                    "name": "Update primary filtration settings"
                },
                "set_secondary_filtration": {
                    "description": "Updates the secondary filtration settings.",
                    "fields": {
                        "mode": {
                            "description": "The secondary filtration mode.",
                            "name": "Mode"
                        }
                    },
                    "name": "Update secondary filtration settings"
                },
                "snooze_reminder": {
                    "description": "Delay a reminder, so that it won't trigger again for a period of time.",
                    "fields": {
                        "days": {
                            "description": "The number of days to delay the reminder.",
                            "name": "Days"
                        }
                    },
                    "name": "Snooze a reminder"
                }
            }
        },
        "smhi": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "wrong_location": "Location Sweden only"
                },
                "step": {
                    "user": {
                        "data": {
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "title": "Location in Sweden"
                    }
                }
            }
        },
        "sms": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "baud_speed": "Baud Speed",
                            "device": "Device"
                        },
                        "title": "Connect to the modem"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "bit_error_rate": {
                        "name": "Bit error rate"
                    },
                    "cid": {
                        "name": "Cell ID"
                    },
                    "lac": {
                        "name": "Local area code"
                    },
                    "network_code": {
                        "name": "GSM network code"
                    },
                    "network_name": {
                        "name": "Network name"
                    },
                    "signal_percent": {
                        "name": "Signal percent"
                    },
                    "signal_strength": {
                        "name": "Signal strength"
                    },
                    "state": {
                        "name": "Network status"
                    }
                }
            }
        },
        "smtp": {
            "services": {
                "reload": {
                    "description": "Reloads smtp notify services.",
                    "name": "Reload"
                }
            }
        },
        "snapcast": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Please enter your server connection details",
                        "title": "Connect"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Snapcast using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Snapcast YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Snapcast YAML configuration is being removed"
                }
            },
            "services": {
                "join": {
                    "description": "Groups players together.",
                    "fields": {
                        "entity_id": {
                            "description": "The players to join to the \"master\".",
                            "name": "Entity"
                        },
                        "master": {
                            "description": "Entity ID of the player to synchronize to.",
                            "name": "Master"
                        }
                    },
                    "name": "Join"
                },
                "restore": {
                    "description": "Restores a snapshot of the media player.",
                    "name": "Restore"
                },
                "set_latency": {
                    "description": "Sets client set_latency.",
                    "fields": {
                        "latency": {
                            "description": "Latency in master.",
                            "name": "Latency"
                        }
                    },
                    "name": "Set latency"
                },
                "snapshot": {
                    "description": "Takes a snapshot of the media player.",
                    "name": "Snapshot"
                },
                "unjoin": {
                    "description": "Unjoins the player from a group.",
                    "name": "Unjoin"
                }
            }
        },
        "snips": {
            "services": {
                "feedback_off": {
                    "description": "Turns feedback sounds off.",
                    "fields": {
                        "site_id": {
                            "description": "Site to turn sounds on, defaults to all sites.",
                            "name": "Site ID"
                        }
                    },
                    "name": "Feedback off"
                },
                "feedback_on": {
                    "description": "Turns feedback sounds on.",
                    "fields": {
                        "site_id": {
                            "description": "Site to turn sounds on, defaults to all sites.",
                            "name": "Site ID"
                        }
                    },
                    "name": "Feedback on"
                },
                "say": {
                    "description": "Sends a TTS message to Snips.",
                    "fields": {
                        "custom_data": {
                            "description": "Custom data that will be included with all messages in this session.",
                            "name": "Custom data"
                        },
                        "site_id": {
                            "description": "Site to use to start session, defaults to default.",
                            "name": "Site ID"
                        },
                        "text": {
                            "description": "Text to say.",
                            "name": "Text"
                        }
                    },
                    "name": "Say"
                },
                "say_action": {
                    "description": "Sends a TTS message to Snips to listen for a response.",
                    "fields": {
                        "can_be_enqueued": {
                            "description": "If True, session waits for an open session to end, if False session is dropped if one is running.",
                            "name": "Can be enqueued"
                        },
                        "custom_data": {
                            "description": "Custom data that will be included with all messages in this session.",
                            "name": "Custom data"
                        },
                        "intent_filter": {
                            "description": "Optional Array of Strings - A list of intents names to restrict the NLU resolution to on the first query.",
                            "name": "Intent filter"
                        },
                        "site_id": {
                            "description": "Site to use to start session, defaults to default.",
                            "name": "Site ID"
                        },
                        "text": {
                            "description": "Text to say.",
                            "name": "Text"
                        }
                    },
                    "name": "Say action"
                }
            }
        },
        "snooz": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "progress": {
                    "wait_for_pairing_mode": "To complete setup, put this device in pairing mode.\n\n### How to enter pairing mode\n1. Force quit SNOOZ mobile apps.\n2. Press and hold the power button on the device. Release when the lights start blinking (approximately 5 seconds)."
                },
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "pairing_timeout": {
                        "description": "The device did not enter pairing mode. Click Submit to try again.\n\n### Troubleshooting\n1. Check that the device isn't connected to the mobile app.\n2. Unplug the device for 5 seconds, then plug it back in."
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "services": {
                "transition_off": {
                    "description": "Transitions volume off over time.",
                    "fields": {
                        "duration": {
                            "description": "Time it takes to turn off.",
                            "name": "Transition duration"
                        }
                    },
                    "name": "Transition off"
                },
                "transition_on": {
                    "description": "Transitions to a target volume level over time.",
                    "fields": {
                        "duration": {
                            "description": "Time it takes to reach the target volume level.",
                            "name": "Transition duration"
                        },
                        "volume": {
                            "description": "If not specified, the volume level is read from the device.",
                            "name": "Target volume"
                        }
                    },
                    "name": "Transition on"
                }
            }
        },
        "solaredge": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "could_not_connect": "Could not connect to the solaredge API",
                    "invalid_api_key": "Invalid API key",
                    "site_not_active": "The site is not active"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "name": "The name of this installation",
                            "site_id": "The SolarEdge site-id"
                        },
                        "title": "Define the API parameters for this installation"
                    }
                }
            }
        },
        "solarlog": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "The prefix to be used for your Solar-Log sensors"
                        },
                        "title": "Define your Solar-Log connection"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "alternator_loss": {
                        "name": "Alternator loss"
                    },
                    "capacity": {
                        "name": "Capacity"
                    },
                    "consumption_ac": {
                        "name": "Consumption AC"
                    },
                    "consumption_day": {
                        "name": "Consumption day"
                    },
                    "consumption_month": {
                        "name": "Consumption month"
                    },
                    "consumption_total": {
                        "name": "Consumption total"
                    },
                    "consumption_year": {
                        "name": "Consumption year"
                    },
                    "consumption_yesterday": {
                        "name": "Consumption yesterday"
                    },
                    "efficiency": {
                        "name": "Efficiency"
                    },
                    "last_update": {
                        "name": "Last update"
                    },
                    "power_ac": {
                        "name": "Power AC"
                    },
                    "power_available": {
                        "name": "Power available"
                    },
                    "power_dc": {
                        "name": "Power DC"
                    },
                    "total_power": {
                        "name": "Installed peak power"
                    },
                    "usage": {
                        "name": "Usage"
                    },
                    "voltage_ac": {
                        "name": "Voltage AC"
                    },
                    "voltage_dc": {
                        "name": "Voltage DC"
                    },
                    "yield_day": {
                        "name": "Yield day"
                    },
                    "yield_month": {
                        "name": "Yield month"
                    },
                    "yield_total": {
                        "name": "Yield total"
                    },
                    "yield_year": {
                        "name": "Yield year"
                    },
                    "yield_yesterday": {
                        "name": "Yield yesterday"
                    }
                }
            }
        },
        "solax": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address",
                            "password": "Password",
                            "port": "Port"
                        }
                    }
                }
            }
        },
        "soma": {
            "config": {
                "abort": {
                    "already_setup": "Already configured. Only a single configuration possible.",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "connection_error": "Failed to connect",
                    "missing_configuration": "The Soma component is not configured. Please follow the documentation.",
                    "result_error": "SOMA Connect responded with error status."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Please enter connection settings of your SOMA Connect.",
                        "title": "SOMA Connect"
                    }
                }
            }
        },
        "somfy": {
            "config": {
                "abort": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            }
        },
        "somfy_mylink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{mac} ({ip})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port",
                            "system_id": "System ID"
                        },
                        "description": "The System ID can be obtained in the MyLink app under Integration by selecting any non-Cloud service."
                    }
                }
            },
            "options": {
                "abort": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "init": {
                        "data": {
                            "target_id": "Configure options for a cover."
                        },
                        "title": "Configure MyLink Options"
                    },
                    "target_config": {
                        "data": {
                            "reverse": "Cover is reversed"
                        },
                        "description": "Configure options for `{target_name}`",
                        "title": "Configure MyLink Cover"
                    }
                }
            }
        },
        "sonarr": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{name}",
                "step": {
                    "reauth_confirm": {
                        "description": "The Sonarr integration needs to be manually re-authenticated with the Sonarr API hosted at: {url}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "url": "URL",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "commands": {
                        "name": "Commands"
                    },
                    "diskspace": {
                        "name": "Disk space"
                    },
                    "queue": {
                        "name": "Queue"
                    },
                    "series": {
                        "name": "Shows"
                    },
                    "upcoming": {
                        "name": "Upcoming"
                    },
                    "wanted": {
                        "name": "Wanted"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "upcoming_days": "Number of upcoming days to display",
                            "wanted_max_items": "Max number of wanted items to display"
                        }
                    }
                }
            }
        },
        "songpal": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "not_songpal_device": "Not a Songpal device"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "init": {
                        "description": "Do you want to set up {name} ({host})?"
                    },
                    "user": {
                        "data": {
                            "endpoint": "Endpoint"
                        }
                    }
                }
            },
            "services": {
                "set_sound_setting": {
                    "description": "Change sound setting.",
                    "fields": {
                        "name": {
                            "description": "Name of the setting.",
                            "name": "Name"
                        },
                        "value": {
                            "description": "Value to set.",
                            "name": "Value"
                        }
                    },
                    "name": "Sets sound setting"
                }
            }
        },
        "sonos": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "not_sonos_device": "Discovered device is not a Sonos device",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up Sonos?"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "microphone": {
                        "name": "Microphone"
                    }
                },
                "number": {
                    "audio_delay": {
                        "name": "Audio delay"
                    },
                    "balance": {
                        "name": "Balance"
                    },
                    "bass": {
                        "name": "Bass"
                    },
                    "music_surround_level": {
                        "name": "Music surround level"
                    },
                    "sub_gain": {
                        "name": "Sub gain"
                    },
                    "surround_level": {
                        "name": "Surround level"
                    },
                    "treble": {
                        "name": "Treble"
                    }
                },
                "sensor": {
                    "audio_input_format": {
                        "name": "Audio input format"
                    }
                },
                "switch": {
                    "buttons_enabled": {
                        "name": "Touch controls"
                    },
                    "cross_fade": {
                        "name": "Crossfade"
                    },
                    "dialog_level": {
                        "name": "Speech enhancement"
                    },
                    "loudness": {
                        "name": "Loudness"
                    },
                    "night_mode": {
                        "name": "Night sound"
                    },
                    "status_light": {
                        "name": "Status light"
                    },
                    "sub_enabled": {
                        "name": "Subwoofer enabled"
                    },
                    "surround_enabled": {
                        "name": "Surround enabled"
                    },
                    "surround_mode": {
                        "name": "Surround music full volume"
                    }
                }
            },
            "issues": {
                "subscriptions_failed": {
                    "description": "Falling back to polling, functionality may be limited.\n\nSonos device at {device_ip} cannot reach Home Assistant at {listener_address}.\n\nSee our [documentation]({sub_fail_url}) for more information on how to solve this issue.",
                    "title": "Networking error: subscriptions failed"
                }
            },
            "services": {
                "clear_sleep_timer": {
                    "description": "Clears a Sonos timer.",
                    "name": "Clear timer"
                },
                "play_queue": {
                    "description": "Start playing the queue from the first item.",
                    "fields": {
                        "queue_position": {
                            "description": "Position of the song in the queue to start playing from.",
                            "name": "Queue position"
                        }
                    },
                    "name": "Play queue"
                },
                "remove_from_queue": {
                    "description": "Removes an item from the queue.",
                    "fields": {
                        "queue_position": {
                            "description": "Position in the queue to remove.",
                            "name": "Queue position"
                        }
                    },
                    "name": "Remove from queue"
                },
                "restore": {
                    "description": "Restores a snapshot of the media player.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will be restored.",
                            "name": "Entity"
                        },
                        "with_group": {
                            "description": "True or False. Also restore the group layout.",
                            "name": "With group"
                        }
                    },
                    "name": "Restore"
                },
                "set_sleep_timer": {
                    "description": "Sets a Sonos timer.",
                    "fields": {
                        "sleep_time": {
                            "description": "Number of seconds to set the timer.",
                            "name": "Sleep Time"
                        }
                    },
                    "name": "Set timer"
                },
                "snapshot": {
                    "description": "Takes a snapshot of the media player.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of entity that will be snapshot.",
                            "name": "Entity"
                        },
                        "with_group": {
                            "description": "True or False. Also snapshot the group layout.",
                            "name": "With group"
                        }
                    },
                    "name": "Snapshot"
                },
                "update_alarm": {
                    "description": "Updates an alarm with new time and volume settings.",
                    "fields": {
                        "alarm_id": {
                            "description": "ID for the alarm to be updated.",
                            "name": "Alarm ID"
                        },
                        "enabled": {
                            "description": "Enable or disable the alarm.",
                            "name": "Alarm enabled"
                        },
                        "include_linked_zones": {
                            "description": "Enable or disable including grouped rooms.",
                            "name": "Include linked zones"
                        },
                        "time": {
                            "description": "Set time for the alarm.",
                            "name": "Time"
                        },
                        "volume": {
                            "description": "Set alarm volume level.",
                            "name": "Volume"
                        }
                    },
                    "name": "Update alarm"
                }
            }
        },
        "soundtouch": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    },
                    "zeroconf_confirm": {
                        "description": "You are about to add the SoundTouch device named `{name}` to Home Assistant.",
                        "title": "Confirm adding Bose SoundTouch device"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Bose SoundTouch using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Bose SoundTouch YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Bose SoundTouch YAML configuration is being removed"
                }
            },
            "services": {
                "add_zone_slave": {
                    "description": "Adds a slave to a SoundTouch multi-room zone.",
                    "fields": {
                        "master": {
                            "description": "Name of the master entity that is coordinating the multi-room zone. Platform dependent.",
                            "name": "Master"
                        },
                        "slaves": {
                            "description": "Name of slaves entities to add to the existing zone.",
                            "name": "Slaves"
                        }
                    },
                    "name": "Add zone slave"
                },
                "create_zone": {
                    "description": "Creates a SoundTouch multi-room zone.",
                    "fields": {
                        "master": {
                            "description": "Name of the master entity that will coordinate the multi-room zone. Platform dependent.",
                            "name": "Master"
                        },
                        "slaves": {
                            "description": "Name of slaves entities to add to the new zone.",
                            "name": "Slaves"
                        }
                    },
                    "name": "Create zone"
                },
                "play_everywhere": {
                    "description": "Plays on all Bose SoundTouch devices.",
                    "fields": {
                        "master": {
                            "description": "Name of the master entity that will coordinate the grouping. Platform dependent. It is a shortcut for creating a multi-room zone with all devices.",
                            "name": "Master"
                        }
                    },
                    "name": "Play everywhere"
                },
                "remove_zone_slave": {
                    "description": "Removes a slave from the SoundTouch multi-room zone.",
                    "fields": {
                        "master": {
                            "description": "Name of the master entity that is coordinating the multi-room zone. Platform dependent.",
                            "name": "Master"
                        },
                        "slaves": {
                            "description": "Name of slaves entities to remove from the existing zone.",
                            "name": "Slaves"
                        }
                    },
                    "name": "Remove zone slave"
                }
            }
        },
        "speedtestdotnet": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "download": {
                        "name": "Download"
                    },
                    "ping": {
                        "name": "Ping"
                    },
                    "upload": {
                        "name": "Upload"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "server_name": "Select test server"
                        }
                    }
                }
            }
        },
        "spider": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Sign-in with mijn.ithodaalderop.nl account"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "power_consumption": {
                        "name": "Power consumption"
                    },
                    "total_energy_today": {
                        "name": "Total energy today"
                    }
                }
            }
        },
        "spotify": {
            "config": {
                "abort": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The Spotify integration is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "reauth_account_mismatch": "The Spotify account authenticated with, does not match the account needed re-authentication."
                },
                "create_entry": {
                    "default": "Successfully authenticated with Spotify."
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The Spotify integration needs to re-authenticate with Spotify for account: {account}",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Spotify using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Spotify YAML configuration has been removed"
                }
            },
            "system_health": {
                "info": {
                    "api_endpoint_reachable": "Spotify API endpoint reachable"
                }
            }
        },
        "sql": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "column_invalid": "The column `{column}` is not returned by the query",
                    "db_url_invalid": "Database URL invalid",
                    "query_invalid": "SQL Query invalid"
                },
                "step": {
                    "user": {
                        "data": {
                            "column": "Column",
                            "db_url": "Database URL",
                            "device_class": "Device Class",
                            "name": "Name",
                            "query": "Select Query",
                            "state_class": "State Class",
                            "unit_of_measurement": "Unit of Measure",
                            "value_template": "Value Template"
                        },
                        "data_description": {
                            "column": "Column for returned query to present as state",
                            "db_url": "Database URL, leave empty to use HA recorder database",
                            "device_class": "The type\/class of the sensor to set the icon in the frontend",
                            "name": "Name that will be used for Config Entry and also the Sensor",
                            "query": "Query to run, needs to start with 'SELECT'",
                            "state_class": "The state_class of the sensor",
                            "unit_of_measurement": "Unit of Measure (optional)",
                            "value_template": "Value Template (optional)"
                        }
                    }
                }
            },
            "issues": {
                "entity_id_query_does_full_table_scan": {
                    "description": "The query `{query}` contains the keyword `entity_id` but does not reference the `states_meta` table. This will cause a full table scan and database instability. Please check the documentation and use `states_meta.entity_id` instead.",
                    "title": "SQL query does full table scan"
                }
            },
            "options": {
                "error": {
                    "column_invalid": "The column `{column}` is not returned by the query",
                    "db_url_invalid": "Database URL invalid",
                    "query_invalid": "SQL Query invalid"
                },
                "step": {
                    "init": {
                        "data": {
                            "column": "Column",
                            "db_url": "Database URL",
                            "device_class": "Device Class",
                            "name": "Name",
                            "query": "Select Query",
                            "state_class": "State Class",
                            "unit_of_measurement": "Unit of Measure",
                            "value_template": "Value Template"
                        },
                        "data_description": {
                            "column": "Column for returned query to present as state",
                            "db_url": "Database URL, leave empty to use HA recorder database",
                            "device_class": "The type\/class of the sensor to set the icon in the frontend",
                            "name": "Name that will be used for Config Entry and also the Sensor",
                            "query": "Query to run, needs to start with 'SELECT'",
                            "state_class": "The state_class of the sensor",
                            "unit_of_measurement": "Unit of Measure (optional)",
                            "value_template": "Value Template (optional)"
                        }
                    }
                }
            },
            "selector": {
                "device_class": {
                    "options": {
                        "apparent_power": "Apparent power",
                        "aqi": "Air quality index",
                        "atmospheric_pressure": "Atmospheric pressure",
                        "battery": "Battery",
                        "carbon_dioxide": "Carbon dioxide",
                        "carbon_monoxide": "Carbon monoxide",
                        "current": "Current",
                        "data_rate": "Data rate",
                        "data_size": "Data size",
                        "date": "Date",
                        "distance": "Distance",
                        "duration": "Duration",
                        "energy": "Energy",
                        "energy_storage": "Stored energy",
                        "frequency": "Frequency",
                        "gas": "Gas",
                        "humidity": "Humidity",
                        "illuminance": "Illuminance",
                        "irradiance": "Irradiance",
                        "moisture": "Moisture",
                        "monetary": "Balance",
                        "nitrogen_dioxide": "Nitrogen dioxide",
                        "nitrogen_monoxide": "Nitrogen monoxide",
                        "nitrous_oxide": "Nitrous oxide",
                        "none": "No device class",
                        "ozone": "Ozone",
                        "ph": "pH",
                        "pm1": "PM1",
                        "pm10": "PM10",
                        "pm25": "PM2.5",
                        "power": "Power",
                        "power_factor": "Power factor",
                        "precipitation": "Precipitation",
                        "precipitation_intensity": "Precipitation intensity",
                        "pressure": "Pressure",
                        "reactive_power": "Reactive power",
                        "signal_strength": "Signal strength",
                        "sound_pressure": "Sound pressure",
                        "speed": "Speed",
                        "sulphur_dioxide": "Sulphur dioxide",
                        "temperature": "Temperature",
                        "timestamp": "Timestamp",
                        "volatile_organic_compounds": "VOCs",
                        "volatile_organic_compounds_parts": "VOCs",
                        "voltage": "Voltage",
                        "volume": "Volume",
                        "volume_storage": "Stored volume",
                        "water": "Water",
                        "weight": "Weight",
                        "wind_speed": "Wind speed"
                    }
                },
                "state_class": {
                    "options": {
                        "measurement": "Measurement",
                        "none": "No state class",
                        "total": "Total",
                        "total_increasing": "Total increasing"
                    }
                }
            }
        },
        "squeezebox": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_server_found": "No LMS server found."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_server_found": "Could not automatically discover server.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{host}",
                "step": {
                    "edit": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "Edit connection information"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "services": {
                "call_method": {
                    "description": "Calls a custom Squeezebox JSONRPC API.",
                    "fields": {
                        "command": {
                            "description": "Command to pass to Logitech Media Server (p0 in the CLI documentation).",
                            "name": "Command"
                        },
                        "parameters": {
                            "description": "Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation).\n.",
                            "name": "Parameters"
                        }
                    },
                    "name": "Call method"
                },
                "call_query": {
                    "description": "Calls a custom Squeezebox JSONRPC API. Result will be stored in 'query_result' attribute of the Squeezebox entity.\n.",
                    "fields": {
                        "command": {
                            "description": "Command to pass to Logitech Media Server (p0 in the CLI documentation).",
                            "name": "Command"
                        },
                        "parameters": {
                            "description": "Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation).\n.",
                            "name": "Parameters"
                        }
                    },
                    "name": "Call query"
                },
                "sync": {
                    "description": "Adds another player to this player's sync group. If the other player is already in a sync group, it will leave it.\n.",
                    "fields": {
                        "other_player": {
                            "description": "Name of the other Squeezebox player to link.",
                            "name": "Other player"
                        }
                    },
                    "name": "Sync"
                },
                "unsync": {
                    "description": "Removes this player from its sync group.",
                    "name": "Unsync"
                }
            }
        },
        "srp_energy": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_account": "Account ID should be a 9 digit number",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "id": "Account Id",
                            "is_tou": "Is Time of Use Plan",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "energy_usage": {
                        "name": "Energy usage"
                    }
                }
            }
        },
        "starline": {
            "config": {
                "error": {
                    "error_auth_app": "Incorrect application id or secret",
                    "error_auth_mfa": "Incorrect code",
                    "error_auth_user": "Incorrect username or password"
                },
                "step": {
                    "auth_app": {
                        "data": {
                            "app_id": "App ID",
                            "app_secret": "Secret"
                        },
                        "description": "Application ID and secret code from [StarLine developer account](https:\/\/my.starline.ru\/developer)",
                        "title": "Application credentials"
                    },
                    "auth_captcha": {
                        "data": {
                            "captcha_code": "Code from image"
                        },
                        "description": "{captcha_img}",
                        "title": "Captcha"
                    },
                    "auth_mfa": {
                        "data": {
                            "mfa_code": "SMS code"
                        },
                        "description": "Enter the code sent to phone {phone_number}",
                        "title": "Two-factor authorization"
                    },
                    "auth_user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "StarLine account email and password",
                        "title": "User credentials"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "alarm": {
                        "name": "Alarm"
                    },
                    "doors": {
                        "name": "Doors"
                    },
                    "hand_brake": {
                        "name": "Hand brake"
                    },
                    "hood": {
                        "name": "Hood"
                    },
                    "trunk": {
                        "name": "Trunk"
                    }
                },
                "device_tracker": {
                    "location": {
                        "name": "Location"
                    }
                },
                "lock": {
                    "security": {
                        "name": "Security"
                    }
                },
                "sensor": {
                    "balance": {
                        "name": "Balance"
                    },
                    "battery": {
                        "name": "Battery"
                    },
                    "engine_temperature": {
                        "name": "Engine temperature"
                    },
                    "errors": {
                        "name": "OBD errors"
                    },
                    "fuel": {
                        "name": "Fuel volume"
                    },
                    "gsm_signal": {
                        "name": "GSM signal"
                    },
                    "interior_temperature": {
                        "name": "Interior temperature"
                    },
                    "mileage": {
                        "name": "Mileage"
                    }
                },
                "switch": {
                    "additional_channel": {
                        "name": "Additional channel"
                    },
                    "engine": {
                        "name": "Engine"
                    },
                    "horn": {
                        "name": "Horn"
                    },
                    "webasto": {
                        "name": "Webasto"
                    }
                }
            },
            "services": {
                "set_scan_interval": {
                    "description": "Sets update frequency.",
                    "fields": {
                        "scan_interval": {
                            "description": "Update frequency.",
                            "name": "Scan interval"
                        }
                    },
                    "name": "Set scan interval"
                },
                "set_scan_obd_interval": {
                    "description": "Sets OBD info update frequency.",
                    "fields": {
                        "scan_interval": {
                            "description": "Update frequency.",
                            "name": "Scan interval"
                        }
                    },
                    "name": "Set scan OBD interval"
                },
                "update_state": {
                    "description": "Fetches the last state of the devices from the StarLine server.\n.",
                    "name": "Update state"
                }
            }
        },
        "starlink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "currently_obstructed": {
                        "name": "Obstructed"
                    },
                    "heating": {
                        "name": "Heating"
                    },
                    "mast_near_vertical": {
                        "name": "Mast near vertical"
                    },
                    "motors_stuck": {
                        "name": "Motors stuck"
                    },
                    "power_save_idle": {
                        "name": "Idle"
                    },
                    "roaming": {
                        "name": "Roaming mode"
                    },
                    "roaming_mode": {
                        "name": "Roaming mode"
                    },
                    "slow_ethernet": {
                        "name": "Ethernet speeds"
                    },
                    "thermal_throttle": {
                        "name": "Thermal throttle"
                    },
                    "unexpected_location": {
                        "name": "Unexpected location"
                    }
                },
                "device_tracker": {
                    "device_location": {
                        "name": "Device location"
                    }
                },
                "sensor": {
                    "azimuth": {
                        "name": "Azimuth"
                    },
                    "downlink_throughput": {
                        "name": "Downlink throughput"
                    },
                    "elevation": {
                        "name": "Elevation"
                    },
                    "last_boot_time": {
                        "name": "Last boot time"
                    },
                    "ping": {
                        "name": "Ping"
                    },
                    "ping_drop_rate": {
                        "name": "Ping drop rate"
                    },
                    "uplink_throughput": {
                        "name": "Uplink throughput"
                    }
                },
                "switch": {
                    "stowed": {
                        "name": "Stowed"
                    }
                }
            }
        },
        "statistics": {
            "issues": {
                "deprecation_warning_characteristic": {
                    "description": "The configuration parameter `state_characteristic` of the statistics integration will become mandatory.\n\nPlease add `state_characteristic: {characteristic}` to the configuration of sensor `{entity}` to keep the current behavior.\n\nRead the documentation of the statistics integration for further details: https:\/\/www.home-assistant.io\/integrations\/statistics\/",
                    "title": "Mandatory 'state_characteristic' assumed for a Statistics entity"
                },
                "deprecation_warning_size": {
                    "description": "The configuration parameter `sampling_size` of the statistics integration defaulted to the value 20 so far, which will change.\n\nPlease check the configuration for sensor `{entity}` and add suited boundaries, e.g., `sampling_size: 20` to keep the current behavior. The configuration of the statistics integration will become more flexible with version 2022.12.0 and accept either `sampling_size` or `max_age`, or both settings. The request above prepares your configuration for this otherwise breaking change.\n\nRead the documentation of the statistics integration for further details: https:\/\/www.home-assistant.io\/integrations\/statistics\/",
                    "title": "Implicit 'sampling_size' assumed for a Statistics entity"
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads statistics sensors from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "steam_online": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_account": "Invalid account ID",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "description": "The Steam integration needs to be manually re-authenticated\n\nYou can find your key here: {api_key_url}",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "account": "Steam account ID",
                            "api_key": "API Key"
                        },
                        "description": "Use {account_id_url} to find your Steam account ID"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Steam using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Steam YAML configuration has been removed"
                }
            },
            "options": {
                "error": {
                    "unauthorized": "Friends list restricted: Please refer to the documentation on how to see all other friends"
                },
                "step": {
                    "init": {
                        "data": {
                            "accounts": "Names of accounts to be monitored"
                        }
                    }
                }
            }
        },
        "steamist": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network",
                    "not_steamist_device": "Not a steamist device"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({ipaddress})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} ({ipaddress})?"
                    },
                    "pick_device": {
                        "data": {
                            "device": "Device"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "If you leave the host empty, discovery will be used to find devices."
                    }
                }
            }
        },
        "stookalert": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "province": "Province"
                        }
                    }
                }
            }
        },
        "stookwijzer": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "location": "Location"
                        },
                        "description": "Select the location you want to recieve the Stookwijzer information for."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "stookwijzer": {
                        "state": {
                            "blauw": "Blue",
                            "oranje": "Orange",
                            "rood": "Red"
                        }
                    }
                }
            }
        },
        "streamlabswater": {
            "services": {
                "set_away_mode": {
                    "description": "Sets the home\/away mode for a Streamlabs Water Monitor.",
                    "fields": {
                        "away_mode": {
                            "description": "Home or away.",
                            "name": "Away mode"
                        }
                    },
                    "name": "Set away mode"
                }
            }
        },
        "subaru": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "error": {
                    "bad_pin_format": "PIN should be 4 digits",
                    "bad_validation_code_format": "Validation code should be 6 digits",
                    "cannot_connect": "Failed to connect",
                    "incorrect_pin": "Incorrect PIN",
                    "incorrect_validation_code": "Incorrect validation code",
                    "invalid_auth": "Invalid authentication",
                    "two_factor_request_failed": "Request for 2FA code failed, please try again"
                },
                "step": {
                    "pin": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Please enter your MySubaru PIN\nNOTE: All vehicles in account must have the same PIN",
                        "title": "Subaru Starlink Configuration"
                    },
                    "two_factor": {
                        "data": {
                            "contact_method": "Please select a contact method:"
                        },
                        "description": "Two factor authentication required",
                        "title": "Subaru Starlink Configuration"
                    },
                    "two_factor_validate": {
                        "data": {
                            "validation_code": "Validation code"
                        },
                        "description": "Please enter validation code received",
                        "title": "Subaru Starlink Configuration"
                    },
                    "user": {
                        "data": {
                            "country": "Select country",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please enter your MySubaru credentials\nNOTE: Initial setup may take up to 30 seconds",
                        "title": "Subaru Starlink Configuration"
                    }
                }
            },
            "entity": {
                "lock": {
                    "door_locks": {
                        "name": "Door locks"
                    }
                },
                "sensor": {
                    "average_fuel_consumption": {
                        "name": "Average fuel consumption"
                    },
                    "ev_battery_level": {
                        "name": "EV battery level"
                    },
                    "ev_range": {
                        "name": "EV range"
                    },
                    "ev_time_to_full_charge": {
                        "name": "EV time to full charge"
                    },
                    "fuel_level": {
                        "name": "Fuel level"
                    },
                    "odometer": {
                        "name": "Odometer"
                    },
                    "range": {
                        "name": "Range"
                    },
                    "tire_pressure_front_left": {
                        "name": "Tire pressure front left"
                    },
                    "tire_pressure_front_right": {
                        "name": "Tire pressure front right"
                    },
                    "tire_pressure_rear_left": {
                        "name": "Tire pressure rear left"
                    },
                    "tire_pressure_rear_right": {
                        "name": "Tire pressure rear right"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "update_enabled": "Enable vehicle polling"
                        },
                        "description": "When enabled, vehicle polling will send a remote command to your vehicle every 2 hours to obtain new sensor data. Without vehicle polling, new sensor data is only received when the vehicle automatically pushes data (normally after engine shutdown).",
                        "title": "Subaru Starlink Options"
                    }
                }
            },
            "services": {
                "unlock_specific_door": {
                    "description": "Unlocks specific door(s).",
                    "fields": {
                        "door": {
                            "description": "One of the following: 'all', 'driver', 'tailgate'.",
                            "name": "Door"
                        }
                    },
                    "name": "Unlock specific door"
                }
            }
        },
        "sun": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "next_dawn": {
                        "name": "Next dawn"
                    },
                    "next_dusk": {
                        "name": "Next dusk"
                    },
                    "next_midnight": {
                        "name": "Next midnight"
                    },
                    "next_noon": {
                        "name": "Next noon"
                    },
                    "next_rising": {
                        "name": "Next rising"
                    },
                    "next_setting": {
                        "name": "Next setting"
                    },
                    "solar_azimuth": {
                        "name": "Solar azimuth"
                    },
                    "solar_elevation": {
                        "name": "Solar elevation"
                    },
                    "solar_rising": {
                        "name": "Solar rising"
                    }
                }
            },
            "entity_component": {
                "_": {
                    "name": "Sun",
                    "state": {
                        "above_horizon": "Above horizon",
                        "below_horizon": "Below horizon"
                    }
                }
            },
            "title": "Sun"
        },
        "surepetcare": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "services": {
                "set_lock_state": {
                    "description": "Sets lock state.",
                    "fields": {
                        "flap_id": {
                            "description": "Flap ID to lock\/unlock.",
                            "name": "Flap ID"
                        },
                        "lock_state": {
                            "description": "New lock state.",
                            "name": "Lock state"
                        }
                    },
                    "name": "Set lock state"
                },
                "set_pet_location": {
                    "description": "Sets pet location.",
                    "fields": {
                        "location": {
                            "description": "Pet location (Inside or Outside).",
                            "name": "Location"
                        },
                        "pet_name": {
                            "description": "Name of pet.",
                            "name": "Pet name"
                        }
                    },
                    "name": "Set pet location"
                }
            }
        },
        "switch": {
            "device_automation": {
                "action_type": {
                    "toggle": "Toggle {entity_name}",
                    "turn_off": "Turn off {entity_name}",
                    "turn_on": "Turn on {entity_name}"
                },
                "condition_type": {
                    "is_off": "{entity_name} is off",
                    "is_on": "{entity_name} is on"
                },
                "trigger_type": {
                    "changed_states": "{entity_name} turned on or off",
                    "turned_off": "{entity_name} turned off",
                    "turned_on": "{entity_name} turned on"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Switch",
                    "state": {
                        "off": "Off",
                        "on": "On"
                    }
                },
                "outlet": {
                    "name": "Outlet"
                },
                "switch": {
                    "name": "Switch"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "toggle": {
                    "description": "Toggles a switch on\/off.",
                    "name": "Toggle"
                },
                "turn_off": {
                    "description": "Turns a switch off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns a switch on.",
                    "name": "Turn on"
                }
            },
            "title": "Switch"
        },
        "switch_as_x": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "entity_id": "Switch",
                            "target_domain": "New Type"
                        },
                        "description": "Pick a switch that you want to show up in Home Assistant as a light, cover or anything else. The original switch will be hidden."
                    }
                }
            },
            "title": "Change device type of a switch"
        },
        "switchbee": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Set up SwitchBee integration with Home Assistant."
                    }
                }
            }
        },
        "switchbot": {
            "config": {
                "abort": {
                    "already_configured_device": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No supported SwitchBot devices found in range; If the device is in range, ensure the scanner has active scanning enabled, as SwitchBot devices cannot be discovered with passive scans. Active scans can be disabled once the device is configured. If you need clarification on whether the device is in-range, download the diagnostics for the integration that provides your Bluetooth adapter or proxy and check if the MAC address of the SwitchBot device is present.",
                    "switchbot_unsupported_type": "Unsupported Switchbot Type.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "auth_failed": "Authentication failed: {error_detail}",
                    "encryption_key_invalid": "Key ID or Encryption key is invalid"
                },
                "flow_title": "{name} ({address})",
                "step": {
                    "confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "lock_auth": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Please provide your SwitchBot app username and password. This data won't be saved and only used to retrieve your locks encryption key. Usernames and passwords are case sensitive."
                    },
                    "lock_choose_method": {
                        "description": "A SwitchBot lock can be set up in Home Assistant in two different ways.\n\nYou can enter the key id and encryption key yourself, or Home Assistant can import them from your SwitchBot account.",
                        "menu_options": {
                            "lock_auth": "SwitchBot account (recommended)",
                            "lock_key": "Enter lock encryption key manually"
                        }
                    },
                    "lock_key": {
                        "data": {
                            "encryption_key": "Encryption key",
                            "key_id": "Key ID"
                        },
                        "description": "The {name} device requires encryption key, details on how to obtain it can be found in the documentation."
                    },
                    "password": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The {name} device requires a password"
                    },
                    "user": {
                        "data": {
                            "address": "Device address"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "calibration": {
                        "name": "Calibration"
                    },
                    "door_auto_lock_paused": {
                        "name": "Auto-lock paused"
                    },
                    "door_open": {
                        "name": "Door"
                    },
                    "door_timeout": {
                        "name": "Timeout"
                    },
                    "door_unclosed_alarm": {
                        "name": "Unclosed alarm"
                    },
                    "door_unlocked_alarm": {
                        "name": "Unlocked alarm"
                    },
                    "light": {
                        "name": "Light"
                    },
                    "motion": {
                        "name": "Motion"
                    }
                },
                "cover": {
                    "cover": {
                        "state_attributes": {
                            "last_run_success": {
                                "state": {
                                    "false": "Problem",
                                    "true": "OK"
                                }
                            }
                        }
                    }
                },
                "humidifier": {
                    "humidifier": {
                        "state_attributes": {
                            "last_run_success": {
                                "state": {
                                    "false": "Problem",
                                    "true": "OK"
                                }
                            }
                        }
                    }
                },
                "lock": {
                    "lock": {
                        "state_attributes": {
                            "last_run_success": {
                                "state": {
                                    "false": "Problem",
                                    "true": "OK"
                                }
                            }
                        }
                    }
                },
                "sensor": {
                    "battery": {
                        "name": "Battery"
                    },
                    "bluetooth_signal": {
                        "name": "Bluetooth signal"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "light_level": {
                        "name": "Light level"
                    },
                    "power": {
                        "name": "Power"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "wifi_signal": {
                        "name": "Wi-Fi signal"
                    }
                },
                "switch": {
                    "bot": {
                        "state_attributes": {
                            "last_run_success": {
                                "state": {
                                    "false": "Problem",
                                    "true": "OK"
                                }
                            },
                            "switch_mode": {
                                "state": {
                                    "false": "Momentary",
                                    "true": "Pull\/Retract"
                                }
                            }
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "retry_count": "Retry count"
                        }
                    }
                }
            }
        },
        "switchbot_cloud": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "api_token": "API Token"
                        }
                    }
                }
            }
        },
        "switcher_kis": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "button": {
                    "assume_off": {
                        "name": "Assume off"
                    },
                    "assume_on": {
                        "name": "Assume on"
                    },
                    "vertical_swing_off": {
                        "name": "Vertical swing off"
                    },
                    "vertical_swing_on": {
                        "name": "Vertical swing on"
                    }
                },
                "sensor": {
                    "auto_shutdown": {
                        "name": "Auto shutdown"
                    },
                    "remaining_time": {
                        "name": "Remaining time"
                    }
                }
            },
            "services": {
                "set_auto_off": {
                    "description": "Updates Switcher device auto off setting.",
                    "fields": {
                        "auto_off": {
                            "description": "Time period string containing hours and minutes.",
                            "name": "Auto off"
                        }
                    },
                    "name": "Set auto off"
                },
                "turn_on_with_timer": {
                    "description": "Turns on the Switcher device with timer.",
                    "fields": {
                        "timer_minutes": {
                            "description": "Time to turn on.",
                            "name": "Timer"
                        }
                    },
                    "name": "Turn on with timer"
                }
            }
        },
        "syncthing": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "title": "Set up Syncthing integration",
                            "token": "Token",
                            "url": "URL",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            }
        },
        "syncthru": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "invalid_url": "Invalid URL",
                    "syncthru_not_supported": "Device does not support SyncThru",
                    "unknown_state": "Printer state unknown, verify URL and network connectivity"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "data": {
                            "name": "Name",
                            "url": "Web interface URL"
                        }
                    },
                    "user": {
                        "data": {
                            "name": "Name",
                            "url": "Web interface URL"
                        }
                    }
                }
            }
        },
        "synology_dsm": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_mac_address": "The MAC address is missing from the zeroconf record",
                    "reauth_successful": "Re-authentication was successful",
                    "reconfigure_successful": "Re-configuration was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "missing_data": "Missing data: please retry later or an other configuration",
                    "otp_failed": "Two-step authentication failed, retry with a new pass code",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "2sa": {
                        "data": {
                            "otp_code": "Code"
                        },
                        "title": "Synology DSM: two-step authentication"
                    },
                    "link": {
                        "data": {
                            "password": "Password",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Do you want to set up {name} ({host})?"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Reauthenticate Synology DSM"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "disk_below_remain_life_thr": {
                        "name": "Below min remaining life"
                    },
                    "disk_exceed_bad_sector_thr": {
                        "name": "Exceeded max bad sectors"
                    },
                    "status": {
                        "name": "Security status"
                    }
                },
                "sensor": {
                    "cpu_15min_load": {
                        "name": "CPU load average (15 min)"
                    },
                    "cpu_1min_load": {
                        "name": "CPU load average (1 min)"
                    },
                    "cpu_5min_load": {
                        "name": "CPU load average (5 min)"
                    },
                    "cpu_other_load": {
                        "name": "CPU utilization (other)"
                    },
                    "cpu_system_load": {
                        "name": "CPU utilization (system)"
                    },
                    "cpu_total_load": {
                        "name": "CPU utilization (total)"
                    },
                    "cpu_user_load": {
                        "name": "CPU utilization (user)"
                    },
                    "disk_smart_status": {
                        "name": "Status (smart)"
                    },
                    "disk_status": {
                        "name": "Status"
                    },
                    "disk_temp": {
                        "name": "Temperature"
                    },
                    "memory_available_real": {
                        "name": "Memory available (real)"
                    },
                    "memory_available_swap": {
                        "name": "Memory available (swap)"
                    },
                    "memory_cached": {
                        "name": "Memory cached"
                    },
                    "memory_real_usage": {
                        "name": "Memory usage (real)"
                    },
                    "memory_size": {
                        "name": "Memory size"
                    },
                    "memory_total_real": {
                        "name": "Memory total (real)"
                    },
                    "memory_total_swap": {
                        "name": "Memory total (swap)"
                    },
                    "network_down": {
                        "name": "Download throughput"
                    },
                    "network_up": {
                        "name": "Upload throughput"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "uptime": {
                        "name": "Last boot"
                    },
                    "volume_disk_temp_avg": {
                        "name": "Average disk temp"
                    },
                    "volume_disk_temp_max": {
                        "name": "Maximum disk temp"
                    },
                    "volume_percentage_used": {
                        "name": "Volume used"
                    },
                    "volume_size_total": {
                        "name": "Total size"
                    },
                    "volume_size_used": {
                        "name": "Used space"
                    },
                    "volume_status": {
                        "name": "Status"
                    }
                },
                "switch": {
                    "home_mode": {
                        "name": "Home mode"
                    }
                },
                "update": {
                    "update": {
                        "name": "DSM update"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Minutes between scans",
                            "snap_profile_type": "Quality level of camera snapshots (0:high 1:medium 2:low)",
                            "timeout": "Timeout (seconds)"
                        }
                    }
                }
            },
            "services": {
                "reboot": {
                    "description": "Reboots the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.",
                    "fields": {
                        "serial": {
                            "description": "Serial of the NAS to reboot; required when multiple NAS are configured.",
                            "name": "Serial"
                        }
                    },
                    "name": "Reboot"
                },
                "shutdown": {
                    "description": "Shutdowns the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.",
                    "fields": {
                        "serial": {
                            "description": "Serial of the NAS to shutdown; required when multiple NAS are configured.",
                            "name": "Serial"
                        }
                    },
                    "name": "Shutdown"
                }
            }
        },
        "system_bridge": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "authenticate": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "Please enter the API Key you set in your configuration for {name}."
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "host": "Host",
                            "port": "Port"
                        },
                        "description": "Please enter your connection details."
                    }
                }
            },
            "entity": {
                "media_player": {
                    "media": {
                        "name": "Media"
                    }
                },
                "sensor": {
                    "amount_memory_used": {
                        "name": "Amount of memory used"
                    },
                    "battery_time_remaining": {
                        "name": "Battery time remaining"
                    },
                    "boot_time": {
                        "name": "Boot time"
                    },
                    "cpu_power_package": {
                        "name": "CPU package power"
                    },
                    "cpu_speed": {
                        "name": "CPU speed"
                    },
                    "cpu_temperature": {
                        "name": "CPU temperature"
                    },
                    "cpu_voltage": {
                        "name": "CPU voltage"
                    },
                    "displays_connected": {
                        "name": "Displays connected"
                    },
                    "kernel": {
                        "name": "Kernel"
                    },
                    "load": {
                        "name": "Load"
                    },
                    "memory_free": {
                        "name": "Memory free"
                    },
                    "memory_used": {
                        "name": "Memory used"
                    },
                    "os": {
                        "name": "Operating system"
                    },
                    "version": {
                        "name": "Version"
                    },
                    "version_latest": {
                        "name": "Latest version"
                    }
                }
            },
            "services": {
                "open_path": {
                    "description": "Opens a file on the server using the default application.",
                    "fields": {
                        "bridge": {
                            "description": "The server to talk to.",
                            "name": "Bridge"
                        },
                        "path": {
                            "description": "Path to open.",
                            "name": "Path"
                        }
                    },
                    "name": "Open path"
                },
                "open_url": {
                    "description": "Opens a URL on the server using the default application.",
                    "fields": {
                        "bridge": {
                            "description": "The server to talk to.",
                            "name": "Bridge"
                        },
                        "url": {
                            "description": "URL to open.",
                            "name": "URL"
                        }
                    },
                    "name": "Open URL"
                },
                "power_command": {
                    "description": "Sends a power command to the system.",
                    "fields": {
                        "bridge": {
                            "description": "The server to send the command to.",
                            "name": "Bridge"
                        },
                        "command": {
                            "description": "Command to call.",
                            "name": "Command"
                        }
                    },
                    "name": "Power command"
                },
                "send_keypress": {
                    "description": "Sends a keyboard keypress.",
                    "fields": {
                        "bridge": {
                            "description": "The server to send the command to.",
                            "name": "Bridge"
                        },
                        "key": {
                            "description": "Key to press. List available here: http:\/\/robotjs.io\/docs\/syntax#keys.",
                            "name": "Key"
                        }
                    },
                    "name": "Send keyboard keypress"
                },
                "send_text": {
                    "description": "Sends text for the server to type.",
                    "fields": {
                        "bridge": {
                            "description": "The server to send the command to.",
                            "name": "Bridge"
                        },
                        "text": {
                            "description": "Text to type.",
                            "name": "Text"
                        }
                    },
                    "name": "Send keyboard text"
                }
            }
        },
        "system_health": {
            "title": "System Health"
        },
        "system_log": {
            "selector": {
                "level": {
                    "options": {
                        "critical": "Critical",
                        "debug": "Debug",
                        "error": "Error",
                        "info": "Info",
                        "warning": "Warning"
                    }
                }
            },
            "services": {
                "clear": {
                    "description": "Clears all log entries.",
                    "name": "Clear all"
                },
                "write": {
                    "description": "Write log entry.",
                    "fields": {
                        "level": {
                            "description": "Log level.",
                            "name": "Level"
                        },
                        "logger": {
                            "description": "Logger name under which to log the message. Defaults to `system_log.external`.",
                            "name": "Logger"
                        },
                        "message": {
                            "description": "Message to log.",
                            "name": "Message"
                        }
                    },
                    "name": "Write"
                }
            }
        },
        "tado": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_homes": "There are no homes linked to this tado account.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "Connect to your Tado account"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "connection_state": {
                        "name": "Connection state"
                    },
                    "early_start": {
                        "name": "Early start"
                    },
                    "overlay": {
                        "name": "Overlay"
                    }
                },
                "climate": {
                    "tado": {
                        "state_attributes": {
                            "preset_mode": {
                                "state": {
                                    "auto": "Auto"
                                }
                            }
                        }
                    }
                },
                "sensor": {
                    "ac": {
                        "name": "AC"
                    },
                    "automatic_geofencing": {
                        "name": "Automatic geofencing"
                    },
                    "geofencing_mode": {
                        "name": "Geofencing mode"
                    },
                    "heating": {
                        "name": "Heating"
                    },
                    "outdoor_temperature": {
                        "name": "Outdoor temperature"
                    },
                    "solar_percentage": {
                        "name": "Solar percentage"
                    },
                    "tado_mode": {
                        "name": "Tado mode"
                    },
                    "weather_condition": {
                        "name": "Weather condition"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "fallback": "Choose fallback mode."
                        },
                        "description": "Fallback mode lets you choose when to fallback to Smart Schedule from your manual zone overlay. (NEXT_TIME_BLOCK:= Change at next Smart Schedule change; MANUAL:= Dont change until you cancel; TADO_DEFAULT:= Change based on your setting in Tado App).",
                        "title": "Adjust Tado options."
                    }
                }
            },
            "services": {
                "set_climate_temperature_offset": {
                    "description": "Sets the temperature offset of climate entities.",
                    "fields": {
                        "offset": {
                            "description": "Offset you would like (depending on your device).",
                            "name": "Offset"
                        }
                    },
                    "name": "Set climate temperature offset"
                },
                "set_climate_timer": {
                    "description": "Turns on climate entities for a set time.",
                    "fields": {
                        "requested_overlay": {
                            "description": "Choose this or Time Period. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on tado app setting.",
                            "name": "Overlay"
                        },
                        "temperature": {
                            "description": "Temperature to set climate entity to.",
                            "name": "Temperature"
                        },
                        "time_period": {
                            "description": "Choose this or Overlay. Set the time period for the change if you want to be specific. Alternatively use Overlay.",
                            "name": "Time period"
                        }
                    },
                    "name": "Set climate timer"
                },
                "set_water_heater_timer": {
                    "description": "Turns on water heater for a set time.",
                    "fields": {
                        "temperature": {
                            "description": "Temperature to set heater to.",
                            "name": "Temperature"
                        },
                        "time_period": {
                            "description": "Set the time period for the boost.",
                            "name": "Time period"
                        }
                    },
                    "name": "Set water heater timer"
                }
            }
        },
        "tag": {
            "title": "Tag"
        },
        "tailscale": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "Tailscale API tokens are valid for 90-days. You can create a fresh Tailscale API key at https:\/\/login.tailscale.com\/admin\/settings\/authkeys."
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "tailnet": "Tailnet"
                        },
                        "description": "This integration monitors your Tailscale network, it **DOES NOT** make your Home Assistant accessible via Tailscale VPN. \n\nTo authenticate with Tailscale you'll need to create an API key at {authkeys_url}.\n\nA Tailnet is the name of your Tailscale network. You can find it in the top left corner in the Tailscale Admin Panel (beside the Tailscale logo)."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "client": {
                        "name": "Client"
                    },
                    "client_supports_hair_pinning": {
                        "name": "Supports hairpinning"
                    },
                    "client_supports_ipv6": {
                        "name": "Supports IPv6"
                    },
                    "client_supports_pcp": {
                        "name": "Supports PCP"
                    },
                    "client_supports_pmp": {
                        "name": "Supports NAT-PMP"
                    },
                    "client_supports_udp": {
                        "name": "Supports UDP"
                    },
                    "client_supports_upnp": {
                        "name": "Supports UPnP"
                    }
                },
                "sensor": {
                    "expires": {
                        "name": "Expires"
                    },
                    "ip": {
                        "name": "IP address"
                    },
                    "last_seen": {
                        "name": "Last seen"
                    }
                }
            }
        },
        "tami4": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_phone": "Invalid phone number, please use the following format: +972xxxxxxxx",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "otp": {
                        "data": {
                            "otp": "SMS Code"
                        },
                        "description": "Enter the code you received via SMS",
                        "title": "SMS Verification"
                    },
                    "user": {
                        "data": {
                            "phone": "Phone Number"
                        },
                        "description": "Enter your phone number (same as what you used to register to the tami4 app)",
                        "title": "SMS Verification"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "filter_last_replacement": {
                        "name": "Filter last replacement"
                    },
                    "filter_litters_passed": {
                        "name": "Filter water passed"
                    },
                    "filter_status": {
                        "name": "Filter status"
                    },
                    "filter_upcoming_replacement": {
                        "name": "Filter upcoming replacement"
                    },
                    "uv_last_replacement": {
                        "name": "UV last replacement"
                    },
                    "uv_status": {
                        "name": "UV status"
                    },
                    "uv_upcoming_replacement": {
                        "name": "UV upcoming replacement"
                    }
                }
            }
        },
        "tankerkoenig": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "no_stations": "Could not find any station in range."
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        }
                    },
                    "select_station": {
                        "data": {
                            "stations": "Stations"
                        },
                        "description": "Found {stations_count} stations in radius",
                        "title": "Select stations to add"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "fuel_types": "Fuel types",
                            "location": "Location",
                            "name": "Region name",
                            "radius": "Search radius",
                            "stations": "Additional fuel stations"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "status": {
                        "name": "Status"
                    }
                },
                "sensor": {
                    "diesel": {
                        "name": "Diesel"
                    },
                    "e10": {
                        "name": "Super E10"
                    },
                    "e5": {
                        "name": "Super"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "show_on_map": "Show stations on map",
                            "stations": "Stations"
                        },
                        "title": "Tankerkoenig options"
                    }
                }
            }
        },
        "tasmota": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_discovery_topic": "Invalid discovery topic prefix."
                },
                "step": {
                    "config": {
                        "data": {
                            "discovery_prefix": "Discovery topic prefix"
                        }
                    },
                    "confirm": {
                        "description": "Do you want to set up Tasmota?"
                    }
                }
            },
            "issues": {
                "topic_duplicated": {
                    "description": "Several Tasmota devices are sharing the topic {topic}.\n\n Tasmota devices with this problem: {offenders}.",
                    "title": "Several Tasmota devices are sharing the same topic"
                },
                "topic_no_prefix": {
                    "description": "Tasmota device {name} with IP {ip} does not include `%prefix%` in its fulltopic.\n\nEntities for this devices are disabled until the configuration has been corrected.",
                    "title": "Tasmota device {name} has an invalid MQTT topic"
                }
            }
        },
        "tautulli": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "To find your API key, open the Tautulli webpage and navigate to Settings and then to Web interface. The API key will be at the bottom of that page.",
                        "title": "Re-authenticate Tautulli"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "url": "URL",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "To find your API key, open the Tautulli webpage and navigate to Settings and then to Web interface. The API key will be at the bottom of that page.\n\nExample of the URL: ```http:\/\/192.168.0.10:8181``` with 8181 being the default port."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "full_title": {
                        "name": "Full title"
                    },
                    "lan_bandwidth": {
                        "name": "LAN bandwidth"
                    },
                    "progress": {
                        "name": "Progress"
                    },
                    "session_thumb": {
                        "name": "Session thumbnail"
                    },
                    "state": {
                        "name": "State"
                    },
                    "stream_count_direct_play": {
                        "name": "Direct plays"
                    },
                    "stream_count_direct_stream": {
                        "name": "Direct streams"
                    },
                    "stream_count_transcode": {
                        "name": "Transcodes"
                    },
                    "stream_resolution": {
                        "name": "Stream resolution"
                    },
                    "top_movies": {
                        "name": "Top movie"
                    },
                    "top_tv": {
                        "name": "Top TV show"
                    },
                    "top_user": {
                        "name": "Top user"
                    },
                    "total_bandwidth": {
                        "name": "Total bandwidth"
                    },
                    "transcode_decision": {
                        "name": "Transcode decision"
                    },
                    "video_resolution": {
                        "name": "Video resolution"
                    },
                    "wan_bandwidth": {
                        "name": "WAN bandwidth"
                    },
                    "watching_count": {
                        "name": "Watching"
                    }
                }
            }
        },
        "telegram": {
            "services": {
                "reload": {
                    "description": "Reloads telegram notify services.",
                    "name": "Reload"
                }
            }
        },
        "telegram_bot": {
            "services": {
                "answer_callback_query": {
                    "description": "Responds to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.",
                    "fields": {
                        "callback_query_id": {
                            "description": "Unique id of the callback response.",
                            "name": "Callback query ID"
                        },
                        "message": {
                            "description": "Unformatted text message body of the notification.",
                            "name": "Message"
                        },
                        "show_alert": {
                            "description": "Show a permanent notification.",
                            "name": "Show alert"
                        },
                        "timeout": {
                            "description": "Timeout for sending the answer. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        }
                    },
                    "name": "Answer callback query"
                },
                "delete_message": {
                    "description": "Deletes a previously sent message.",
                    "fields": {
                        "chat_id": {
                            "description": "The chat_id where to delete the message.",
                            "name": "Chat ID"
                        },
                        "message_id": {
                            "description": "Id of the message to delete.",
                            "name": "Message ID"
                        }
                    },
                    "name": "Delete message"
                },
                "edit_caption": {
                    "description": "Edits the caption of a previously sent message.",
                    "fields": {
                        "caption": {
                            "description": "Message body of the notification.",
                            "name": "Caption"
                        },
                        "chat_id": {
                            "description": "The chat_id where to edit the caption.",
                            "name": "Chat ID"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "message_id": {
                            "description": "Id of the message to edit.",
                            "name": "Message ID"
                        }
                    },
                    "name": "Edit caption"
                },
                "edit_message": {
                    "description": "Edits a previously sent message.",
                    "fields": {
                        "chat_id": {
                            "description": "The chat_id where to edit the message.",
                            "name": "Chat ID"
                        },
                        "disable_web_page_preview": {
                            "description": "Disables link previews for links in the message.",
                            "name": "Disable web page preview"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "message": {
                            "description": "Message body of the notification.",
                            "name": "Message"
                        },
                        "message_id": {
                            "description": "Id of the message to edit.",
                            "name": "Message ID"
                        },
                        "parse_mode": {
                            "description": "Parser for the message text.",
                            "name": "Parse mode"
                        },
                        "title": {
                            "description": "Optional title for your notification. Will be composed as '%title\n%message'.",
                            "name": "Title"
                        }
                    },
                    "name": "Edit message"
                },
                "edit_replymarkup": {
                    "description": "Edit the inline keyboard of a previously sent message.",
                    "fields": {
                        "chat_id": {
                            "description": "The chat_id where to edit the reply_markup.",
                            "name": "Chat ID"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "message_id": {
                            "description": "Id of the message to edit.",
                            "name": "Message ID"
                        }
                    },
                    "name": "Edit reply markup"
                },
                "send_animation": {
                    "description": "Sends an animation.",
                    "fields": {
                        "authentication": {
                            "description": "Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.",
                            "name": "Authentication method"
                        },
                        "caption": {
                            "description": "The title of the animation.",
                            "name": "Caption"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "file": {
                            "description": "Local path to a GIF or H.264\/MPEG-4 AVC video without sound.",
                            "name": "File"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "parse_mode": {
                            "description": "Parser for the message text.",
                            "name": "Parse Mode"
                        },
                        "password": {
                            "description": "Password (or bearer token) for a URL which require HTTP authentication.",
                            "name": "Password"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send sticker. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        },
                        "url": {
                            "description": "Remote path to a GIF or H.264\/MPEG-4 AVC video without sound.",
                            "name": "URL"
                        },
                        "username": {
                            "description": "Username for a URL which require HTTP authentication.",
                            "name": "Username"
                        },
                        "verify_ssl": {
                            "description": "Enable or disable SSL certificate verification. Set to false if you're downloading the file from a URL and you don't want to validate the SSL certificate of the server.",
                            "name": "Verify SSL"
                        }
                    },
                    "name": "Send animation"
                },
                "send_document": {
                    "description": "Sends a document.",
                    "fields": {
                        "authentication": {
                            "description": "Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.",
                            "name": "Authentication method"
                        },
                        "caption": {
                            "description": "The title of the document.",
                            "name": "Caption"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "file": {
                            "description": "Local path to a document.",
                            "name": "File"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "parse_mode": {
                            "description": "Parser for the message text.",
                            "name": "Parse mode"
                        },
                        "password": {
                            "description": "Password (or bearer token) for a URL which require HTTP authentication.",
                            "name": "Password"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send document. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        },
                        "url": {
                            "description": "Remote path to a document.",
                            "name": "URL"
                        },
                        "username": {
                            "description": "Username for a URL which require HTTP authentication.",
                            "name": "Username"
                        },
                        "verify_ssl": {
                            "description": "Enable or disable SSL certificate verification. Set to false if you're downloading the file from a URL and you don't want to validate the SSL certificate of the server.",
                            "name": "Verify SSL"
                        }
                    },
                    "name": "Send document"
                },
                "send_location": {
                    "description": "Sends a location.",
                    "fields": {
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "latitude": {
                            "description": "The latitude to send.",
                            "name": "Latitude"
                        },
                        "longitude": {
                            "description": "The longitude to send.",
                            "name": "Longitude"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send photo. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        }
                    },
                    "name": "Send location"
                },
                "send_message": {
                    "description": "Sends a notification.",
                    "fields": {
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "disable_web_page_preview": {
                            "description": "Disables link previews for links in the message.",
                            "name": "Disable web page preview"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard.",
                            "name": "Keyboard"
                        },
                        "message": {
                            "description": "Message body of the notification.",
                            "name": "Message"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "parse_mode": {
                            "description": "Parser for the message text.",
                            "name": "Parse mode"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send message. Will help with timeout errors (poor internet connection, etc)s.",
                            "name": "Timeout"
                        },
                        "title": {
                            "description": "Optional title for your notification. Will be composed as '%title\n%message'.",
                            "name": "Title"
                        }
                    },
                    "name": "Send message"
                },
                "send_photo": {
                    "description": "Sends a photo.",
                    "fields": {
                        "authentication": {
                            "description": "Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.",
                            "name": "Authentication method"
                        },
                        "caption": {
                            "description": "The title of the image.",
                            "name": "Caption"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "file": {
                            "description": "Local path to an image.",
                            "name": "File"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "parse_mode": {
                            "description": "Parser for the message text.",
                            "name": "Parse mode"
                        },
                        "password": {
                            "description": "Password (or bearer token) for a URL which require HTTP authentication.",
                            "name": "Password"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send photo. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        },
                        "url": {
                            "description": "Remote path to an image.",
                            "name": "URL"
                        },
                        "username": {
                            "description": "Username for a URL which require HTTP authentication.",
                            "name": "Username"
                        },
                        "verify_ssl": {
                            "description": "Enable or disable SSL certificate verification. Set to false if you're downloading the file from a URL and you don't want to validate the SSL certificate of the server.",
                            "name": "Verify SSL"
                        }
                    },
                    "name": "Send photo"
                },
                "send_poll": {
                    "description": "Sends a poll.",
                    "fields": {
                        "allows_multiple_answers": {
                            "description": "If the poll allows multiple answers, defaults to False.",
                            "name": "Allow multiple answers"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "is_anonymous": {
                            "description": "If the poll needs to be anonymous, defaults to True.",
                            "name": "Is anonymous"
                        },
                        "open_period": {
                            "description": "Amount of time in seconds the poll will be active after creation, 5-600.",
                            "name": "Open period"
                        },
                        "options": {
                            "description": "List of answer options, 2-10 strings 1-100 characters each.",
                            "name": "Options"
                        },
                        "question": {
                            "description": "Poll question, 1-300 characters.",
                            "name": "Question"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send poll. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        }
                    },
                    "name": "Send poll"
                },
                "send_sticker": {
                    "description": "Sends a sticker.",
                    "fields": {
                        "authentication": {
                            "description": "Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.",
                            "name": "Authentication method"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "file": {
                            "description": "Local path to a static .webp or animated .tgs sticker.",
                            "name": "File"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "password": {
                            "description": "Password (or bearer token) for a URL which require HTTP authentication.",
                            "name": "Password"
                        },
                        "sticker_id": {
                            "description": "ID of a sticker that exists on telegram servers.",
                            "name": "Sticker ID"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send sticker. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        },
                        "url": {
                            "description": "Remote path to a static .webp or animated .tgs sticker.",
                            "name": "URL"
                        },
                        "username": {
                            "description": "Username for a URL which require HTTP authentication.",
                            "name": "Username"
                        },
                        "verify_ssl": {
                            "description": "Enable or disable SSL certificate verification. Set to false if you're downloading the file from a URL and you don't want to validate the SSL certificate of the server.",
                            "name": "Verify SSL"
                        }
                    },
                    "name": "Send sticker"
                },
                "send_video": {
                    "description": "Sends a video.",
                    "fields": {
                        "authentication": {
                            "description": "Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.",
                            "name": "Authentication method"
                        },
                        "caption": {
                            "description": "The title of the video.",
                            "name": "Caption"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "file": {
                            "description": "Local path to a video.",
                            "name": "File"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "parse_mode": {
                            "description": "Parser for the message text.",
                            "name": "Parse mode"
                        },
                        "password": {
                            "description": "Password (or bearer token) for a URL which require HTTP authentication.",
                            "name": "Password"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send video. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        },
                        "url": {
                            "description": "Remote path to a video.",
                            "name": "URL"
                        },
                        "username": {
                            "description": "Username for a URL which require HTTP authentication.",
                            "name": "Username"
                        },
                        "verify_ssl": {
                            "description": "Enable or disable SSL certificate verification. Set to false if you're downloading the file from a URL and you don't want to validate the SSL certificate of the server.",
                            "name": "Verify SSL"
                        }
                    },
                    "name": "Send video"
                },
                "send_voice": {
                    "description": "Sends a voice message.",
                    "fields": {
                        "authentication": {
                            "description": "Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.",
                            "name": "Authentication method"
                        },
                        "caption": {
                            "description": "The title of the voice message.",
                            "name": "Caption"
                        },
                        "disable_notification": {
                            "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
                            "name": "Disable notification"
                        },
                        "file": {
                            "description": "Local path to a voice message.",
                            "name": "File"
                        },
                        "inline_keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
                            "name": "Inline keyboard"
                        },
                        "keyboard": {
                            "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
                            "name": "Keyboard"
                        },
                        "message_tag": {
                            "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}.",
                            "name": "Message tag"
                        },
                        "password": {
                            "description": "Password (or bearer token) for a URL which require HTTP authentication.",
                            "name": "Password"
                        },
                        "target": {
                            "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
                            "name": "Target"
                        },
                        "timeout": {
                            "description": "Timeout for send voice. Will help with timeout errors (poor internet connection, etc).",
                            "name": "Timeout"
                        },
                        "url": {
                            "description": "Remote path to a voice message.",
                            "name": "URL"
                        },
                        "username": {
                            "description": "Username for a URL which require HTTP authentication.",
                            "name": "Username"
                        },
                        "verify_ssl": {
                            "description": "Enable or disable SSL certificate verification. Set to false if you're downloading the file from a URL and you don't want to validate the SSL certificate of the server.",
                            "name": "Verify SSL"
                        }
                    },
                    "name": "Send voice"
                }
            }
        },
        "tellduslive": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "unknown": "Unexpected error",
                    "unknown_authorize_url_generation": "Unknown error generating an authorize URL."
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "auth": {
                        "description": "To link your TelldusLive account:\n 1. Click the link below\n 2. Login to Telldus Live\n 3. Authorize **{app_name}** (click **Yes**).\n 4. Come back here and click **SUBMIT**.\n\n [Link TelldusLive account]({auth_url})",
                        "title": "Authenticate against TelldusLive"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Empty",
                        "title": "Pick endpoint."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "dew_point": {
                        "name": "Dew point"
                    },
                    "uv": {
                        "name": "UV"
                    },
                    "wind_average": {
                        "name": "Wind average"
                    },
                    "wind_direction": {
                        "name": "Wind direction"
                    },
                    "wind_gust": {
                        "name": "Wind gust"
                    }
                }
            }
        },
        "template": {
            "config": {
                "step": {
                    "binary_sensor": {
                        "data": {
                            "device_class": "Device class",
                            "name": "Name",
                            "state": "State template",
                            "state_template": "State template"
                        },
                        "title": "Template binary sensor"
                    },
                    "sensor": {
                        "data": {
                            "device_class": "Device class",
                            "name": "Name",
                            "state": "State template",
                            "state_class": "State class",
                            "state_template": "State template",
                            "unit_of_measurement": "Unit of measurement"
                        },
                        "title": "Template sensor"
                    },
                    "user": {
                        "description": "This helper allow you to create helper entities that define their state using a template.",
                        "menu_options": {
                            "binary_sensor": "Template a binary sensor",
                            "sensor": "Template a sensor"
                        },
                        "title": "Template helper"
                    }
                }
            },
            "options": {
                "step": {
                    "binary_sensor": {
                        "data": {
                            "device_class": "Device class",
                            "state": "State template",
                            "state_template": "State template"
                        },
                        "title": "Template binary sensor"
                    },
                    "sensor": {
                        "data": {
                            "device_class": "Device class",
                            "state": "State template",
                            "state_class": "State class",
                            "state_template": "State template",
                            "unit_of_measurement": "Unit of measurement"
                        },
                        "title": "Template sensor"
                    }
                }
            },
            "selector": {
                "binary_sensor_device_class": {
                    "options": {
                        "battery": "Battery",
                        "battery_charging": "Charging",
                        "carbon_monoxide": "Carbon monoxide",
                        "cold": "Cold",
                        "connectivity": "Connectivity",
                        "door": "Door",
                        "garage_door": "Garage door",
                        "gas": "Gas",
                        "heat": "Heat",
                        "light": "Light",
                        "lock": "Lock",
                        "moisture": "Moisture",
                        "motion": "Motion",
                        "moving": "Moving",
                        "none": "No device class",
                        "occupancy": "Occupancy",
                        "opening": "Opening",
                        "plug": "Plug",
                        "power": "Power",
                        "presence": "Presence",
                        "problem": "Problem",
                        "running": "Running",
                        "safety": "Safety",
                        "smoke": "Smoke",
                        "sound": "Sound",
                        "update": "Update",
                        "vibration": "Vibration",
                        "window": "Window"
                    }
                },
                "sensor_device_class": {
                    "options": {
                        "apparent_power": "Apparent power",
                        "aqi": "Air quality index",
                        "atmospheric_pressure": "Atmospheric pressure",
                        "battery": "Battery",
                        "carbon_dioxide": "Carbon dioxide",
                        "carbon_monoxide": "Carbon monoxide",
                        "current": "Current",
                        "data_rate": "Data rate",
                        "data_size": "Data size",
                        "date": "Date",
                        "distance": "Distance",
                        "duration": "Duration",
                        "energy": "Energy",
                        "energy_storage": "Stored energy",
                        "frequency": "Frequency",
                        "gas": "Gas",
                        "humidity": "Humidity",
                        "illuminance": "Illuminance",
                        "irradiance": "Irradiance",
                        "moisture": "Moisture",
                        "monetary": "Balance",
                        "nitrogen_dioxide": "Nitrogen dioxide",
                        "nitrogen_monoxide": "Nitrogen monoxide",
                        "nitrous_oxide": "Nitrous oxide",
                        "none": "No device class",
                        "ozone": "Ozone",
                        "ph": "pH",
                        "pm1": "PM1",
                        "pm10": "PM10",
                        "pm25": "PM2.5",
                        "power": "Power",
                        "power_factor": "Power factor",
                        "precipitation": "Precipitation",
                        "precipitation_intensity": "Precipitation intensity",
                        "pressure": "Pressure",
                        "reactive_power": "Reactive power",
                        "signal_strength": "Signal strength",
                        "sound_pressure": "Sound pressure",
                        "speed": "Speed",
                        "sulphur_dioxide": "Sulphur dioxide",
                        "temperature": "Temperature",
                        "timestamp": "Timestamp",
                        "volatile_organic_compounds": "VOCs",
                        "volatile_organic_compounds_parts": "VOCs",
                        "voltage": "Voltage",
                        "volume": "Volume",
                        "volume_storage": "Stored volume",
                        "water": "Water",
                        "weight": "Weight",
                        "wind_speed": "Wind speed"
                    }
                },
                "sensor_state_class": {
                    "options": {
                        "measurement": "Measurement",
                        "none": "No state class",
                        "total": "Total",
                        "total_increasing": "Total increasing"
                    }
                },
                "sensor_unit_of_measurement": {
                    "options": {
                        "none": "No unit of measurement"
                    }
                }
            },
            "services": {
                "reload": {
                    "description": "Reloads template entities from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "tesla_wall_connector": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{serial_number} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "title": "Configure Tesla Wall Connector"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "contactor_closed": {
                        "name": "Contactor closed"
                    },
                    "vehicle_connected": {
                        "name": "Vehicle connected"
                    }
                },
                "sensor": {
                    "current_a_a": {
                        "name": "Phase A current"
                    },
                    "current_b_a": {
                        "name": "Phase B current"
                    },
                    "current_c_a": {
                        "name": "Phase C current"
                    },
                    "evse_state": {
                        "name": "State"
                    },
                    "grid_hz": {
                        "name": "Grid frequency"
                    },
                    "grid_v": {
                        "name": "Grid voltage"
                    },
                    "handle_temp_c": {
                        "name": "Handle temperature"
                    },
                    "voltage_a_v": {
                        "name": "Phase A voltage"
                    },
                    "voltage_b_v": {
                        "name": "Phase B voltage"
                    },
                    "voltage_c_v": {
                        "name": "Phase C voltage"
                    }
                }
            }
        },
        "text": {
            "device_automation": {
                "action_type": {
                    "set_value": "Set value for {entity_name}"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Text",
                    "state_attributes": {
                        "max": {
                            "name": "Max length"
                        },
                        "min": {
                            "name": "Min length"
                        },
                        "mode": {
                            "name": "Mode",
                            "state": {
                                "password": "Password",
                                "text": "Text"
                            }
                        },
                        "pattern": {
                            "name": "Pattern"
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "set_value": {
                    "description": "Sets the value.",
                    "fields": {
                        "value": {
                            "description": "Enter your text.",
                            "name": "Value"
                        }
                    },
                    "name": "Set value"
                }
            },
            "title": "Text"
        },
        "thermobeacon": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "not_supported": "Device not supported"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "thermopro": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "thread": {
            "config": {
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            }
        },
        "threshold": {
            "config": {
                "error": {
                    "need_lower_upper": "Lower and upper limits can't both be empty"
                },
                "step": {
                    "user": {
                        "data": {
                            "entity_id": "Input sensor",
                            "hysteresis": "Hysteresis",
                            "lower": "Lower limit",
                            "name": "Name",
                            "upper": "Upper limit"
                        },
                        "description": "Create a binary sensor that turns on and off depending on the value of a sensor\n\nOnly lower limit configured - Turn on when the input sensor's value is less than the lower limit.\nOnly upper limit configured - Turn on when the input sensor's value is greater than the upper limit.\nBoth lower and upper limit configured - Turn on when the input sensor's value is in the range [lower limit .. upper limit].",
                        "title": "Add Threshold Sensor"
                    }
                }
            },
            "options": {
                "error": {
                    "need_lower_upper": "Lower and upper limits can't both be empty"
                },
                "step": {
                    "init": {
                        "data": {
                            "entity_id": "Input sensor",
                            "hysteresis": "Hysteresis",
                            "lower": "Lower limit",
                            "name": "Name",
                            "upper": "Upper limit"
                        },
                        "description": "Only lower limit configured - Turn on when the input sensor's value is less than the lower limit.\nOnly upper limit configured - Turn on when the input sensor's value is greater than the upper limit.\nBoth lower and upper limit configured - Turn on when the input sensor's value is in the range [lower limit .. upper limit]."
                    }
                }
            },
            "title": "Threshold Sensor"
        },
        "tibber": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_access_token": "Invalid access token",
                    "timeout": "Timeout establishing connection"
                },
                "step": {
                    "user": {
                        "data": {
                            "access_token": "Access Token"
                        },
                        "description": "Enter your access token from https:\/\/developer.tibber.com\/settings\/accesstoken"
                    }
                }
            }
        },
        "tile": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "title": "Re-authenticate Tile"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        },
                        "title": "Configure Tile"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "show_inactive": "Show inactive Tiles"
                        },
                        "title": "Configure Tile"
                    }
                }
            }
        },
        "tilt_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network"
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            }
        },
        "time": {
            "entity_component": {
                "_": {
                    "name": "Time"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "set_value": {
                    "description": "Sets the time.",
                    "fields": {
                        "time": {
                            "description": "The time to set.",
                            "name": "Time"
                        }
                    },
                    "name": "Set Time"
                }
            },
            "title": "Time"
        },
        "timer": {
            "entity_component": {
                "_": {
                    "name": "Timer",
                    "state": {
                        "active": "Active",
                        "idle": "Idle",
                        "paused": "Paused"
                    },
                    "state_attributes": {
                        "duration": {
                            "name": "Duration"
                        },
                        "editable": {
                            "name": "Managed via UI",
                            "state": {
                                "false": "No",
                                "true": "Yes"
                            }
                        },
                        "finishes_at": {
                            "name": "Finishes at"
                        },
                        "remaining": {
                            "name": "Remaining"
                        },
                        "restore": {
                            "name": "Restore"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_duration_in_start": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The timer service `timer.start` optional duration parameter is being removed and use of it has been detected. To change the duration please create a new timer.\n\nPlease remove the use of the `duration` parameter in the `timer.start` service in your automations and scripts and select **submit** to close this issue.",
                                "title": "The timer start service duration parameter is being removed"
                            }
                        }
                    },
                    "title": "The timer start service duration parameter is being removed"
                }
            },
            "services": {
                "cancel": {
                    "description": "Cancels a timer.",
                    "name": "Cancel"
                },
                "change": {
                    "description": "Changes a timer.",
                    "fields": {
                        "duration": {
                            "description": "Duration to add or subtract to the running timer.",
                            "name": "Duration"
                        }
                    },
                    "name": "Change"
                },
                "finish": {
                    "description": "Finishes a timer.",
                    "name": "Finish"
                },
                "pause": {
                    "description": "Pauses a timer.",
                    "name": "Pause"
                },
                "reload": {
                    "description": "Reloads timers from the YAML-configuration.",
                    "name": "Reload"
                },
                "start": {
                    "description": "Starts a timer.",
                    "fields": {
                        "duration": {
                            "description": "Duration the timer requires to finish. [optional].",
                            "name": "Duration"
                        }
                    },
                    "name": "Start"
                }
            }
        },
        "tod": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "after_time": "On time",
                            "before_time": "Off time",
                            "name": "Name"
                        },
                        "description": "Create a binary sensor that turns on or off depending on the time.",
                        "title": "Add Times of the Day Sensor"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "after_time": "On time",
                            "before_time": "Off time"
                        }
                    }
                }
            },
            "title": "Times of the Day Sensor"
        },
        "todoist": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "error": {
                    "invalid_api_key": "Invalid API key"
                },
                "step": {
                    "user": {
                        "data": {
                            "token": "API Token"
                        },
                        "description": "Please entry your API token from your [Todoist Settings page]({settings_url})"
                    }
                }
            },
            "services": {
                "new_task": {
                    "description": "Creates a new task and add it to a project.",
                    "fields": {
                        "assignee": {
                            "description": "A members username of a shared project to assign this task to.",
                            "name": "Assignee"
                        },
                        "content": {
                            "description": "The name of the task.",
                            "name": "Content"
                        },
                        "due_date": {
                            "description": "The time this task is due, in format YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS, in UTC timezone.",
                            "name": "Due date"
                        },
                        "due_date_lang": {
                            "description": "The language of due_date_string.",
                            "name": "Due data language"
                        },
                        "due_date_string": {
                            "description": "The day this task is due, in natural language.",
                            "name": "Due date string"
                        },
                        "labels": {
                            "description": "Any labels that you want to apply to this task, separated by a comma.",
                            "name": "Labels"
                        },
                        "priority": {
                            "description": "The priority of this task, from 1 (normal) to 4 (urgent).",
                            "name": "Priority"
                        },
                        "project": {
                            "description": "The name of the project this task should belong to.",
                            "name": "Project"
                        },
                        "reminder_date": {
                            "description": "When should user be reminded of this task, in format YYYY-MM-DDTHH:MM:SS, in UTC timezone.",
                            "name": "Reminder date"
                        },
                        "reminder_date_lang": {
                            "description": "The language of reminder_date_string.",
                            "name": "Reminder data language"
                        },
                        "reminder_date_string": {
                            "description": "When should user be reminded of this task, in natural language.",
                            "name": "Reminder date string"
                        }
                    },
                    "name": "New task"
                }
            }
        },
        "tolo": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Enter the hostname or IP address of your TOLO Sauna device."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "water_in_valve": {
                        "name": "Water in valve"
                    },
                    "water_out_valve": {
                        "name": "Water out valve"
                    }
                },
                "button": {
                    "next_color": {
                        "name": "Next color"
                    }
                },
                "fan": {
                    "fan": {
                        "name": "Fan"
                    }
                },
                "light": {
                    "light": {
                        "name": "Light"
                    }
                },
                "number": {
                    "fan_timer": {
                        "name": "Fan timer"
                    },
                    "power_timer": {
                        "name": "Power timer"
                    },
                    "salt_bath_timer": {
                        "name": "Salt bath timer"
                    }
                },
                "select": {
                    "lamp_mode": {
                        "name": "Lamp mode",
                        "state": {
                            "automatic": "Automatic",
                            "manual": "Manual"
                        }
                    }
                },
                "sensor": {
                    "fan_timer_remaining": {
                        "name": "Fan timer"
                    },
                    "power_timer_remaining": {
                        "name": "Power timer"
                    },
                    "salt_bath_timer_remaining": {
                        "name": "Salt bath timer"
                    },
                    "tank_temperature": {
                        "name": "Tank temperature"
                    },
                    "water_level": {
                        "name": "Water level"
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "tolo__lamp_mode": {
                            "automatic": "automatic",
                            "manual": "manual"
                        }
                    }
                }
            }
        },
        "tomorrowio": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key",
                    "rate_limited": "Currently rate limited, please try again later.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "location": "Location",
                            "name": "Name"
                        },
                        "description": "To get an API key, sign up at [Tomorrow.io](https:\/\/app.tomorrow.io\/signup)."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "health_concern": {
                        "state": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy",
                            "unhealthy_for_sensitive_groups": "Unhealthy for Sensitive Groups",
                            "very_unhealthy": "Very Unhealthy"
                        }
                    },
                    "pollen_index": {
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "none": "None",
                            "very_high": "Very High",
                            "very_low": "Very Low"
                        }
                    },
                    "precipitation_type": {
                        "state": {
                            "freezing_rain": "Freezing Rain",
                            "ice_pellets": "Ice Pellets",
                            "none": "None",
                            "rain": "Rain",
                            "snow": "Snow"
                        }
                    },
                    "primary_pollutant": {
                        "state": {
                            "co": "Carbon monoxide",
                            "no2": "Nitrogen dioxide",
                            "o3": "Ozone",
                            "pm10": "PM10",
                            "pm25": "PM2.5",
                            "so2": "Sulphur dioxide"
                        }
                    },
                    "uv_index": {
                        "state": {
                            "extreme": "Extreme",
                            "high": "High",
                            "low": "Low",
                            "moderate": "Moderate",
                            "very_high": "Very high"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "timestep": "Min. Between NowCast Forecasts"
                        },
                        "description": "If you choose to enable the `nowcast` forecast entity, you can configure the number of minutes between each forecast. The number of forecasts provided depends on the number of minutes chosen between forecasts.",
                        "title": "Update Tomorrow.io Options"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "tomorrowio__health_concern": {
                            "good": "Good",
                            "hazardous": "Hazardous",
                            "moderate": "Moderate",
                            "unhealthy": "Unhealthy",
                            "unhealthy_for_sensitive_groups": "Unhealthy for Sensitive Groups",
                            "very_unhealthy": "Very Unhealthy"
                        },
                        "tomorrowio__pollen_index": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium",
                            "none": "None",
                            "very_high": "Very High",
                            "very_low": "Very Low"
                        },
                        "tomorrowio__precipitation_type": {
                            "freezing_rain": "Freezing Rain",
                            "ice_pellets": "Ice Pellets",
                            "none": "None",
                            "rain": "Rain",
                            "snow": "Snow"
                        }
                    }
                }
            }
        },
        "toon": {
            "config": {
                "abort": {
                    "already_configured": "The selected agreement is already configured.",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_agreements": "This account has no Toon displays.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "unknown_authorize_url_generation": "Unknown error generating an authorize URL."
                },
                "step": {
                    "agreement": {
                        "data": {
                            "agreement": "Agreement"
                        },
                        "description": "Select the agreement address you want to add.",
                        "title": "Select your agreement"
                    },
                    "pick_implementation": {
                        "title": "Choose your tenant to authenticate with"
                    }
                }
            },
            "services": {
                "update": {
                    "description": "Updates all entities with fresh data from Toon.",
                    "fields": {
                        "display": {
                            "description": "Toon display to update.",
                            "name": "Display"
                        }
                    },
                    "name": "Update"
                }
            }
        },
        "totalconnect": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "no_locations": "No locations are available for this user, check TotalConnect settings",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "usercode": "Usercode not valid for this user at this location"
                },
                "step": {
                    "locations": {
                        "data": {
                            "usercode": "Usercode"
                        },
                        "description": "Enter the usercode for this user at location {location_id}",
                        "title": "Location Usercodes"
                    },
                    "reauth_confirm": {
                        "description": "Total Connect needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "auto_bypass_low_battery": "Auto bypass low battery"
                        },
                        "description": "Automatically bypass zones the moment they report a low battery.",
                        "title": "TotalConnect Options"
                    }
                }
            },
            "services": {
                "arm_away_instant": {
                    "description": "Arms Away with zero entry delay.",
                    "name": "Arm away instant"
                },
                "arm_home_instant": {
                    "description": "Arms Home with zero entry delay.",
                    "name": "Arm home instant"
                }
            }
        },
        "tplink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name} {model} ({host})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} {model} ({host})?"
                    },
                    "pick_device": {
                        "data": {
                            "device": "Device"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "If you leave the host empty, discovery will be used to find devices."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "current_consumption": {
                        "name": "Current consumption"
                    },
                    "today_consumption": {
                        "name": "Today's consumption"
                    },
                    "total_consumption": {
                        "name": "Total consumption"
                    }
                },
                "switch": {
                    "led": {
                        "name": "LED"
                    }
                }
            },
            "services": {
                "random_effect": {
                    "description": "Sets a random effect.",
                    "fields": {
                        "backgrounds": {
                            "description": "List of HSV sequences (Max 16).",
                            "name": "Backgrounds"
                        },
                        "brightness": {
                            "description": "Initial brightness.",
                            "name": "Brightness"
                        },
                        "brightness_range": {
                            "description": "Range of brightness.",
                            "name": "Brightness range"
                        },
                        "duration": {
                            "description": "Duration.",
                            "name": "Duration"
                        },
                        "fadeoff": {
                            "description": "Fade off.",
                            "name": "Fade off"
                        },
                        "hue_range": {
                            "description": "Range of hue.",
                            "name": "Hue range"
                        },
                        "init_states": {
                            "description": "Initial HSV sequence.",
                            "name": "Initial states"
                        },
                        "random_seed": {
                            "description": "Random seed.",
                            "name": "Random seed"
                        },
                        "saturation_range": {
                            "description": "Range of saturation.",
                            "name": "Saturation range"
                        },
                        "segments": {
                            "description": "List of segments (0 for all).",
                            "name": "Segments"
                        },
                        "transition": {
                            "description": "Transition.",
                            "name": "Transition"
                        },
                        "transition_range": {
                            "description": "Range of transition.",
                            "name": "Transition range"
                        }
                    },
                    "name": "Random effect"
                },
                "sequence_effect": {
                    "description": "Sets a sequence effect.",
                    "fields": {
                        "brightness": {
                            "description": "Initial brightness.",
                            "name": "Brightness"
                        },
                        "direction": {
                            "description": "Direction.",
                            "name": "Direction"
                        },
                        "duration": {
                            "description": "Duration.",
                            "name": "Duration"
                        },
                        "repeat_times": {
                            "description": "Repetitions (0 for continuous).",
                            "name": "Repetitions"
                        },
                        "segments": {
                            "description": "List of Segments (0 for all).",
                            "name": "Segments"
                        },
                        "sequence": {
                            "description": "List of HSV sequences (Max 16).",
                            "name": "Sequence"
                        },
                        "spread": {
                            "description": "Speed of spread.",
                            "name": "Spread"
                        },
                        "transition": {
                            "description": "Transition.",
                            "name": "Transition"
                        }
                    },
                    "name": "Sequence effect"
                }
            }
        },
        "tplink_omada": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_sites_found": "No sites found which the user can manage.",
                    "unknown": "Unexpected error",
                    "unsupported_controller": "Omada Controller version not supported."
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "The provided credentials have stopped working. Please update them.",
                        "title": "Update TP-Link Omada Credentials"
                    },
                    "site": {
                        "data": {
                            "site": "Site"
                        },
                        "title": "Choose which site(s) to manage"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "Enter the connection details for the Omada controller. Cloud controllers aren't supported.",
                        "title": "TP-Link Omada Controller"
                    }
                }
            }
        },
        "traccar": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to set up the webhook feature in Traccar.\n\nUse the following URL: `{webhook_url}`\n\nSee [the documentation]({docs_url}) for further details."
                },
                "step": {
                    "user": {
                        "description": "Are you sure you want to set up Traccar?",
                        "title": "Set up Traccar"
                    }
                }
            }
        },
        "tractive": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_failed_existing": "Could not update the config entry, please remove the integration and set it up again.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "tracker_battery_charging": {
                        "name": "Tracker battery charging"
                    }
                },
                "device_tracker": {
                    "tracker": {
                        "name": "Tracker"
                    }
                },
                "sensor": {
                    "activity": {
                        "name": "Activity",
                        "state": {
                            "good": "Good",
                            "low": "Low",
                            "ok": "OK"
                        }
                    },
                    "activity_time": {
                        "name": "Activity time"
                    },
                    "calories": {
                        "name": "Calories burned"
                    },
                    "daily_goal": {
                        "name": "Daily goal"
                    },
                    "minutes_active": {
                        "name": "Minutes active"
                    },
                    "minutes_day_sleep": {
                        "name": "Day sleep"
                    },
                    "minutes_night_sleep": {
                        "name": "Night sleep"
                    },
                    "minutes_rest": {
                        "name": "Minutes rest"
                    },
                    "rest_time": {
                        "name": "Rest time"
                    },
                    "sleep": {
                        "name": "Sleep",
                        "state": {
                            "good": "Good",
                            "low": "Low",
                            "ok": "OK"
                        }
                    },
                    "tracker_battery_level": {
                        "name": "Tracker battery"
                    },
                    "tracker_state": {
                        "name": "Tracker state",
                        "state": {
                            "not_reporting": "Not reporting",
                            "operational": "Operational",
                            "system_shutdown_user": "System shutdown user",
                            "system_startup": "System startup"
                        }
                    }
                },
                "switch": {
                    "live_tracking": {
                        "name": "Live tracking"
                    },
                    "tracker_buzzer": {
                        "name": "Tracker buzzer"
                    },
                    "tracker_led": {
                        "name": "Tracker LED"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "tractive__tracker_state": {
                            "not_reporting": "Not reporting",
                            "operational": "Operational",
                            "system_shutdown_user": "System shutdown user",
                            "system_startup": "System startup"
                        }
                    }
                }
            }
        },
        "tradfri": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress"
                },
                "error": {
                    "cannot_authenticate": "Cannot authenticate, is Gateway paired with another server like e.g. Homekit?",
                    "cannot_connect": "Failed to connect",
                    "invalid_key": "Failed to register with provided key. If this keeps happening, try restarting the gateway.",
                    "timeout": "Timeout validating the code."
                },
                "step": {
                    "auth": {
                        "data": {
                            "host": "Host",
                            "security_code": "Security Code"
                        },
                        "description": "You can find the security code on the back of your gateway.",
                        "title": "Enter security code"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "aqi": {
                        "name": "Air quality"
                    },
                    "filter_life_remaining": {
                        "name": "Filter time left"
                    }
                }
            }
        },
        "trafikverket_camera": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_location": "Could not find a camera location with the specified name",
                    "more_locations": "Found multiple camera locations with the specified name"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "location": "Location"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "active": {
                        "name": "Active"
                    }
                },
                "camera": {
                    "tv_camera": {
                        "state_attributes": {
                            "description": {
                                "name": "Description"
                            },
                            "direction": {
                                "name": "Direction"
                            },
                            "full_size_photo": {
                                "name": "Full size photo"
                            },
                            "location": {
                                "name": "Location"
                            },
                            "photo_url": {
                                "name": "Photo url"
                            },
                            "status": {
                                "name": "Status"
                            },
                            "type": {
                                "name": "Camera type"
                            }
                        }
                    }
                },
                "sensor": {
                    "camera_type": {
                        "name": "Camera type"
                    },
                    "direction": {
                        "name": "Direction"
                    },
                    "modified": {
                        "name": "Modified"
                    },
                    "photo_time": {
                        "name": "Photo time"
                    },
                    "photo_url": {
                        "name": "Photo url"
                    },
                    "status": {
                        "name": "Status"
                    }
                }
            }
        },
        "trafikverket_ferry": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "incorrect_api_key": "Invalid API key for selected account",
                    "invalid_auth": "Invalid authentication",
                    "invalid_route": "Could not find route with provided information"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "from": "From Harbour",
                            "time": "Time",
                            "to": "To Harbour",
                            "weekday": "Weekdays"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "departure_from": {
                        "name": "Departure from"
                    },
                    "departure_modified": {
                        "name": "Departure modified"
                    },
                    "departure_time": {
                        "name": "Departure time"
                    },
                    "departure_time_next": {
                        "name": "Departure time next"
                    },
                    "departure_time_next_next": {
                        "name": "Departure time next after"
                    },
                    "departure_to": {
                        "name": "Departure to"
                    }
                }
            },
            "selector": {
                "weekday": {
                    "options": {
                        "fri": "Friday",
                        "mon": "Monday",
                        "sat": "Saturday",
                        "sun": "Sunday",
                        "thu": "Thursday",
                        "tue": "Tuesday",
                        "wed": "Wednesday"
                    }
                }
            }
        },
        "trafikverket_train": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "incorrect_api_key": "Invalid API key for selected account",
                    "invalid_auth": "Invalid authentication",
                    "invalid_station": "Could not find a station with the specified name",
                    "invalid_time": "Invalid time provided",
                    "more_stations": "Found multiple stations with the specified name",
                    "multiple_trains": "Multiple trains found",
                    "no_trains": "No train found"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "filter_product": "Filter by product description",
                            "from": "From station",
                            "time": "Time (optional)",
                            "to": "To station",
                            "weekday": "Days"
                        },
                        "data_description": {
                            "filter_product": "To filter by product description add the phrase here to match",
                            "time": "Set time to search specifically at this time of day, must be exact time as scheduled train departure"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "actual_time": {
                        "name": "Actual time",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "cancelled": {
                        "name": "Cancelled",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "delayed_time": {
                        "name": "Delayed time",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "departure_state": {
                        "name": "Departure state",
                        "state": {
                            "canceled": "Cancelled",
                            "delayed": "Delayed",
                            "on_time": "On time"
                        },
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "departure_time": {
                        "name": "Departure time",
                        "state_attributes": {
                            "actual_time": {
                                "name": "Actual time"
                            },
                            "canceled": {
                                "name": "Cancelled"
                            },
                            "departure_state": {
                                "name": "Departure state",
                                "state": {
                                    "canceled": "Cancelled",
                                    "delayed": "Delayed",
                                    "on_time": "On time"
                                }
                            },
                            "deviations": {
                                "name": "Deviations"
                            },
                            "estimated_time": {
                                "name": "Estimated time"
                            },
                            "number_of_minutes_delayed": {
                                "name": "Minutes delayed"
                            },
                            "other_information": {
                                "name": "Other information"
                            },
                            "planned_time": {
                                "name": "Planned time"
                            },
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "deviation": {
                        "name": "Deviation",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "estimated_time": {
                        "name": "Estimated time",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "other_info": {
                        "name": "Other information",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    },
                    "planned_time": {
                        "name": "Planned time",
                        "state_attributes": {
                            "product_filter": {
                                "name": "Train filtering"
                            }
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "filter_product": "Filter by product description"
                        },
                        "data_description": {
                            "filter_product": "To filter by product description add the phrase here to match"
                        }
                    }
                }
            },
            "selector": {
                "weekday": {
                    "options": {
                        "fri": "Friday",
                        "mon": "Monday",
                        "sat": "Saturday",
                        "sun": "Sunday",
                        "thu": "Thursday",
                        "tue": "Tuesday",
                        "wed": "Wednesday"
                    }
                }
            }
        },
        "trafikverket_weatherstation": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_station": "Could not find a weather station with the specified name",
                    "more_stations": "Found multiple weather stations with the specified name"
                },
                "step": {
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "station": "Station"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_temperature": {
                        "name": "Air temperature"
                    },
                    "measure_time": {
                        "name": "Measure time"
                    },
                    "precipitation": {
                        "name": "Precipitation type",
                        "state": {
                            "drizzle": "Drizzle",
                            "freezing_rain": "Freezing rain",
                            "hail": "Hail",
                            "none": "None",
                            "rain": "Rain",
                            "rain_snow_mixed": "Rain and snow mixed",
                            "snow": "Snow"
                        }
                    },
                    "precipitation_amountname": {
                        "name": "Precipitation name",
                        "state": {
                            "error": "Error",
                            "heavy_rain": "Heavy rain",
                            "heavy_snow": "Heavy snow",
                            "heavy_snow_rain": "Heavy rain and snow mixed",
                            "mild_rain": "Mild rain",
                            "mild_snow": "Mild snow",
                            "mild_snow_rain": "Mild rain and snow mixed",
                            "moderate_rain": "Moderate rain",
                            "moderate_snow": "Moderate snow",
                            "moderate_snow_rain": "Moderate rain and snow mixed",
                            "none": "None",
                            "other": "Other",
                            "unknown": "Unknown"
                        }
                    },
                    "road_temperature": {
                        "name": "Road temperature"
                    },
                    "wind_direction": {
                        "name": "Wind direction"
                    },
                    "wind_direction_text": {
                        "name": "Wind direction text",
                        "state": {
                            "east": "East",
                            "east_south_east": "East-south east",
                            "north": "North",
                            "north_east": "North east",
                            "north_north_east": "North-north east",
                            "north_north_west": "North-north west",
                            "north_west": "North west",
                            "south": "South",
                            "south_east": "South east",
                            "south_south_west": "South-south west",
                            "south_west": "South west",
                            "west": "West"
                        }
                    },
                    "wind_speed_max": {
                        "name": "Wind speed max"
                    }
                }
            }
        },
        "transmission": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "name_exists": "Name already exists"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "The password for {username} is invalid.",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "Set up Transmission Client"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "active_torrents": {
                        "name": "Active torrents"
                    },
                    "completed_torrents": {
                        "name": "Completed torrents"
                    },
                    "download_speed": {
                        "name": "Download speed"
                    },
                    "paused_torrents": {
                        "name": "Paused torrents"
                    },
                    "started_torrents": {
                        "name": "Started torrents"
                    },
                    "total_torrents": {
                        "name": "Total torrents"
                    },
                    "transmission_status": {
                        "name": "Status",
                        "state": {
                            "downloading": "Downloading",
                            "idle": "Idle",
                            "seeding": "Seeding",
                            "up_down": "Up\/Down"
                        }
                    },
                    "upload_speed": {
                        "name": "Upload speed"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "limit": "Limit",
                            "order": "Order",
                            "scan_interval": "Update frequency"
                        },
                        "title": "Configure options for Transmission"
                    }
                }
            },
            "services": {
                "add_torrent": {
                    "description": "Adds a new torrent to download (URL, magnet link or Base64 encoded).",
                    "fields": {
                        "entry_id": {
                            "description": "Config entry id.",
                            "name": "Transmission entry"
                        },
                        "torrent": {
                            "description": "URL, magnet link or Base64 encoded file.",
                            "name": "Torrent"
                        }
                    },
                    "name": "Add torrent"
                },
                "remove_torrent": {
                    "description": "Removes a torrent.",
                    "fields": {
                        "delete_data": {
                            "description": "Delete torrent data.",
                            "name": "Delete data"
                        },
                        "entry_id": {
                            "description": "Config entry id.",
                            "name": "Transmission entry"
                        },
                        "id": {
                            "description": "ID of a torrent.",
                            "name": "ID"
                        }
                    },
                    "name": "Remove torrent"
                },
                "start_torrent": {
                    "description": "Starts a torrent.",
                    "fields": {
                        "entry_id": {
                            "description": "Config entry id.",
                            "name": "Transmission entry"
                        },
                        "id": {
                            "description": "ID of a torrent.",
                            "name": "ID"
                        }
                    },
                    "name": "Start torrent"
                },
                "stop_torrent": {
                    "description": "Stops a torrent.",
                    "fields": {
                        "entry_id": {
                            "description": "Config entry id.",
                            "name": "Transmission entry"
                        },
                        "id": {
                            "description": "ID of a torrent.",
                            "name": "ID"
                        }
                    },
                    "name": "Stop torrent"
                }
            }
        },
        "trend": {
            "services": {
                "reload": {
                    "description": "Reloads trend sensors from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "tts": {
            "services": {
                "clear_cache": {
                    "description": "Removes all cached text-to-speech files and purges the memory.",
                    "name": "Clear TTS cache"
                },
                "say": {
                    "description": "Says something using text-to-speech on a media player.",
                    "fields": {
                        "cache": {
                            "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly.",
                            "name": "Cache"
                        },
                        "entity_id": {
                            "description": "Media players to play the message.",
                            "name": "Entity"
                        },
                        "language": {
                            "description": "Language to use for speech generation.",
                            "name": "Language"
                        },
                        "message": {
                            "description": "The text you want to convert into speech so that you can listen to it on your device.",
                            "name": "Message"
                        },
                        "options": {
                            "description": "A dictionary containing integration-specific options.",
                            "name": "Options"
                        }
                    },
                    "name": "Say a TTS message"
                },
                "speak": {
                    "description": "Speaks something using text-to-speech on a media player.",
                    "fields": {
                        "cache": {
                            "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly.",
                            "name": "Cache"
                        },
                        "language": {
                            "description": "Language to use for speech generation.",
                            "name": "Language"
                        },
                        "media_player_entity_id": {
                            "description": "Media players to play the message.",
                            "name": "Media player entity"
                        },
                        "message": {
                            "description": "The text you want to convert into speech so that you can listen to it on your device.",
                            "name": "Message"
                        },
                        "options": {
                            "description": "A dictionary containing integration-specific options.",
                            "name": "Options"
                        }
                    },
                    "name": "Speak"
                }
            }
        },
        "tuya": {
            "config": {
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "login_error": "Login error ({code}): {msg}"
                },
                "step": {
                    "user": {
                        "data": {
                            "access_id": "Tuya IoT Access ID",
                            "access_secret": "Tuya IoT Access Secret",
                            "country_code": "Country",
                            "password": "Password",
                            "username": "Account"
                        },
                        "description": "Enter your Tuya credentials"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "carbon_dioxide": {
                        "name": "Carbon dioxide"
                    },
                    "carbon_monoxide": {
                        "name": "Carbon monoxide"
                    },
                    "drop": {
                        "name": "Drop"
                    },
                    "feeding": {
                        "name": "Feeding"
                    },
                    "formaldehyde": {
                        "name": "Formaldehyde"
                    },
                    "methane": {
                        "name": "Methane"
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "pressure": {
                        "name": "Pressure"
                    },
                    "tilt": {
                        "name": "Tilt"
                    },
                    "voc": {
                        "name": "VOCs"
                    }
                },
                "button": {
                    "reset_duster_cloth": {
                        "name": "Reset duster cloth"
                    },
                    "reset_edge_brush": {
                        "name": "Reset edge brush"
                    },
                    "reset_filter": {
                        "name": "Reset filter"
                    },
                    "reset_map": {
                        "name": "Reset map"
                    },
                    "reset_roll_brush": {
                        "name": "Reset roll brush"
                    },
                    "snooze": {
                        "name": "Snooze"
                    }
                },
                "cover": {
                    "blind": {
                        "name": "Blind"
                    },
                    "curtain": {
                        "name": "Curtain"
                    },
                    "curtain_2": {
                        "name": "Curtain 2"
                    },
                    "curtain_3": {
                        "name": "Curtain 3"
                    },
                    "door": {
                        "name": "Door"
                    },
                    "door_2": {
                        "name": "Door 2"
                    },
                    "door_3": {
                        "name": "Door 3"
                    }
                },
                "light": {
                    "backlight": {
                        "name": "Backlight"
                    },
                    "light": {
                        "name": "Light"
                    },
                    "light_2": {
                        "name": "Light 2"
                    },
                    "light_3": {
                        "name": "Light 3"
                    },
                    "night_light": {
                        "name": "Night light"
                    }
                },
                "number": {
                    "cloud_recipe": {
                        "name": "Cloud recipe"
                    },
                    "cook_temperature": {
                        "name": "Cook temperature"
                    },
                    "cook_time": {
                        "name": "Cook time"
                    },
                    "down_delay": {
                        "name": "Down delay"
                    },
                    "far_detection": {
                        "name": "Far detection"
                    },
                    "feed": {
                        "name": "Feed"
                    },
                    "heat_preservation_time": {
                        "name": "Heat preservation time"
                    },
                    "maximum_brightness": {
                        "name": "Maximum brightness"
                    },
                    "maximum_brightness_2": {
                        "name": "Maximum brightness 2"
                    },
                    "maximum_brightness_3": {
                        "name": "Maximum brightness 3"
                    },
                    "minimum_brightness": {
                        "name": "Minimum brightness"
                    },
                    "minimum_brightness_2": {
                        "name": "Minimum brightness 2"
                    },
                    "minimum_brightness_3": {
                        "name": "Minimum brightness 3"
                    },
                    "move_down": {
                        "name": "Move down"
                    },
                    "move_up": {
                        "name": "Move up"
                    },
                    "near_detection": {
                        "name": "Near detection"
                    },
                    "powder": {
                        "name": "Powder"
                    },
                    "sensitivity": {
                        "name": "Sensitivity"
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "temperature_after_boiling": {
                        "name": "Temperature after boiling"
                    },
                    "time": {
                        "name": "Time"
                    },
                    "voice_times": {
                        "name": "Voice times"
                    },
                    "volume": {
                        "name": "Volume"
                    },
                    "water_level": {
                        "name": "Water level"
                    }
                },
                "select": {
                    "basic_anti_flicker": {
                        "name": "Anti-flicker",
                        "state": {
                            "0": "Disabled",
                            "1": "50 Hz",
                            "2": "60 Hz"
                        }
                    },
                    "basic_nightvision": {
                        "name": "Night vision",
                        "state": {
                            "0": "Automatic",
                            "1": "Off",
                            "2": "On"
                        }
                    },
                    "brightness": {
                        "name": "Brightness"
                    },
                    "concentration": {
                        "name": "Concentration"
                    },
                    "countdown": {
                        "name": "Countdown",
                        "state": {
                            "1h": "1 hour",
                            "2h": "2 hours",
                            "3h": "3 hours",
                            "4h": "4 hours",
                            "5h": "5 hours",
                            "6h": "6 hours",
                            "cancel": "Cancel"
                        }
                    },
                    "cups": {
                        "name": "Cups"
                    },
                    "curtain_mode": {
                        "name": "Mode",
                        "state": {
                            "morning": "Morning",
                            "night": "Night"
                        }
                    },
                    "curtain_motor_mode": {
                        "name": "Motor mode",
                        "state": {
                            "back": "Back",
                            "forward": "Forward"
                        }
                    },
                    "decibel_sensitivity": {
                        "name": "Sound detection sensitivity",
                        "state": {
                            "0": "Low sensitivity",
                            "1": "High sensitivity"
                        }
                    },
                    "fan_angle": {
                        "state": {
                            "30": "30°",
                            "60": "60°",
                            "90": "90°"
                        }
                    },
                    "fingerbot_mode": {
                        "name": "Mode",
                        "state": {
                            "click": "Push",
                            "switch": "Switch"
                        }
                    },
                    "horizontal_fan_angle": {
                        "name": "Horizontal swing flap angle",
                        "state": {
                            "30": "30°",
                            "60": "60°",
                            "90": "90°"
                        }
                    },
                    "humidifier_level": {
                        "name": "Spraying level",
                        "state": {
                            "level_1": "Level 1",
                            "level_10": "Level 10",
                            "level_2": "Level 2",
                            "level_3": "Level 3",
                            "level_4": "Level 4",
                            "level_5": "Level 5",
                            "level_6": "Level 6",
                            "level_7": "Level 7",
                            "level_8": "Level 8",
                            "level_9": "Level 9"
                        }
                    },
                    "humidifier_moodlighting": {
                        "name": "Moodlighting",
                        "state": {
                            "1": "Mood 1",
                            "2": "Mood 2",
                            "3": "Mood 3",
                            "4": "Mood 4",
                            "5": "Mood 5"
                        }
                    },
                    "humidifier_spray_mode": {
                        "name": "Spray mode",
                        "state": {
                            "auto": "Auto",
                            "health": "Health",
                            "humidity": "Humidity",
                            "sleep": "Sleep",
                            "work": "Work"
                        }
                    },
                    "ipc_work_mode": {
                        "name": "IPC mode",
                        "state": {
                            "0": "Low power mode",
                            "1": "Continuous working mode"
                        }
                    },
                    "led_type": {
                        "name": "Light source type",
                        "state": {
                            "halogen": "Halogen",
                            "incandescent": "Incandescent",
                            "led": "LED"
                        }
                    },
                    "led_type_2": {
                        "name": "Light 2 source type",
                        "state": {
                            "halogen": "Halogen",
                            "incandescent": "Incandescent",
                            "led": "LED"
                        }
                    },
                    "led_type_3": {
                        "name": "Light 3 source type",
                        "state": {
                            "halogen": "Halogen",
                            "incandescent": "Incandescent",
                            "led": "LED"
                        }
                    },
                    "light_mode": {
                        "name": "Indicator light mode",
                        "state": {
                            "none": "Off",
                            "pos": "Indicate switch location",
                            "relay": "Indicate switch on\/off state"
                        }
                    },
                    "material": {
                        "name": "Material"
                    },
                    "mode": {
                        "name": "Mode"
                    },
                    "motion_sensitivity": {
                        "name": "Motion detection sensitivity",
                        "state": {
                            "0": "Low sensitivity",
                            "1": "Medium sensitivity",
                            "2": "High sensitivity"
                        }
                    },
                    "record_mode": {
                        "name": "Record mode",
                        "state": {
                            "1": "Record events only",
                            "2": "Continuous recording"
                        }
                    },
                    "relay_status": {
                        "name": "Power on behavior",
                        "state": {
                            "last": "Remember last state",
                            "memory": "Remember last state",
                            "off": "Off",
                            "on": "On",
                            "power_off": "Off",
                            "power_on": "On"
                        }
                    },
                    "target_humidity": {
                        "name": "Target humidity"
                    },
                    "temperature_level": {
                        "name": "Temperature level"
                    },
                    "vacuum_cistern": {
                        "name": "Water tank adjustment",
                        "state": {
                            "closed": "Closed",
                            "high": "High",
                            "low": "Low",
                            "middle": "Middle"
                        }
                    },
                    "vacuum_collection": {
                        "name": "Dust collection mode",
                        "state": {
                            "large": "Large",
                            "middle": "Middle",
                            "small": "Small"
                        }
                    },
                    "vacuum_mode": {
                        "name": "Mode",
                        "state": {
                            "bow": "Bow",
                            "chargego": "Return to dock",
                            "left_bow": "Bow left",
                            "left_spiral": "Spiral left",
                            "mop": "Mop",
                            "part": "Part",
                            "partial_bow": "Bow partially",
                            "pick_zone": "Pick zone",
                            "point": "Point",
                            "pose": "Pose",
                            "random": "Random",
                            "right_bow": "Bow right",
                            "right_spiral": "Spiral right",
                            "single": "Single",
                            "smart": "Smart",
                            "spiral": "Spiral",
                            "standby": "Standby",
                            "wall_follow": "Follow wall",
                            "zone": "Zone"
                        }
                    },
                    "vertical_fan_angle": {
                        "name": "Vertical swing flap angle",
                        "state": {
                            "30": "30°",
                            "60": "60°",
                            "90": "90°"
                        }
                    },
                    "volume": {
                        "name": "Volume"
                    }
                },
                "sensor": {
                    "air_quality": {
                        "name": "Air quality",
                        "state": {
                            "good": "Good",
                            "great": "Great",
                            "mild": "Mild",
                            "severe": "Severe"
                        }
                    },
                    "battery": {
                        "name": "Battery"
                    },
                    "battery_state": {
                        "name": "Battery state"
                    },
                    "carbon_dioxide": {
                        "name": "Carbon dioxide"
                    },
                    "carbon_monoxide": {
                        "name": "Carbon monoxide"
                    },
                    "cleaning_area": {
                        "name": "Cleaning area"
                    },
                    "cleaning_time": {
                        "name": "Cleaning time"
                    },
                    "concentration_carbon_dioxide": {
                        "name": "Concentration of carbon dioxide"
                    },
                    "current": {
                        "name": "Current"
                    },
                    "current_temperature": {
                        "name": "Current temperature"
                    },
                    "duster_cloth_life": {
                        "name": "Duster cloth lifetime"
                    },
                    "filter_life": {
                        "name": "Filter lifetime"
                    },
                    "filter_utilization": {
                        "name": "Filter utilization"
                    },
                    "formaldehyde": {
                        "name": "Formaldehyde"
                    },
                    "gas": {
                        "name": "Gas"
                    },
                    "humidity": {
                        "name": "Humidity"
                    },
                    "illuminance": {
                        "name": "Illuminance"
                    },
                    "last_amount": {
                        "name": "Last amount"
                    },
                    "last_operation_duration": {
                        "name": "Last operation duration"
                    },
                    "luminosity": {
                        "name": "Luminosity"
                    },
                    "methane": {
                        "name": "Methane"
                    },
                    "phase_a_current": {
                        "name": "Phase A current"
                    },
                    "phase_a_power": {
                        "name": "Phase A power"
                    },
                    "phase_a_voltage": {
                        "name": "Phase A voltage"
                    },
                    "phase_b_current": {
                        "name": "Phase B current"
                    },
                    "phase_b_power": {
                        "name": "Phase B power"
                    },
                    "phase_b_voltage": {
                        "name": "Phase B voltage"
                    },
                    "phase_c_current": {
                        "name": "Phase C current"
                    },
                    "phase_c_power": {
                        "name": "Phase C power"
                    },
                    "phase_c_voltage": {
                        "name": "Phase C voltage"
                    },
                    "pm10": {
                        "name": "PM10"
                    },
                    "pm1": {
                        "name": "PM1"
                    },
                    "pm25": {
                        "name": "PM2.5"
                    },
                    "power": {
                        "name": "Power"
                    },
                    "remaining_time": {
                        "name": "Remaining time"
                    },
                    "rolling_brush_life": {
                        "name": "Rolling brush lifetime"
                    },
                    "side_brush_life": {
                        "name": "Side brush lifetime"
                    },
                    "smoke_amount": {
                        "name": "Smoke amount"
                    },
                    "sous_vide_status": {
                        "name": "Status",
                        "state": {
                            "boiling_temp": "Boiling temperature",
                            "cooling": "Cooling",
                            "heating": "Heating",
                            "heating_temp": "Heating temperature",
                            "reserve_1": "Reserve 1",
                            "reserve_2": "Reserve 2",
                            "reserve_3": "Reserve 3",
                            "standby": "Standby",
                            "warm": "Heat preservation"
                        }
                    },
                    "status": {
                        "name": "Status",
                        "state": {
                            "boiling_temp": "Boiling temperature",
                            "cooling": "Cooling",
                            "heating": "Heating",
                            "heating_temp": "Heating temperature",
                            "reserve_1": "Reserve 1",
                            "reserve_2": "Reserve 2",
                            "reserve_3": "Reserve 3",
                            "standby": "Standby",
                            "warm": "Heat preservation"
                        }
                    },
                    "temperature": {
                        "name": "Temperature"
                    },
                    "total_absorption_particles": {
                        "name": "Total absorption of particles"
                    },
                    "total_cleaning_area": {
                        "name": "Total cleaning area"
                    },
                    "total_cleaning_time": {
                        "name": "Total cleaning time"
                    },
                    "total_cleaning_times": {
                        "name": "Total cleaning times"
                    },
                    "total_energy": {
                        "name": "Total energy"
                    },
                    "total_operating_time": {
                        "name": "Total operating time"
                    },
                    "total_volatile_organic_compound": {
                        "name": "Total volatile organic compound"
                    },
                    "voc": {
                        "name": "VOCs"
                    },
                    "voltage": {
                        "name": "Voltage"
                    },
                    "water_level": {
                        "name": "Water level"
                    }
                },
                "switch": {
                    "alarm_1": {
                        "name": "Alarm 1"
                    },
                    "alarm_2": {
                        "name": "Alarm 2"
                    },
                    "alarm_3": {
                        "name": "Alarm 3"
                    },
                    "alarm_4": {
                        "name": "Alarm 4"
                    },
                    "anion": {
                        "name": "Anion"
                    },
                    "battery_lock": {
                        "name": "Battery lock"
                    },
                    "child_lock": {
                        "name": "Child lock"
                    },
                    "cry_detection": {
                        "name": "Cry detection"
                    },
                    "disinfection": {
                        "name": "Disinfection"
                    },
                    "do_not_disturb": {
                        "name": "Do not disturb"
                    },
                    "energy_saving": {
                        "name": "Energy saving"
                    },
                    "filter_cartridge_reset": {
                        "name": "Filter cartridge reset"
                    },
                    "filter_reset": {
                        "name": "Filter reset"
                    },
                    "flip": {
                        "name": "Flip"
                    },
                    "heat_preservation": {
                        "name": "Heat preservation"
                    },
                    "humidification": {
                        "name": "Humidification"
                    },
                    "ionizer": {
                        "name": "Ionizer"
                    },
                    "motion_alarm": {
                        "name": "Motion alarm"
                    },
                    "motion_recording": {
                        "name": "Motion recording"
                    },
                    "motion_tracking": {
                        "name": "Motion tracking"
                    },
                    "mute": {
                        "name": "Mute"
                    },
                    "mute_voice": {
                        "name": "Mute voice"
                    },
                    "natural_wind": {
                        "name": "Natural wind"
                    },
                    "open_window_detection": {
                        "name": "Open window detection"
                    },
                    "oxygen_bar": {
                        "name": "Oxygen bar"
                    },
                    "plug": {
                        "name": "Plug"
                    },
                    "power": {
                        "name": "Power"
                    },
                    "privacy_mode": {
                        "name": "Privacy mode"
                    },
                    "radio": {
                        "name": "Radio"
                    },
                    "reset_of_water_usage_days": {
                        "name": "Reset of water usage days"
                    },
                    "reverse": {
                        "name": "Reverse"
                    },
                    "sleep": {
                        "name": "Sleep"
                    },
                    "sleep_aid": {
                        "name": "Sleep aid"
                    },
                    "slow_feed": {
                        "name": "Slow feed"
                    },
                    "socket": {
                        "name": "Socket"
                    },
                    "socket_1": {
                        "name": "Socket 1"
                    },
                    "socket_2": {
                        "name": "Socket 2"
                    },
                    "socket_3": {
                        "name": "Socket 3"
                    },
                    "socket_4": {
                        "name": "Socket 4"
                    },
                    "socket_5": {
                        "name": "Socket 5"
                    },
                    "socket_6": {
                        "name": "Socket 6"
                    },
                    "sound": {
                        "name": "Sound"
                    },
                    "sound_detection": {
                        "name": "Sound detection"
                    },
                    "spray": {
                        "name": "Spray"
                    },
                    "start": {
                        "name": "Start"
                    },
                    "sterilization": {
                        "name": "Sterilization"
                    },
                    "switch": {
                        "name": "Switch"
                    },
                    "switch_1": {
                        "name": "Switch 1"
                    },
                    "switch_2": {
                        "name": "Switch 2"
                    },
                    "switch_3": {
                        "name": "Switch 3"
                    },
                    "switch_4": {
                        "name": "Switch 4"
                    },
                    "switch_5": {
                        "name": "Switch 5"
                    },
                    "switch_6": {
                        "name": "Switch 6"
                    },
                    "switch_7": {
                        "name": "Switch 7"
                    },
                    "switch_8": {
                        "name": "Switch 8"
                    },
                    "time_watermark": {
                        "name": "Time watermark"
                    },
                    "usb_1": {
                        "name": "USB 1"
                    },
                    "usb_2": {
                        "name": "USB 2"
                    },
                    "usb_3": {
                        "name": "USB 3"
                    },
                    "usb_4": {
                        "name": "USB 4"
                    },
                    "usb_5": {
                        "name": "USB 5"
                    },
                    "usb_6": {
                        "name": "USB 6"
                    },
                    "uv_sterilization": {
                        "name": "UV sterilization"
                    },
                    "video_recording": {
                        "name": "Video recording"
                    },
                    "voice": {
                        "name": "Voice"
                    },
                    "water": {
                        "name": "Water"
                    },
                    "water_pump_reset": {
                        "name": "Water pump reset"
                    },
                    "wide_dynamic_range": {
                        "name": "Wide dynamic range"
                    }
                }
            },
            "issues": {
                "service_deprecation_turn_off": {
                    "description": "Tuya vacuum support for the vacuum.turn_off service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call vacuum.stop and select submit below to mark this issue as resolved.",
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Tuya vacuum support for the vacuum.turn_off service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call vacuum.stop and select submit below to mark this issue as resolved.",
                                "title": "Tuya vacuum support for vacuum.turn_off is being removed"
                            }
                        }
                    },
                    "title": "Tuya vacuum support for vacuum.turn_off is being removed"
                },
                "service_deprecation_turn_on": {
                    "description": "Tuya vacuum support for the vacuum.turn_on service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call vacuum.start and select submit below to mark this issue as resolved.",
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Tuya vacuum support for the vacuum.turn_on service is deprecated and will be removed in Home Assistant 2024.2; Please adjust any automation or script that uses the service to instead call vacuum.start and select submit below to mark this issue as resolved.",
                                "title": "Tuya vacuum support for vacuum.turn_on is being removed"
                            }
                        }
                    },
                    "title": "Tuya vacuum support for vacuum.turn_on is being removed"
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "tuya__countdown": {
                            "1h": "1 hour",
                            "2h": "2 hours",
                            "3h": "3 hours",
                            "4h": "4 hours",
                            "5h": "5 hours",
                            "6h": "6 hours",
                            "cancel": "Cancel"
                        },
                        "tuya__curtain_mode": {
                            "morning": "Morning",
                            "night": "Night"
                        },
                        "tuya__curtain_motor_mode": {
                            "back": "Back",
                            "forward": "Forward"
                        },
                        "tuya__fingerbot_mode": {
                            "click": "Push",
                            "switch": "Switch"
                        },
                        "tuya__humidifier_level": {
                            "level_1": "Level 1",
                            "level_10": "Level 10",
                            "level_2": "Level 2",
                            "level_3": "Level 3",
                            "level_4": "Level 4",
                            "level_5": "Level 5",
                            "level_6": "Level 6",
                            "level_7": "Level 7",
                            "level_8": "Level 8",
                            "level_9": "Level 9"
                        },
                        "tuya__humidifier_spray_mode": {
                            "auto": "Auto",
                            "health": "Health",
                            "humidity": "Humidity",
                            "sleep": "Sleep",
                            "work": "Work"
                        },
                        "tuya__led_type": {
                            "halogen": "Halogen",
                            "incandescent": "Incandescent",
                            "led": "LED"
                        },
                        "tuya__light_mode": {
                            "none": "Off",
                            "pos": "Indicate switch location",
                            "relay": "Indicate switch on\/off state"
                        },
                        "tuya__relay_status": {
                            "last": "Remember last state",
                            "memory": "Remember last state",
                            "off": "Off",
                            "on": "On",
                            "power_off": "Off",
                            "power_on": "On"
                        },
                        "tuya__vacuum_cistern": {
                            "closed": "Closed",
                            "high": "High",
                            "low": "Low",
                            "middle": "Middle"
                        },
                        "tuya__vacuum_collection": {
                            "large": "Large",
                            "middle": "Middle",
                            "small": "Small"
                        },
                        "tuya__vacuum_mode": {
                            "bow": "Bow",
                            "chargego": "Return to dock",
                            "left_bow": "Bow Left",
                            "left_spiral": "Spiral Left",
                            "mop": "Mop",
                            "part": "Part",
                            "partial_bow": "Bow Partially",
                            "pick_zone": "Pick Zone",
                            "point": "Point",
                            "pose": "Pose",
                            "random": "Random",
                            "right_bow": "Bow Right",
                            "right_spiral": "Spiral Right",
                            "single": "Single",
                            "smart": "Smart",
                            "spiral": "Spiral",
                            "standby": "Standby",
                            "wall_follow": "Follow Wall",
                            "zone": "Zone"
                        }
                    }
                },
                "sensor": {
                    "state": {
                        "tuya__air_quality": {
                            "good": "Good",
                            "great": "Great",
                            "mild": "Mild",
                            "severe": "Severe"
                        },
                        "tuya__status": {
                            "boiling_temp": "Boiling temperature",
                            "cooling": "Cooling",
                            "heating": "Heating",
                            "heating_temp": "Heating temperature",
                            "reserve_1": "Reserve 1",
                            "reserve_2": "Reserve 2",
                            "reserve_3": "Reserve 3",
                            "standby": "Standby",
                            "warm": "Heat preservation"
                        }
                    }
                }
            }
        },
        "twentemilieu": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_address": "Address not found in Twente Milieu service area."
                },
                "step": {
                    "user": {
                        "data": {
                            "house_letter": "House letter\/additional",
                            "house_number": "House number",
                            "post_code": "Postal code"
                        },
                        "description": "Set up Twente Milieu providing waste collection information on your address."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "christmas_tree_pickup": {
                        "name": "Christmas tree pickup"
                    },
                    "non_recyclable_waste_pickup": {
                        "name": "Non-recyclable waste pickup"
                    },
                    "organic_waste_pickup": {
                        "name": "Organic waste pickup"
                    },
                    "packages_waste_pickup": {
                        "name": "Packages waste pickup"
                    },
                    "paper_waste_pickup": {
                        "name": "Paper waste pickup"
                    }
                }
            }
        },
        "twilio": {
            "config": {
                "abort": {
                    "cloud_not_connected": "Not connected to Home Assistant Cloud.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "webhook_not_internet_accessible": "Your Home Assistant instance needs to be accessible from the internet to receive webhook messages."
                },
                "create_entry": {
                    "default": "To send events to Home Assistant, you will need to setup [Webhooks with Twilio]({twilio_url}).\n\nFill in the following info:\n\n- URL: `{webhook_url}`\n- Method: POST\n- Content Type: application\/x-www-form-urlencoded\n\nSee [the documentation]({docs_url}) on how to configure automations to handle incoming data."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?",
                        "title": "Set up the Twilio Webhook"
                    }
                }
            }
        },
        "twinkly": {
            "config": {
                "abort": {
                    "device_exists": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} - {model} ({host})?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            }
        },
        "twitch": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error",
                    "wrong_account": "Wrong account: Please authenticate with {username}."
                },
                "step": {
                    "reauth_confirm": {
                        "description": "The Twitch integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "issues": {
                "deprecated_yaml_already_imported": {
                    "description": "Configuring {integration_title} using YAML is being removed.\n\nYour application credentials are already imported.\n\nRemove the `{domain}` configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The {integration_title} YAML configuration is being removed"
                },
                "deprecated_yaml_credentials_imported": {
                    "description": "Configuring {integration_title} using YAML is being removed.\n\nYour application credentials are imported, but a config entry could not be created because there was no access token.\n\nPlease add Twitch again via the UI.\n\nRemove the `{domain}` configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The {integration_title} YAML configuration is being removed"
                },
                "deprecated_yaml_invalid_token": {
                    "description": "Configuring {integration_title} using YAML is being removed.\n\nYour configuration couldn't be imported because the token in the configuration.yaml was invalid.\n\nPlease add Twitch again via the UI.\n\nRemove the `{domain}` configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The {integration_title} YAML configuration is being removed"
                }
            }
        },
        "ukraine_alarm": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured",
                    "cannot_connect": "Failed to connect",
                    "max_regions": "Max 5 regions can be configured",
                    "rate_limit": "Too much requests",
                    "timeout": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "community": {
                        "data": {
                            "region": "Region"
                        },
                        "description": "If you want to monitor not only state and district, choose its specific community"
                    },
                    "district": {
                        "data": {
                            "region": "Region"
                        },
                        "description": "If you want to monitor not only state, choose its specific district"
                    },
                    "user": {
                        "data": {
                            "region": "Region"
                        },
                        "description": "Choose state to monitor"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "air": {
                        "name": "Air"
                    },
                    "artillery": {
                        "name": "Artillery"
                    },
                    "chemical": {
                        "name": "Chemical"
                    },
                    "nuclear": {
                        "name": "Nuclear"
                    },
                    "unknown": {
                        "name": "Unknown"
                    },
                    "urban_fights": {
                        "name": "Urban fights"
                    }
                }
            }
        },
        "unifi": {
            "config": {
                "abort": {
                    "already_configured": "UniFi Network site is already configured",
                    "configuration_updated": "Configuration updated",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "faulty_credentials": "Invalid authentication",
                    "service_unavailable": "Failed to connect",
                    "unknown_client_mac": "No client available on that MAC address"
                },
                "flow_title": "{site} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "site": "Site ID",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "title": "Set up UniFi Network"
                    }
                }
            },
            "options": {
                "abort": {
                    "integration_not_setup": "UniFi integration is not set up"
                },
                "step": {
                    "client_control": {
                        "data": {
                            "block_client": "Network access controlled clients",
                            "dpi_restrictions": "Allow control of DPI restriction groups",
                            "poe_clients": "Allow POE control of clients"
                        },
                        "description": "Configure client controls\n\nCreate switches for serial numbers you want to control network access for.",
                        "title": "UniFi Network options 2\/3"
                    },
                    "device_tracker": {
                        "data": {
                            "detection_time": "Time in seconds from last seen until considered away",
                            "ignore_wired_bug": "Disable UniFi Network wired bug logic",
                            "ssid_filter": "Select SSIDs to track wireless clients on",
                            "track_clients": "Track network clients",
                            "track_devices": "Track network devices (Ubiquiti devices)",
                            "track_wired_clients": "Include wired network clients"
                        },
                        "description": "Configure device tracking",
                        "title": "UniFi Network options 1\/3"
                    },
                    "simple_options": {
                        "data": {
                            "block_client": "Network access controlled clients",
                            "track_clients": "Track network clients",
                            "track_devices": "Track network devices (Ubiquiti devices)"
                        },
                        "description": "Configure UniFi Network integration"
                    },
                    "statistics_sensors": {
                        "data": {
                            "allow_bandwidth_sensors": "Bandwidth usage sensors for network clients",
                            "allow_uptime_sensors": "Uptime sensors for network clients"
                        },
                        "description": "Configure statistics sensors",
                        "title": "UniFi Network options 3\/3"
                    }
                }
            },
            "services": {
                "reconnect_client": {
                    "description": "Tries to get wireless client to reconnect to UniFi Network.",
                    "fields": {
                        "device_id": {
                            "description": "Try reconnect client to wireless network.",
                            "name": "Device"
                        }
                    },
                    "name": "Reconnect wireless client"
                },
                "remove_clients": {
                    "description": "Cleans up clients that has only been associated with the controller for a short period of time.",
                    "name": "Remove clients from the UniFi Network"
                }
            }
        },
        "unifiprotect": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "discovery_started": "Discovery started"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "protect_version": "Minimum required version is v1.20.0. Please upgrade UniFi Protect and then retry."
                },
                "flow_title": "{name} ({ip_address})",
                "step": {
                    "discovery_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Do you want to set up {name} ({ip_address})? You will need a local user created in your UniFi OS Console to log in with. Ubiquiti Cloud Users will not work. For more information: {local_user_documentation_url}",
                        "title": "UniFi Protect Discovered"
                    },
                    "reauth_confirm": {
                        "data": {
                            "host": "IP\/Host of UniFi Protect Server",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username"
                        },
                        "title": "UniFi Protect Reauth"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "port": "Port",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "description": "You will need a local user created in your UniFi OS Console to log in with. Ubiquiti Cloud Users will not work. For more information: {local_user_documentation_url}",
                        "title": "UniFi Protect Setup"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "license_plate": {
                        "state": {
                            "none": "Clear"
                        }
                    }
                }
            },
            "issues": {
                "deprecate_smart_sensor": {
                    "description": "The unified \"Detected Object\" sensor for smart detections is now deprecated. It has been replaced with individual smart detection binary sensors for each smart detection type.\n\nBelow are the detected automations or scripts that use one or more of the deprecated entities:\n{items}\nThe above list may be incomplete and it does not include any template usages inside of dashboards. Please update any templates, automations or scripts accordingly.",
                    "title": "Smart Detection Sensor Deprecated"
                },
                "deprecated_service_set_doorbell_message": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "The `unifiprotect.set_doorbell_message` service is deprecated in favor of the new Doorbell Text entity added to each Doorbell device. It will be removed in v2023.3.0. Please update to use the [`text.set_value` service]({link}).",
                                "title": "set_doorbell_message is Deprecated"
                            }
                        }
                    },
                    "title": "set_doorbell_message is Deprecated"
                },
                "ea_setup_failed": {
                    "description": "You are using v{version} of UniFi Protect which is an Early Access version. An unrecoverable error occurred while trying to load the integration. Please [downgrade to a stable version](https:\/\/www.home-assistant.io\/integrations\/unifiprotect#downgrading-unifi-protect) of UniFi Protect to continue using the integration.\n\nError: {error}",
                    "title": "Setup error using Early Access version"
                },
                "ea_warning": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "Are you sure you want to run unsupported versions of UniFi Protect? This may cause your Home Assistant integration to break.",
                                "title": "v{version} is an Early Access version"
                            },
                            "start": {
                                "description": "You are using v{version} of UniFi Protect which is an Early Access version. [Early Access versions are not supported by Home Assistant](https:\/\/www.home-assistant.io\/integrations\/unifiprotect#about-unifi-early-access) and it is recommended to go back to a stable release as soon as possible.\n\nBy submitting this form you have either [downgraded UniFi Protect](https:\/\/www.home-assistant.io\/integrations\/unifiprotect#downgrading-unifi-protect) or you agree to run an unsupported version of UniFi Protect.",
                                "title": "v{version} is an Early Access version"
                            }
                        }
                    },
                    "title": "UniFi Protect v{version} is an Early Access version"
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "all_updates": "Realtime metrics (WARNING: Greatly increases CPU usage)",
                            "allow_ea": "Allow Early Access versions of Protect (WARNING: Will mark your integration as unsupported)",
                            "disable_rtsp": "Disable the RTSP stream",
                            "max_media": "Max number of event to load for Media Browser (increases RAM usage)",
                            "override_connection_host": "Override Connection Host"
                        },
                        "description": "Realtime metrics option should only be enabled if you have enabled the diagnostics sensors and want them updated in realtime. If not enabled, they will only update once every 15 minutes.",
                        "title": "UniFi Protect Options"
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "unifiprotect__license_plate": {
                            "none": "Clear"
                        }
                    }
                }
            },
            "services": {
                "add_doorbell_text": {
                    "description": "Adds a new custom message for doorbells.",
                    "fields": {
                        "device_id": {
                            "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.",
                            "name": "UniFi Protect NVR"
                        },
                        "message": {
                            "description": "New custom message to add for doorbells. Must be less than 30 characters.",
                            "name": "Custom message"
                        }
                    },
                    "name": "Add custom doorbell text"
                },
                "remove_doorbell_text": {
                    "description": "Removes an existing message for doorbells.",
                    "fields": {
                        "device_id": {
                            "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.",
                            "name": "UniFi Protect NVR"
                        },
                        "message": {
                            "description": "Existing custom message to remove for doorbells.",
                            "name": "Custom message"
                        }
                    },
                    "name": "Remove custom doorbell text"
                },
                "set_chime_paired_doorbells": {
                    "description": "Use to set the paired doorbell(s) with a smart chime.",
                    "fields": {
                        "device_id": {
                            "description": "The chimes to link to the doorbells to.",
                            "name": "Chime"
                        },
                        "doorbells": {
                            "description": "The doorbells to link to the chime.",
                            "name": "Doorbells"
                        }
                    },
                    "name": "Set chime paired doorbells"
                },
                "set_default_doorbell_text": {
                    "description": "Sets the default doorbell message. This will be the message that is automatically selected when a message \"expires\".",
                    "fields": {
                        "device_id": {
                            "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.",
                            "name": "UniFi Protect NVR"
                        },
                        "message": {
                            "description": "The default message for your doorbell. Must be less than 30 characters.",
                            "name": "Default message"
                        }
                    },
                    "name": "Set default doorbell text"
                }
            }
        },
        "universal": {
            "services": {
                "reload": {
                    "description": "Reloads universal media players from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "upb": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_upb_file": "Missing or invalid UPB UPStart export file, check the name and path of the file.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "address": "Address (see description above)",
                            "file_path": "Path and name of the UPStart UPB export file.",
                            "protocol": "Protocol"
                        },
                        "description": "Connect a Universal Powerline Bus Powerline Interface Module (UPB PIM). The address string must be in the form 'address[:port]' for 'tcp'. The port is optional and defaults to 2101. Example: '192.168.1.42'. For the serial protocol, the address must be in the form 'tty[:baud]'. The baud is optional and defaults to 4800. Example: '\/dev\/ttyS1'.",
                        "title": "Connect to UPB PIM"
                    }
                }
            },
            "services": {
                "light_blink": {
                    "description": "Blinks a light.",
                    "fields": {
                        "rate": {
                            "description": "Amount of time that the link flashes on.",
                            "name": "Rate"
                        }
                    },
                    "name": "Blink light"
                },
                "light_fade_start": {
                    "description": "Starts fading a light either up or down from current brightness.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness.",
                            "name": "Brightness"
                        },
                        "brightness_pct": {
                            "description": "Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness.",
                            "name": "Brightness percentage"
                        },
                        "rate": {
                            "description": "Rate for light to transition to new brightness.",
                            "name": "Rate"
                        }
                    },
                    "name": "Start light fade"
                },
                "light_fade_stop": {
                    "description": "Stops a light fade.",
                    "name": "Stop light fade"
                },
                "link_blink": {
                    "description": "Blinks a link.",
                    "fields": {
                        "blink_rate": {
                            "description": "Amount of time that the link flashes on.",
                            "name": "Blink rate"
                        }
                    },
                    "name": "Blink link"
                },
                "link_deactivate": {
                    "description": "Deactivates a UPB scene.",
                    "name": "Deactivate link"
                },
                "link_fade_start": {
                    "description": "Starts fading a link either up or down from current brightness.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness, where 0 turns the scene off, 1 is the minimum brightness and 255 is the maximum brightness.",
                            "name": "Brightness"
                        },
                        "brightness_pct": {
                            "description": "Number indicating percentage of full brightness, where 0 turns the scene off, 1 is the minimum brightness and 100 is the maximum brightness.",
                            "name": "Brightness percentage"
                        },
                        "rate": {
                            "description": "Amount of time for scene to transition to new brightness.",
                            "name": "Rate"
                        }
                    },
                    "name": "Start link fade"
                },
                "link_fade_stop": {
                    "description": "Stops a link fade.",
                    "name": "Stop link fade"
                },
                "link_goto": {
                    "description": "Set scene to brightness.",
                    "fields": {
                        "brightness": {
                            "description": "Number indicating brightness, where 0 turns the scene off, 1 is the minimum brightness and 255 is the maximum brightness.",
                            "name": "Brightness"
                        },
                        "brightness_pct": {
                            "description": "Number indicating percentage of full brightness, where 0 turns the scene off, 1 is the minimum brightness and 100 is the maximum brightness.",
                            "name": "Brightness percentage"
                        },
                        "rate": {
                            "description": "Amount of time for scene to transition to new brightness.",
                            "name": "Rate"
                        }
                    },
                    "name": "Go to link"
                }
            }
        },
        "upcloud": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Update interval in seconds, minimum 30"
                        }
                    }
                }
            }
        },
        "update": {
            "device_automation": {
                "trigger_type": {
                    "changed_states": "{entity_name} update availability changed",
                    "turned_off": "{entity_name} became up-to-date",
                    "turned_on": "{entity_name} got an update available"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Update"
                },
                "firmware": {
                    "name": "Firmware"
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "clear_skipped": {
                    "description": "Removes the skipped version marker from an update.",
                    "name": "Clear skipped update"
                },
                "install": {
                    "description": "Installs an update for this device or service.",
                    "fields": {
                        "backup": {
                            "description": "If supported by the integration, this creates a backup before starting the update .",
                            "name": "Backup"
                        },
                        "version": {
                            "description": "The version to install. If omitted, the latest version will be installed.",
                            "name": "Version"
                        }
                    },
                    "name": "Install update"
                },
                "skip": {
                    "description": "Marks currently available update as skipped.",
                    "name": "Skip update"
                }
            },
            "title": "Update"
        },
        "upnp": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "incomplete_discovery": "Incomplete discovery",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "one": "One",
                    "other": "Other"
                },
                "flow_title": "{name}",
                "step": {
                    "ssdp_confirm": {
                        "description": "Do you want to set up this UPnP\/IGD device?"
                    },
                    "user": {
                        "data": {
                            "unique_id": "Device"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "wan_status": {
                        "name": "WAN status"
                    }
                },
                "sensor": {
                    "data_received": {
                        "name": "Data received"
                    },
                    "data_sent": {
                        "name": "Data sent"
                    },
                    "download_speed": {
                        "name": "Download speed"
                    },
                    "external_ip": {
                        "name": "External IP"
                    },
                    "packet_download_speed": {
                        "name": "Packet download speed"
                    },
                    "packet_upload_speed": {
                        "name": "Packet upload speed"
                    },
                    "packets_received": {
                        "name": "Packets received"
                    },
                    "packets_sent": {
                        "name": "Packets sent"
                    },
                    "upload_speed": {
                        "name": "Upload speed"
                    },
                    "uptime": {
                        "name": "Uptime"
                    },
                    "wan_status": {
                        "name": "WAN status"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "scan_interval": "Update interval (seconds, minimal 30)"
                        }
                    }
                }
            }
        },
        "uptime": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "issues": {
                "removed_yaml": {
                    "description": "Configuring Uptime using YAML has been removed.\n\nYour existing YAML configuration is not used by Home Assistant.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Uptime YAML configuration has been removed"
                }
            },
            "title": "Uptime"
        },
        "uptimerobot": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_failed_existing": "Could not update the config entry, please remove the integration and set it up again.",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_api_key": "Invalid API key",
                    "not_main_key": "Wrong API key type detected, use the 'main' API key",
                    "reauth_failed_matching_account": "The API key you provided does not match the account ID for existing configuration.",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "You need to supply a new 'main' API key from UptimeRobot",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key"
                        },
                        "description": "You need to supply the 'main' API key from UptimeRobot"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "monitor_status": {
                        "state": {
                            "down": "Down",
                            "not_checked_yet": "Not checked yet",
                            "pause": "Pause",
                            "seems_down": "Seems down",
                            "up": "Up"
                        }
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "uptimerobot__monitor_status": {
                            "down": "Down",
                            "not_checked_yet": "Not checked yet",
                            "pause": "Pause",
                            "seems_down": "Seems down",
                            "up": "Up"
                        }
                    }
                }
            }
        },
        "uscis": {
            "issues": {
                "pending_removal": {
                    "description": "The U.S. Citizenship and Immigration Services (USCIS) integration is pending removal from Home Assistant and will no longer be available as of Home Assistant 2022.10.\n\nThe integration is being removed, because it relies on webscraping, which is not allowed.\n\nRemove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The USCIS integration is being removed"
                }
            }
        },
        "utility_meter": {
            "config": {
                "step": {
                    "user": {
                        "data": {
                            "cycle": "Meter reset cycle",
                            "delta_values": "Delta values",
                            "name": "Name",
                            "net_consumption": "Net consumption",
                            "offset": "Meter reset offset",
                            "periodically_resetting": "Periodically resetting",
                            "source": "Input sensor",
                            "tariffs": "Supported tariffs"
                        },
                        "data_description": {
                            "delta_values": "Enable if the source values are delta values since the last reading instead of absolute values.",
                            "net_consumption": "Enable if the source is a net meter, meaning it can both increase and decrease.",
                            "offset": "Offset the day of a monthly meter reset.",
                            "periodically_resetting": "Enable if the source may periodically reset to 0, for example at boot of the measuring device. If disabled, new readings are directly recorded after data inavailability.",
                            "tariffs": "A list of supported tariffs, leave empty if only a single tariff is needed."
                        },
                        "description": "Create a sensor which tracks consumption of various utilities (e.g., energy, gas, water, heating) over a configured period of time, typically monthly. The utility meter sensor optionally supports splitting the consumption by tariffs, in that case one sensor for each tariff is created as well as a select entity to choose the current tariff.",
                        "title": "Add Utility Meter"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "periodically_resetting": "Periodically resetting",
                            "source": "Input sensor"
                        },
                        "data_description": {
                            "periodically_resetting": "Enable if the source may periodically reset to 0, for example at boot of the measuring device. If disabled, new readings are directly recorded after data inavailability."
                        }
                    }
                }
            },
            "selector": {
                "cycle": {
                    "options": {
                        "bimonthly": "Every two months",
                        "daily": "Daily",
                        "hourly": "Hourly",
                        "monthly": "Monthly",
                        "none": "No cycle",
                        "quarter-hourly": "Every 15 minutes",
                        "quarterly": "Quarterly",
                        "weekly": "Weekly",
                        "yearly": "Yearly"
                    }
                }
            },
            "services": {
                "calibrate": {
                    "description": "Calibrates a utility meter sensor.",
                    "fields": {
                        "value": {
                            "description": "Value to which set the meter.",
                            "name": "Value"
                        }
                    },
                    "name": "Calibrate"
                },
                "reset": {
                    "description": "Resets all counters of a utility meter.",
                    "name": "Reset"
                }
            },
            "title": "Utility Meter"
        },
        "vacuum": {
            "device_automation": {
                "action_type": {
                    "clean": "Let {entity_name} clean",
                    "dock": "Let {entity_name} return to the dock"
                },
                "condition_type": {
                    "is_cleaning": "{entity_name} is cleaning",
                    "is_docked": "{entity_name} is docked"
                },
                "trigger_type": {
                    "cleaning": "{entity_name} started cleaning",
                    "docked": "{entity_name} docked"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Vacuum",
                    "state": {
                        "cleaning": "Cleaning",
                        "docked": "Docked",
                        "error": "Error",
                        "idle": "Idle",
                        "off": "Off",
                        "on": "On",
                        "paused": "Paused",
                        "returning": "Returning to dock"
                    }
                }
            },
            "issues": {
                "deprecated_vacuum_base_class": {
                    "description": "The custom integration `{platform}` is extending the deprecated base class `VacuumEntity` instead of `StateVacuumEntity`.\n\nPlease report it to the author of the `{platform}` custom integration.\n\nOnce an updated version of `{platform}` is available, install it and restart Home Assistant to fix this issue.",
                    "title": "The {platform} custom integration is using deprecated vacuum feature"
                },
                "deprecated_vacuum_base_class_url": {
                    "description": "The custom integration `{platform}` is extending the deprecated base class `VacuumEntity` instead of `StateVacuumEntity`.\n\nPlease create a bug report at {issue_tracker}.\n\nOnce an updated version of `{platform}` is available, install it and restart Home Assistant to fix this issue.",
                    "title": "The {platform} custom integration is using deprecated vacuum feature"
                },
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "clean_spot": {
                    "description": "Tells the vacuum cleaner to do a spot clean-up.",
                    "name": "Clean spot"
                },
                "locate": {
                    "description": "Locates the vacuum cleaner robot.",
                    "name": "Locate"
                },
                "pause": {
                    "description": "Pauses the cleaning task.",
                    "name": "Pause"
                },
                "return_to_base": {
                    "description": "Tells the vacuum cleaner to return to its dock.",
                    "name": "Return to dock"
                },
                "send_command": {
                    "description": "Sends a command to the vacuum cleaner.",
                    "fields": {
                        "command": {
                            "description": "Command to execute. The commands are integration-specific.",
                            "name": "Command"
                        },
                        "params": {
                            "description": "Parameters for the command. The parameters are integration-specific.",
                            "name": "Parameters"
                        }
                    },
                    "name": "Send command"
                },
                "set_fan_speed": {
                    "description": "Sets the fan speed of the vacuum cleaner.",
                    "fields": {
                        "fan_speed": {
                            "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like 'medium'. Some use a percentage, between 0 and 100.",
                            "name": "Fan speed"
                        }
                    },
                    "name": "Set fan speed"
                },
                "start": {
                    "description": "Starts or resumes the cleaning task.",
                    "name": "Start"
                },
                "start_pause": {
                    "description": "Starts, pauses, or resumes the cleaning task.",
                    "name": "Start\/pause"
                },
                "stop": {
                    "description": "Stops the current cleaning task.",
                    "name": "Stop"
                },
                "turn_off": {
                    "description": "Stops the current cleaning task and returns to its dock.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Starts a new cleaning task.",
                    "name": "Turn on"
                }
            },
            "title": "Vacuum"
        },
        "vallox": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "post_heater": {
                        "name": "Post heater"
                    }
                },
                "number": {
                    "supply_air_target_away": {
                        "name": "Supply air temperature (Away)"
                    },
                    "supply_air_target_boost": {
                        "name": "Supply air temperature (Boost)"
                    },
                    "supply_air_target_home": {
                        "name": "Supply air temperature (Home)"
                    }
                },
                "sensor": {
                    "cell_state": {
                        "name": "Cell state"
                    },
                    "current_profile": {
                        "name": "Current profile"
                    },
                    "efficiency": {
                        "name": "Efficiency"
                    },
                    "exhaust_air": {
                        "name": "Exhaust air"
                    },
                    "extract_air": {
                        "name": "Extract air"
                    },
                    "extract_fan_speed": {
                        "name": "Extract fan speed"
                    },
                    "fan_speed": {
                        "name": "Fan speed"
                    },
                    "optional_air": {
                        "name": "Optional air"
                    },
                    "outdoor_air": {
                        "name": "Outdoor air"
                    },
                    "remaining_time_for_filter": {
                        "name": "Remaining time for filter"
                    },
                    "supply_air": {
                        "name": "Supply air"
                    },
                    "supply_cell_air": {
                        "name": "Supply cell air"
                    },
                    "supply_fan_speed": {
                        "name": "Supply fan speed"
                    }
                },
                "switch": {
                    "bypass_locked": {
                        "name": "Bypass locked"
                    }
                }
            },
            "services": {
                "set_profile_fan_speed_away": {
                    "description": "Sets the fan speed of the Away profile.",
                    "fields": {
                        "fan_speed": {
                            "description": "Fan speed.",
                            "name": "Fan speed"
                        }
                    },
                    "name": "Set profile fan speed away"
                },
                "set_profile_fan_speed_boost": {
                    "description": "Sets the fan speed of the Boost profile.",
                    "fields": {
                        "fan_speed": {
                            "description": "Fan speed.",
                            "name": "Fan speed"
                        }
                    },
                    "name": "Set profile fan speed boost"
                },
                "set_profile_fan_speed_home": {
                    "description": "Sets the fan speed of the Home profile.",
                    "fields": {
                        "fan_speed": {
                            "description": "Fan speed.",
                            "name": "Fan speed"
                        }
                    },
                    "name": "Set profile fan speed home"
                }
            }
        },
        "velbus": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "name": "The name for this velbus connection",
                            "port": "Connection string"
                        },
                        "title": "Define the velbus connection type"
                    }
                }
            },
            "services": {
                "clear_cache": {
                    "description": "Clears the velbuscache and then starts a new scan.",
                    "fields": {
                        "address": {
                            "description": "The module address in decimal format, if this is provided we only clear this module, if nothing is provided we clear the whole cache directory (all modules) The decimal addresses are displayed in front of the modules listed at the integration page.\n.",
                            "name": "Address"
                        },
                        "interface": {
                            "description": "The velbus interface to send the command to, this will be the same value as used during configuration.",
                            "name": "Interface"
                        }
                    },
                    "name": "Clear cache"
                },
                "scan": {
                    "description": "Scans the velbus modules, this will be need if you see unknown module warnings in the logs, or when you added new modules.",
                    "fields": {
                        "interface": {
                            "description": "The velbus interface to send the command to, this will be the same value as used during configuration.",
                            "name": "Interface"
                        }
                    },
                    "name": "Scan"
                },
                "set_memo_text": {
                    "description": "Sets the memo text to the display of modules like VMBGPO, VMBGPOD Be sure the page(s) of the module is configured to display the memo text.\n.",
                    "fields": {
                        "address": {
                            "description": "The module address in decimal format. The decimal addresses are displayed in front of the modules listed at the integration page.\n.",
                            "name": "Address"
                        },
                        "interface": {
                            "description": "The velbus interface to send the command to, this will be the same value as used during configuration.",
                            "name": "Interface"
                        },
                        "memo_text": {
                            "description": "The actual text to be displayed. Text is limited to 64 characters.\n.",
                            "name": "Memo text"
                        }
                    },
                    "name": "Set memo text"
                },
                "sync_clock": {
                    "description": "Syncs the velbus modules clock to the Home Assistant clock, this is the same as the 'sync clock' from VelbusLink.",
                    "fields": {
                        "interface": {
                            "description": "The velbus interface to send the command to, this will be the same value as used during configuration.",
                            "name": "Interface"
                        }
                    },
                    "name": "Sync clock"
                }
            }
        },
        "velux": {
            "services": {
                "reboot_gateway": {
                    "description": "Reboots the KLF200 Gateway.",
                    "name": "Reboot gateway"
                }
            }
        },
        "venstar": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "pin": "PIN Code",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username"
                        },
                        "title": "Connect to the Venstar Thermostat"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "schedule_part": {
                        "state": {
                            "day": "Day",
                            "evening": "Evening",
                            "inactive": "Inactive",
                            "morning": "Morning",
                            "night": "Night"
                        }
                    }
                }
            }
        },
        "vera": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Could not connect to controller with URL {base_url}"
                },
                "step": {
                    "user": {
                        "data": {
                            "exclude": "Vera device ids to exclude from Home Assistant.",
                            "lights": "Vera switch device ids to treat as lights in Home Assistant.",
                            "vera_controller_url": "Controller URL"
                        },
                        "data_description": {
                            "vera_controller_url": "It should look like this: http:\/\/192.168.1.161:3480"
                        }
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "exclude": "Vera device ids to exclude from Home Assistant.",
                            "lights": "Vera switch device ids to treat as lights in Home Assistant."
                        },
                        "description": "See the vera documentation for details on optional parameters: https:\/\/www.home-assistant.io\/integrations\/vera\/. Note: Any changes here will need a restart to the home assistant server. To clear values, provide a space.",
                        "title": "Vera controller options"
                    }
                }
            }
        },
        "verisure": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error",
                    "unknown_mfa": "Unknown error occurred during MFA set up"
                },
                "step": {
                    "installation": {
                        "data": {
                            "giid": "Installation"
                        },
                        "description": "Home Assistant found multiple Verisure installations in your My Pages account. Please, select the installation to add to Home Assistant."
                    },
                    "mfa": {
                        "data": {
                            "code": "Verification Code",
                            "description": "Your account has 2-step verification enabled. Please enter the verification code Verisure sends to you."
                        }
                    },
                    "reauth_confirm": {
                        "data": {
                            "description": "Re-authenticate with your Verisure My Pages account.",
                            "email": "Email",
                            "password": "Password"
                        }
                    },
                    "reauth_mfa": {
                        "data": {
                            "code": "Verification Code",
                            "description": "Your account has 2-step verification enabled. Please enter the verification code Verisure sends to you."
                        }
                    },
                    "user": {
                        "data": {
                            "description": "Sign-in with your Verisure My Pages account.",
                            "email": "Email",
                            "password": "Password"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "ethernet": {
                        "name": "Ethernet status"
                    }
                },
                "sensor": {
                    "humidity": {
                        "name": "Humidity"
                    },
                    "temperature": {
                        "name": "Temperature"
                    }
                }
            },
            "options": {
                "error": {
                    "code_format_mismatch": "The default PIN code does not match the required number of digits"
                },
                "step": {
                    "init": {
                        "data": {
                            "lock_code_digits": "Number of digits in PIN code for locks",
                            "lock_default_code": "Default PIN code for locks, used if none is given"
                        }
                    }
                }
            },
            "services": {
                "capture_smartcam": {
                    "description": "Captures a new image from a Verisure SmartCam.",
                    "name": "Capture SmartCam image"
                },
                "disable_autolock": {
                    "description": "Disables autolock of a Verisure Lockguard Smartlock.",
                    "name": "Disable autolock"
                },
                "enable_autolock": {
                    "description": "Enables autolock of a Verisure Lockguard Smartlock.",
                    "name": "Enable autolock"
                }
            }
        },
        "version": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "step": {
                    "user": {
                        "data": {
                            "version_source": "Version source"
                        },
                        "description": "Select the source you want to track versions from",
                        "title": "Select installation type"
                    },
                    "version_source": {
                        "data": {
                            "beta": "Include beta versions",
                            "board": "Which board should be tracked",
                            "channel": "Which channel should be tracked",
                            "image": "Which image should be tracked"
                        },
                        "description": "Configure {version_source} version tracking",
                        "title": "Configure"
                    }
                }
            },
            "title": "Version"
        },
        "vesync": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Email"
                        },
                        "title": "Enter Username and Password"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_quality": {
                        "name": "Air quality"
                    },
                    "current_power": {
                        "name": "Current power"
                    },
                    "current_voltage": {
                        "name": "Current voltage"
                    },
                    "energy_month": {
                        "name": "Energy use monthly"
                    },
                    "energy_today": {
                        "name": "Energy use today"
                    },
                    "energy_week": {
                        "name": "Energy use weekly"
                    },
                    "energy_year": {
                        "name": "Energy use yearly"
                    },
                    "filter_life": {
                        "name": "Filter lifetime"
                    }
                }
            },
            "services": {
                "update_devices": {
                    "description": "Adds new VeSync devices to Home Assistant.",
                    "name": "Update devices"
                }
            }
        },
        "vicare": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "user": {
                        "data": {
                            "client_id": "API Key",
                            "heating_type": "Heating type",
                            "password": "Password",
                            "username": "Email"
                        },
                        "description": "Set up ViCare integration. To generate API key go to https:\/\/developer.viessmann.com"
                    }
                }
            },
            "services": {
                "set_vicare_mode": {
                    "description": "Set a ViCare mode.",
                    "fields": {
                        "vicare_mode": {
                            "description": "ViCare mode.",
                            "name": "ViCare mode"
                        }
                    },
                    "name": "Set ViCare mode"
                }
            }
        },
        "vilfo": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "access_token": "Access Token",
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "boot_time": {
                        "name": "Boot time"
                    },
                    "load": {
                        "name": "Load"
                    }
                }
            }
        },
        "vizio": {
            "config": {
                "abort": {
                    "already_configured_device": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "updated_entry": "This entry has already been set up but the name, apps, and\/or options defined in the configuration do not match the previously imported configuration, so the configuration entry has been updated accordingly."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "complete_pairing_failed": "Unable to complete pairing. Ensure the PIN you provided is correct and the TV is still powered and connected to the network before resubmitting.",
                    "existing_config_entry_found": "An existing VIZIO SmartCast Device config entry with the same serial number has already been configured. You must delete the existing entry in order to configure this one."
                },
                "step": {
                    "pair_tv": {
                        "data": {
                            "pin": "PIN Code"
                        },
                        "description": "Your TV should be displaying a code. Enter that code into the form and then continue to the next step to complete the pairing.",
                        "title": "Complete Pairing Process"
                    },
                    "pairing_complete": {
                        "description": "Your VIZIO SmartCast Device is now connected to Home Assistant.",
                        "title": "Pairing Complete"
                    },
                    "pairing_complete_import": {
                        "description": "Your VIZIO SmartCast Device is now connected to Home Assistant.\n\nYour access token is '**{access_token}**'.",
                        "title": "Pairing Complete"
                    },
                    "user": {
                        "data": {
                            "access_token": "Access Token",
                            "device_class": "Device Type",
                            "host": "Host",
                            "name": "Name"
                        },
                        "description": "An access token is only needed for TVs. If you are configuring a TV and do not have an access token yet, leave it blank to go through a pairing process.",
                        "title": "VIZIO SmartCast Device"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "apps_to_include_or_exclude": "Apps to Include or Exclude",
                            "include_or_exclude": "Include or Exclude Apps?",
                            "volume_step": "Volume Step Size"
                        },
                        "description": "If you have a Smart TV, you can optionally filter your source list by choosing which apps to include or exclude in your source list.",
                        "title": "Update VIZIO SmartCast Device Options"
                    }
                }
            },
            "services": {
                "update_setting": {
                    "description": "Updates the value of a setting on a Vizio media player device.",
                    "fields": {
                        "new_value": {
                            "description": "The new value for the setting.",
                            "name": "New value"
                        },
                        "setting_name": {
                            "description": "The name of the setting to be changed. Available settings for a given setting_type are listed in the '[setting_type]_settings' property.",
                            "name": "Setting name"
                        },
                        "setting_type": {
                            "description": "The type of setting to be changed. Available types are listed in the 'setting_types' property.",
                            "name": "Setting type"
                        }
                    },
                    "name": "Update setting"
                }
            }
        },
        "vlc_telnet": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{host}",
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to connect to add-on {addon}?"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please enter the correct password for host: {host}"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name",
                            "password": "Password",
                            "port": "Port"
                        }
                    }
                }
            }
        },
        "vodafone_station": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "already_logged": "User already logged-in, please try again later.",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "model_not_supported": "The device model is currently unsupported.",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "already_logged": "User already logged-in, please try again later.",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "model_not_supported": "The device model is currently unsupported.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{host}",
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please enter the correct password for host: {host}"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "password": "Password",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "button": {
                    "dsl_reconnect": {
                        "name": "DSL reconnect"
                    },
                    "fiber_reconnect": {
                        "name": "Fiber reconnect"
                    },
                    "internet_key_reconnect": {
                        "name": "Internet key reconnect"
                    }
                },
                "sensor": {
                    "active_connection": {
                        "name": "Active connection",
                        "state": {
                            "dsl": "xDSL",
                            "fiber": "Fiber",
                            "internet_key": "Internet key",
                            "unknown": "Unknown"
                        }
                    },
                    "down_stream": {
                        "name": "WAN download rate"
                    },
                    "external_ip_key": {
                        "name": "WAN internet key address"
                    },
                    "external_ipv4": {
                        "name": "WAN IPv4 address"
                    },
                    "external_ipv6": {
                        "name": "WAN IPv6 address"
                    },
                    "fw_version": {
                        "name": "Firmware version"
                    },
                    "phone_num1": {
                        "name": "Phone number (1)"
                    },
                    "phone_num2": {
                        "name": "Phone number (2)"
                    },
                    "sys_cpu_usage": {
                        "name": "CPU usage"
                    },
                    "sys_memory_usage": {
                        "name": "Memory usage"
                    },
                    "sys_reboot_cause": {
                        "name": "Reboot cause"
                    },
                    "sys_uptime": {
                        "name": "Uptime"
                    },
                    "up_stream": {
                        "name": "WAN upload rate"
                    }
                }
            }
        },
        "voip": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "invalid_ip_address": "Invalid IPv4 address."
                },
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        },
                        "description": "Receive Voice over IP calls to interact with Assist."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "call_active": {
                        "name": "Call Active"
                    },
                    "call_in_progress": {
                        "name": "Call in progress"
                    }
                },
                "select": {
                    "pipeline": {
                        "name": "Assist pipeline",
                        "state": {
                            "preferred": "Preferred"
                        }
                    },
                    "vad_sensitivity": {
                        "name": "Finished speaking detection",
                        "state": {
                            "aggressive": "Aggressive",
                            "default": "Default",
                            "relaxed": "Relaxed"
                        }
                    }
                },
                "switch": {
                    "allow_call": {
                        "name": "Allow calls"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "sip_port": "SIP port"
                        }
                    }
                }
            }
        },
        "volumio": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Cannot connect to discovered Volumio"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to add Volumio (`{name}`) to Home Assistant?",
                        "title": "Discovered Volumio"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            }
        },
        "volvooncall": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "mutable": "Allow Remote Start \/ Lock \/ etc.",
                            "password": "Password",
                            "region": "Region",
                            "unit_system": "Unit System",
                            "username": "Username"
                        }
                    }
                }
            }
        },
        "vulcan": {
            "config": {
                "abort": {
                    "all_student_already_configured": "All students have already been added.",
                    "already_configured": "That student has already been added.",
                    "no_matching_entries": "No matching entries found, please use different account or remove integration with outdated student..",
                    "reauth_successful": "Reauth successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "expired_credentials": "Expired credentials - please create new on Vulcan mobile app registration page",
                    "expired_token": "Expired token - please generate a new token",
                    "invalid_pin": "Invalid pin",
                    "invalid_symbol": "Invalid symbol",
                    "invalid_token": "Invalid access token",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "add_next_config_entry": {
                        "data": {
                            "use_saved_credentials": "Use saved credentials"
                        },
                        "description": "Add another student."
                    },
                    "auth": {
                        "data": {
                            "pin": "PIN Code",
                            "region": "Symbol",
                            "token": "Token"
                        },
                        "description": "Login to your Vulcan Account using mobile app registration page."
                    },
                    "reauth_confirm": {
                        "data": {
                            "pin": "PIN Code",
                            "region": "Symbol",
                            "token": "Token"
                        },
                        "description": "Login to your Vulcan Account using mobile app registration page."
                    },
                    "select_saved_credentials": {
                        "data": {
                            "credentials": "Login"
                        },
                        "description": "Select saved credentials."
                    },
                    "select_student": {
                        "data": {
                            "student_name": "Select student"
                        },
                        "description": "Select student, you can add more students by adding integration again."
                    }
                }
            },
            "entity": {
                "calendar": {
                    "calendar": {
                        "name": "Calendar"
                    }
                }
            }
        },
        "wake_on_lan": {
            "issues": {
                "moved_yaml": {
                    "description": "Configuring Wake on Lan using YAML has been moved to integration key.\n\nYour existing YAML configuration will be working for 2 more versions.\n\nMigrate your YAML configuration to the integration key according to the documentation.",
                    "title": "The Wake on Lan YAML configuration has been moved"
                }
            },
            "services": {
                "send_magic_packet": {
                    "description": "Sends a 'magic packet' to wake up a device with 'Wake-On-LAN' capabilities.",
                    "fields": {
                        "broadcast_address": {
                            "description": "Broadcast IP where to send the magic packet.",
                            "name": "Broadcast address"
                        },
                        "broadcast_port": {
                            "description": "Port where to send the magic packet.",
                            "name": "Broadcast port"
                        },
                        "mac": {
                            "description": "MAC address of the device to wake up.",
                            "name": "MAC address"
                        }
                    },
                    "name": "Send magic packet"
                }
            }
        },
        "wallbox": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "reauth_invalid": "Re-authentication failed; Serial Number does not match original",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "station": "Station Serial Number",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "lock": {
                    "lock": {
                        "name": "Lock"
                    }
                },
                "number": {
                    "maximum_charging_current": {
                        "name": "Maximum charging current"
                    }
                },
                "sensor": {
                    "added_discharged_energy": {
                        "name": "Discharged energy"
                    },
                    "added_energy": {
                        "name": "Added energy"
                    },
                    "added_range": {
                        "name": "Added range"
                    },
                    "charging_power": {
                        "name": "Charging power"
                    },
                    "charging_speed": {
                        "name": "Charging speed"
                    },
                    "cost": {
                        "name": "Cost"
                    },
                    "current_mode": {
                        "name": "Current mode"
                    },
                    "depot_price": {
                        "name": "Depot price"
                    },
                    "energy_price": {
                        "name": "Energy price"
                    },
                    "max_available_power": {
                        "name": "Max available power"
                    },
                    "max_charging_current": {
                        "name": "Max charging current"
                    },
                    "state_of_charge": {
                        "name": "State of charge"
                    },
                    "status_description": {
                        "name": "Status description"
                    }
                },
                "switch": {
                    "pause_resume": {
                        "name": "Pause\/resume"
                    }
                }
            }
        },
        "waqi": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "map": {
                        "data": {
                            "location": "Location"
                        },
                        "description": "Select a location to get the closest measuring station."
                    },
                    "station_number": {
                        "data": {
                            "station_number": "Measuring station number"
                        }
                    },
                    "user": {
                        "data": {
                            "api_key": "API Key",
                            "location": "Location",
                            "method": "How do you want to select a measuring station?"
                        },
                        "description": "Select a location to get the closest measuring station."
                    }
                }
            },
            "issues": {
                "deprecated_yaml_import_issue_already_configured": {
                    "description": "Configuring World Air Quality Index using YAML is being removed but the measuring station was already imported when trying to import the YAML configuration.\n\nEnsure the imported configuration is correct and remove the World Air Quality Index YAML configuration from your configuration.yaml file and continue to [set up the integration]({url}) manually.",
                    "title": "The WAQI YAML configuration import failed"
                },
                "deprecated_yaml_import_issue_cannot_connect": {
                    "description": "Configuring World Air Quality Index using YAML is being removed but there was an connection error importing your YAML configuration.\n\nEnsure connection to WAQI works and restart Home Assistant to try again or remove the World Air Quality Index YAML configuration from your configuration.yaml file and continue to [set up the integration]({url}) manually.",
                    "title": "The WAQI YAML configuration import failed"
                },
                "deprecated_yaml_import_issue_invalid_auth": {
                    "description": "Configuring World Air Quality Index using YAML is being removed but there was an authentication error importing your YAML configuration.\n\nCorrect the YAML configuration and restart Home Assistant to try again or remove the World Air Quality Index YAML configuration from your configuration.yaml file and continue to [set up the integration]({url}) manually.",
                    "title": "The World Air Quality Index YAML configuration import failed"
                },
                "deprecated_yaml_import_issue_none_found": {
                    "description": "Configuring World Air Quality Index using YAML is being removed but there weren't any stations imported because they couldn't be found.\n\nEnsure the imported configuration is correct and remove the World Air Quality Index YAML configuration from your configuration.yaml file and continue to [set up the integration]({url}) manually.",
                    "title": "The WAQI YAML configuration import failed"
                }
            },
            "selector": {
                "method": {
                    "options": {
                        "map": "Select nearest from point on the map",
                        "station_number": "Enter a station number"
                    }
                }
            }
        },
        "water_heater": {
            "device_automation": {
                "action_type": {
                    "turn_off": "Turn off {entity_name}",
                    "turn_on": "Turn on {entity_name}"
                }
            },
            "entity_component": {
                "_": {
                    "name": "Water heater",
                    "state": {
                        "eco": "Eco",
                        "electric": "Electric",
                        "gas": "Gas",
                        "heat_pump": "Heat Pump",
                        "high_demand": "High Demand",
                        "off": "Off",
                        "performance": "Performance"
                    },
                    "state_attributes": {
                        "away_mode": {
                            "name": "Away mode",
                            "state": {
                                "off": "Off",
                                "on": "On"
                            }
                        }
                    }
                }
            },
            "issues": {
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "services": {
                "set_away_mode": {
                    "description": "Turns away mode on\/off.",
                    "fields": {
                        "away_mode": {
                            "description": "New value of away mode.",
                            "name": "Away mode"
                        }
                    },
                    "name": "Set away mode"
                },
                "set_operation_mode": {
                    "description": "Sets the operation mode.",
                    "fields": {
                        "operation_mode": {
                            "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation.",
                            "name": "Operation mode"
                        }
                    },
                    "name": "Set operation mode"
                },
                "set_temperature": {
                    "description": "Sets the target temperature.",
                    "fields": {
                        "operation_mode": {
                            "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation.",
                            "name": "Operation mode"
                        },
                        "temperature": {
                            "description": "New target temperature for the water heater.",
                            "name": "Temperature"
                        }
                    },
                    "name": "Set temperature"
                },
                "turn_off": {
                    "description": "Turns water heater off.",
                    "name": "Turn off"
                },
                "turn_on": {
                    "description": "Turns water heater on.",
                    "name": "Turn on"
                }
            }
        },
        "watttime": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error",
                    "unknown_coordinates": "No data for latitude\/longitude"
                },
                "step": {
                    "coordinates": {
                        "data": {
                            "latitude": "Latitude",
                            "longitude": "Longitude"
                        },
                        "description": "Input the latitude and longitude to monitor:"
                    },
                    "location": {
                        "data": {
                            "location_type": "Location"
                        },
                        "description": "Pick a location to monitor:"
                    },
                    "reauth_confirm": {
                        "data": {
                            "password": "Password"
                        },
                        "description": "Please re-enter the password for {username}:",
                        "title": "Reauthenticate Integration"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "description": "Input your username and password:"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "marginal_operating_emissions_rate": {
                        "name": "Marginal operating emissions rate"
                    },
                    "relative_marginal_emissions_intensity": {
                        "name": "Relative marginal emissions intensity"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "show_on_map": "Show monitored location on the map"
                        },
                        "title": "Configure WattTime"
                    }
                }
            }
        },
        "waze_travel_time": {
            "config": {
                "abort": {
                    "already_configured": "Location is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "destination": "Destination",
                            "name": "Name",
                            "origin": "Origin",
                            "region": "Region"
                        },
                        "description": "For Origin and Destination, enter the address or the GPS coordinates of the location (GPS coordinates has to be separated by a comma). You can also enter an entity id which provides this information in its state, an entity id with latitude and longitude attributes, or zone friendly name."
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "avoid_ferries": "Avoid Ferries?",
                            "avoid_subscription_roads": "Avoid Roads Needing a Vignette \/ Subscription?",
                            "avoid_toll_roads": "Avoid Toll Roads?",
                            "excl_filter": "Substring NOT in Description of Selected Route",
                            "incl_filter": "Substring in Description of Selected Route",
                            "realtime": "Realtime Travel Time?",
                            "units": "Units",
                            "vehicle_type": "Vehicle Type"
                        },
                        "description": "The `substring` inputs will allow you to force the integration to use a particular route or avoid a particular route in its time travel calculation."
                    }
                }
            },
            "selector": {
                "region": {
                    "options": {
                        "au": "Australia",
                        "eu": "Europe",
                        "il": "Israel",
                        "na": "North America",
                        "us": "USA"
                    }
                },
                "units": {
                    "options": {
                        "imperial": "Imperial System",
                        "metric": "Metric System"
                    }
                },
                "vehicle_type": {
                    "options": {
                        "car": "Car",
                        "motorcycle": "Motorcycle",
                        "taxi": "Taxi"
                    }
                }
            },
            "title": "Waze Travel Time"
        },
        "weather": {
            "entity_component": {
                "_": {
                    "name": "Weather",
                    "state": {
                        "clear-night": "Clear, night",
                        "cloudy": "Cloudy",
                        "exceptional": "Exceptional",
                        "fog": "Fog",
                        "hail": "Hail",
                        "lightning": "Lightning",
                        "lightning-rainy": "Lightning, rainy",
                        "partlycloudy": "Partly cloudy",
                        "pouring": "Pouring",
                        "rainy": "Rainy",
                        "snowy": "Snowy",
                        "snowy-rainy": "Snowy, rainy",
                        "sunny": "Sunny",
                        "windy": "Windy",
                        "windy-variant": "Windy"
                    },
                    "state_attributes": {
                        "apparent_temperature": {
                            "name": "Apparent temperature"
                        },
                        "cloud_coverage": {
                            "name": "Cloud coverage"
                        },
                        "dew_point": {
                            "name": "Dew point temperature"
                        },
                        "forecast": {
                            "name": "Forecast"
                        },
                        "humidity": {
                            "name": "Humidity"
                        },
                        "ozone": {
                            "name": "Ozone"
                        },
                        "precipitation_unit": {
                            "name": "Precipitation unit"
                        },
                        "pressure": {
                            "name": "Pressure"
                        },
                        "pressure_unit": {
                            "name": "Pressure unit"
                        },
                        "temperature": {
                            "name": "Temperature"
                        },
                        "temperature_unit": {
                            "name": "Temperature unit"
                        },
                        "uv_index": {
                            "name": "UV index"
                        },
                        "visibility": {
                            "name": "Visibility"
                        },
                        "visibility_unit": {
                            "name": "Visibility unit"
                        },
                        "wind_bearing": {
                            "name": "Wind bearing"
                        },
                        "wind_gust_speed": {
                            "name": "Wind gust speed"
                        },
                        "wind_speed": {
                            "name": "Wind speed"
                        },
                        "wind_speed_unit": {
                            "name": "Wind speed unit"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_weather_forecast": {
                    "description": "The integration `{platform}` is using the deprecated forecast attribute.\n\nPlease {report_issue}.",
                    "title": "The {platform} integration is using deprecated forecast"
                },
                "deprecated_weather_forecast_no_url": {
                    "description": "The custom integration `{platform}` implements the `forecast` property or sets `self._attr_forecast` in a subclass of WeatherEntity.\n\nPlease report it to the author of the {platform} integration.\n\nOnce an updated version of `{platform}` is available, install it and restart Home Assistant to fix this issue.",
                    "title": "The {platform} custom integration is using deprecated weather forecast"
                },
                "deprecated_weather_forecast_url": {
                    "description": "The custom integration `{platform}` implements the `forecast` property or sets `self._attr_forecast` in a subclass of WeatherEntity.\n\nPlease create a bug report at {issue_tracker}.\n\nOnce an updated version of `{platform}` is available, install it and restart Home Assistant to fix this issue.",
                    "title": "The {platform} custom integration is using deprecated weather forecast"
                },
                "platform_integration_no_support": {
                    "description": "The {platform} platform for the {domain} integration does not support platform setup.\n\nPlease remove it from your configuration and restart Home Assistant to fix this issue.",
                    "title": "Platform support not supported"
                }
            },
            "selector": {
                "forecast_type": {
                    "options": {
                        "daily": "Daily",
                        "hourly": "Hourly",
                        "twice_daily": "Twice daily"
                    }
                }
            },
            "services": {
                "get_forecast": {
                    "description": "Get weather forecast.",
                    "fields": {
                        "type": {
                            "description": "Forecast type: daily, hourly or twice daily.",
                            "name": "Forecast type"
                        }
                    },
                    "name": "Get forecast"
                }
            },
            "title": "Weather"
        },
        "weatherflow": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "error": {
                    "address_in_use": "Unable to open local UDP port 50222.",
                    "cannot_connect": "UDP discovery error."
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Unable to discover Tempest WeatherFlow devices. Click submit to try again.",
                        "title": "WeatherFlow discovery"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "air_density": {
                        "name": "Air density"
                    },
                    "battery_voltage": {
                        "name": "Battery voltage"
                    },
                    "dew_point": {
                        "name": "Dew point"
                    },
                    "feels_like": {
                        "name": "Feels like"
                    },
                    "lightning_average_distance": {
                        "name": "Lightning average distance"
                    },
                    "lightning_count": {
                        "name": "Lightning count"
                    },
                    "precipitation_type": {
                        "name": "Precipitation type",
                        "state": {
                            "hail": "Hail",
                            "none": "None",
                            "rain": "Rain",
                            "rain_hail": "Rain and hail"
                        }
                    },
                    "station_pressure": {
                        "name": "Air pressure"
                    },
                    "uptime": {
                        "name": "Uptime"
                    },
                    "uv_index": {
                        "name": "UV index"
                    },
                    "vapor_pressure": {
                        "name": "Vapor pressure"
                    },
                    "wet_bulb_temperature": {
                        "name": "Wet bulb temperature"
                    },
                    "wind_direction": {
                        "name": "Wind direction"
                    },
                    "wind_direction_average": {
                        "name": "Wind direction average"
                    },
                    "wind_gust": {
                        "name": "Wind gust"
                    },
                    "wind_lull": {
                        "name": "Wind lull"
                    },
                    "wind_speed_average": {
                        "name": "Wind speed average"
                    }
                }
            }
        },
        "weatherkit": {
            "config": {
                "error": {
                    "already_configured": "Location is already configured",
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error",
                    "unsupported_location": "Apple WeatherKit does not provide data for this location."
                },
                "step": {
                    "user": {
                        "data": {
                            "key_id": "Key ID",
                            "key_pem": "Private key (.p8)",
                            "location": "Location",
                            "name": "Name",
                            "service_id": "Service ID",
                            "team_id": "Apple team ID"
                        },
                        "description": "Enter your location details and WeatherKit authentication credentials below.",
                        "title": "WeatherKit setup"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "pressure_trend": {
                        "name": "Pressure trend",
                        "state": {
                            "falling": "Falling",
                            "rising": "Rising",
                            "steady": "Steady"
                        }
                    }
                }
            }
        },
        "webhook": {
            "issues": {
                "trigger_missing_local_only": {
                    "description": "A choice needs to be made about whether the {webhook_id} webhook automation trigger is accessible from the internet. [Edit the automation]({edit}) \"{automation_name}\", (`{entity_id}`) and click the gear icon beside the Webhook ID to choose a value for 'Only accessible from the local network'",
                    "title": "Update webhook trigger: {webhook_id}"
                }
            }
        },
        "webostv": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "error_pairing": "Connected to LG webOS TV but not paired",
                    "reauth_successful": "Re-authentication was successful",
                    "reauth_unsuccessful": "Re-authentication was unsuccessful, please turn on your TV and try again."
                },
                "error": {
                    "cannot_connect": "Failed to connect, please turn on your TV or check ip address"
                },
                "flow_title": "LG webOS Smart TV",
                "step": {
                    "pairing": {
                        "description": "Click submit and accept the pairing request on your TV.\n\n![Image](\/static\/images\/config_webos.png)",
                        "title": "webOS TV Pairing"
                    },
                    "reauth_confirm": {
                        "description": "Click submit and accept the pairing request on your TV.\n\n![Image](\/static\/images\/config_webos.png)",
                        "title": "webOS TV Pairing"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        },
                        "description": "Turn on TV, fill the following fields click submit",
                        "title": "Connect to webOS TV"
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "webostv.turn_on": "Device is requested to turn on"
                }
            },
            "options": {
                "error": {
                    "cannot_retrieve": "Unable to retrieve the list of sources. Make sure device is switched on"
                },
                "step": {
                    "init": {
                        "data": {
                            "sources": "Sources list"
                        },
                        "description": "Select enabled sources",
                        "title": "Options for webOS Smart TV"
                    }
                }
            },
            "services": {
                "button": {
                    "description": "Sends a button press command.",
                    "fields": {
                        "button": {
                            "description": "Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.",
                            "name": "Button"
                        },
                        "entity_id": {
                            "description": "Name(s) of the webostv entities where to run the API method.",
                            "name": "Entity"
                        }
                    },
                    "name": "Button"
                },
                "command": {
                    "description": "Sends a command.",
                    "fields": {
                        "command": {
                            "description": "Endpoint of the command.",
                            "name": "Command"
                        },
                        "entity_id": {
                            "description": "Name(s) of the webostv entities where to run the API method.",
                            "name": "Entity"
                        },
                        "payload": {
                            "description": "An optional payload to provide to the endpoint in the format of key value pair(s).",
                            "name": "Payload"
                        }
                    },
                    "name": "Command"
                },
                "select_sound_output": {
                    "description": "Sends the TV the command to change sound output.",
                    "fields": {
                        "entity_id": {
                            "description": "Name(s) of the webostv entities to change sound output on.",
                            "name": "Entity"
                        },
                        "sound_output": {
                            "description": "Name of the sound output to switch to.",
                            "name": "Sound output"
                        }
                    },
                    "name": "Select sound output"
                }
            }
        },
        "wemo": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to set up Wemo?"
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "long_press": "Wemo button was pressed for 2 seconds"
                }
            },
            "options": {
                "error": {
                    "long_press_requires_subscription": "Local push update subscriptions must be enabled to use long-press events",
                    "polling_interval_to_small": "Polling more frequently than 10 seconds is not supported",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "init": {
                        "data": {
                            "enable_long_press": "Register for device long-press events",
                            "enable_subscription": "Subscribe to device local push updates",
                            "polling_interval_seconds": "Seconds to wait between polling the device"
                        }
                    }
                }
            },
            "services": {
                "reset_filter_life": {
                    "description": "Resets the WeMo Humidifier's filter lifetime to 100%.",
                    "name": "Reset filter lifetime"
                },
                "set_humidity": {
                    "description": "Sets the target humidity of WeMo humidifier devices.",
                    "fields": {
                        "target_humidity": {
                            "description": "Target humidity.",
                            "name": "Target humidity"
                        }
                    },
                    "name": "Set humidity"
                }
            }
        },
        "whirlpool": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "no_appliances": "No supported appliances found",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "end_time": {
                        "name": "End time"
                    },
                    "whirlpool_machine": {
                        "name": "State",
                        "state": {
                            "complete": "Complete",
                            "customer_focus_mode": "Customer Focus Mode",
                            "cycle_filling": "Cycle Filling",
                            "cycle_rinsing": "Cycle Rinsing",
                            "cycle_sensing": "Cycle Sensing",
                            "cycle_soaking": "Cycle Soaking",
                            "cycle_spinning": "Cycle Spinning",
                            "cycle_washing": "Cycle Washing",
                            "delay_countdown": "Delay Countdown",
                            "delay_paused": "Delay Paused",
                            "demo_mode": "Demo Mode",
                            "door_open": "Door Open",
                            "exception": "Exception",
                            "factory_diagnostic_mode": "Factory Diagnostic Mode",
                            "hard_stop_or_error": "Hard Stop or Error",
                            "life_test": "Life Test",
                            "pause": "Paused",
                            "power_failure": "Power Failure",
                            "running_maincycle": "Running Maincycle",
                            "running_postcycle": "Running Postcycle",
                            "service_diagnostic_mode": "Service Diagnostic Mode",
                            "setting": "Setting",
                            "smart_delay": "Smart Delay",
                            "smart_grid_pause": "Smart Delay",
                            "standby": "Standby",
                            "system_initialize": "System Initialize"
                        }
                    },
                    "whirlpool_tank": {
                        "name": "Detergent level",
                        "state": {
                            "100": "100%",
                            "25": "25%",
                            "50": "50%",
                            "active": "Active",
                            "empty": "Empty",
                            "unknown": "Unknown"
                        }
                    }
                }
            }
        },
        "whois": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured"
                },
                "error": {
                    "unexpected_response": "Unexpected response from whois server",
                    "unknown_date_format": "Unknown date format in whois server response",
                    "unknown_tld": "The given TLD is unknown or not available to this integration",
                    "whois_command_failed": "Whois command failed: could not retrieve whois information"
                },
                "step": {
                    "user": {
                        "data": {
                            "domain": "Domain name"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "admin": {
                        "name": "Admin"
                    },
                    "creation_date": {
                        "name": "Created"
                    },
                    "days_until_expiration": {
                        "name": "Days until expiration"
                    },
                    "expiration_date": {
                        "name": "Expires"
                    },
                    "last_updated": {
                        "name": "Last updated"
                    },
                    "owner": {
                        "name": "Owner"
                    },
                    "registrant": {
                        "name": "Registrant"
                    },
                    "registrar": {
                        "name": "Registrar"
                    },
                    "reseller": {
                        "name": "Reseller"
                    }
                }
            }
        },
        "wiffi": {
            "config": {
                "abort": {
                    "addr_in_use": "Server port already in use.",
                    "already_configured": "Server port is already configured.",
                    "start_server_failed": "Start server failed."
                },
                "step": {
                    "user": {
                        "data": {
                            "port": "Port"
                        },
                        "title": "Set up TCP server for WIFFI devices"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "timeout": "Timeout (minutes)"
                        }
                    }
                }
            }
        },
        "wilight": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "not_supported_device": "This WiLight is currently not supported",
                    "not_wilight_device": "This Device is not WiLight"
                },
                "flow_title": "{name}",
                "step": {
                    "confirm": {
                        "description": "The following components are supported: {components}"
                    }
                }
            },
            "entity": {
                "switch": {
                    "pause": {
                        "name": "Pause"
                    },
                    "watering": {
                        "name": "Watering"
                    }
                }
            },
            "services": {
                "set_pause_time": {
                    "description": "Sets time to pause.",
                    "fields": {
                        "pause_time": {
                            "description": "Duration for this irrigation to be paused.",
                            "name": "Duration"
                        }
                    },
                    "name": "Set pause time"
                },
                "set_trigger": {
                    "description": "Sets the trigger to use.",
                    "fields": {
                        "trigger": {
                            "description": "Configuration of trigger.",
                            "name": "Trigger rules"
                        },
                        "trigger_index": {
                            "description": "Index of Trigger from 1 to 4.",
                            "name": "Trigger index"
                        }
                    },
                    "name": "Set trigger"
                },
                "set_watering_time": {
                    "description": "Sets time for watering.",
                    "fields": {
                        "watering_time": {
                            "description": "Duration for this irrigation to be turned on.",
                            "name": "Duration"
                        }
                    },
                    "name": "Set watering time"
                }
            }
        },
        "withings": {
            "config": {
                "abort": {
                    "already_configured": "Configuration updated for profile.",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "oauth_error": "Received invalid token data."
                },
                "create_entry": {
                    "default": "Successfully authenticated with Withings."
                },
                "error": {
                    "already_configured": "Account is already configured"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "profile": {
                        "data": {
                            "profile": "Profile Name"
                        },
                        "description": "Provide a unique profile name for this data. Typically this is the name of the profile you selected in the previous step.",
                        "title": "User Profile."
                    },
                    "reauth_confirm": {
                        "description": "The Withings integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "in_bed": {
                        "name": "In bed"
                    }
                },
                "sensor": {
                    "average_heart_rate": {
                        "name": "Average heart rate"
                    },
                    "average_respiratory_rate": {
                        "name": "Average respiratory rate"
                    },
                    "body_temperature": {
                        "name": "Body temperature"
                    },
                    "bone_mass": {
                        "name": "Bone mass"
                    },
                    "breathing_disturbances_intensity": {
                        "name": "Breathing disturbances intensity"
                    },
                    "deep_sleep": {
                        "name": "Deep sleep"
                    },
                    "diastolic_blood_pressure": {
                        "name": "Diastolic blood pressure"
                    },
                    "fat_free_mass": {
                        "name": "Fat free mass"
                    },
                    "fat_mass": {
                        "name": "Fat mass"
                    },
                    "fat_ratio": {
                        "name": "Fat ratio"
                    },
                    "heart_pulse": {
                        "name": "Heart pulse"
                    },
                    "height": {
                        "name": "Height"
                    },
                    "hydration": {
                        "name": "Hydration"
                    },
                    "light_sleep": {
                        "name": "Light sleep"
                    },
                    "maximum_heart_rate": {
                        "name": "Maximum heart rate"
                    },
                    "maximum_respiratory_rate": {
                        "name": "Maximum respiratory rate"
                    },
                    "minimum_heart_rate": {
                        "name": "Minimum heart rate"
                    },
                    "minimum_respiratory_rate": {
                        "name": "Minimum respiratory rate"
                    },
                    "muscle_mass": {
                        "name": "Muscle mass"
                    },
                    "pulse_wave_velocity": {
                        "name": "Pulse wave velocity"
                    },
                    "rem_sleep": {
                        "name": "REM sleep"
                    },
                    "skin_temperature": {
                        "name": "Skin temperature"
                    },
                    "sleep_score": {
                        "name": "Sleep score"
                    },
                    "snoring": {
                        "name": "Snoring"
                    },
                    "snoring_episode_count": {
                        "name": "Snoring episode count"
                    },
                    "spo2": {
                        "name": "SpO2"
                    },
                    "systolic_blood_pressure": {
                        "name": "Systolic blood pressure"
                    },
                    "time_to_sleep": {
                        "name": "Time to sleep"
                    },
                    "time_to_wakeup": {
                        "name": "Time to wakeup"
                    },
                    "wakeup_count": {
                        "name": "Wakeup count"
                    },
                    "wakeup_time": {
                        "name": "Wakeup time"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "use_webhook": "Use webhooks"
                        }
                    }
                }
            }
        },
        "wiz": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "bulb_time_out": "Can not connect to the bulb. Maybe the bulb is offline or a wrong IP was entered. Please turn on the light and try again!",
                    "cannot_connect": "Failed to connect",
                    "no_ip": "Not a valid IP address.",
                    "no_wiz_light": "The bulb cannot be connected via WiZ Platform integration.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name} ({host})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {name} ({host})?"
                    },
                    "pick_device": {
                        "data": {
                            "device": "Device"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "IP Address"
                        },
                        "description": "If you leave the IP Address empty, discovery will be used to find devices."
                    }
                }
            },
            "entity": {
                "number": {
                    "dual_head_ratio": {
                        "name": "Dual head ratio"
                    },
                    "effect_speed": {
                        "name": "Effect speed"
                    }
                }
            }
        },
        "wled": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "cct_unsupported": "This WLED device uses CCT channels, which is not supported by this integration"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Set up your WLED to integrate with Home Assistant."
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the WLED named `{name}` to Home Assistant?",
                        "title": "Discovered WLED device"
                    }
                }
            },
            "entity": {
                "light": {
                    "main": {
                        "name": "Main"
                    }
                },
                "select": {
                    "live_override": {
                        "name": "Live override",
                        "state": {
                            "0": "Off",
                            "1": "On",
                            "2": "Until device restarts"
                        }
                    },
                    "playlist": {
                        "name": "Playlist"
                    },
                    "preset": {
                        "name": "Preset"
                    }
                },
                "sensor": {
                    "estimated_current": {
                        "name": "Estimated current"
                    },
                    "free_heap": {
                        "name": "Free memory"
                    },
                    "info_leds_count": {
                        "name": "LED count"
                    },
                    "info_leds_max_power": {
                        "name": "Max current"
                    },
                    "ip": {
                        "name": "IP"
                    },
                    "uptime": {
                        "name": "Uptime"
                    },
                    "wifi_bssid": {
                        "name": "Wi-Fi BSSID"
                    },
                    "wifi_channel": {
                        "name": "Wi-Fi channel"
                    },
                    "wifi_rssi": {
                        "name": "Wi-Fi RSSI"
                    },
                    "wifi_signal": {
                        "name": "Wi-Fi signal"
                    }
                },
                "switch": {
                    "nightlight": {
                        "name": "Nightlight"
                    },
                    "sync_receive": {
                        "name": "Sync receive"
                    },
                    "sync_send": {
                        "name": "Sync send"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "keep_master_light": "Keep main light, even with 1 LED segment."
                        }
                    }
                }
            },
            "services": {
                "effect": {
                    "description": "Controls the effect settings of WLED.",
                    "fields": {
                        "effect": {
                            "description": "Name or ID of the WLED light effect.",
                            "name": "Effect"
                        },
                        "intensity": {
                            "description": "Intensity of the effect. Number between 0 and 255.",
                            "name": "Effect intensity"
                        },
                        "palette": {
                            "description": "Name or ID of the WLED light palette.",
                            "name": "Color palette"
                        },
                        "reverse": {
                            "description": "Reverse the effect. Either true to reverse or false otherwise.",
                            "name": "Reverse effect"
                        },
                        "speed": {
                            "description": "Speed of the effect.",
                            "name": "Effect speed"
                        }
                    },
                    "name": "Set effect"
                },
                "preset": {
                    "description": "Sets a preset for the WLED device.",
                    "fields": {
                        "preset": {
                            "description": "ID of the WLED preset.",
                            "name": "Preset ID"
                        }
                    },
                    "name": "Set preset (deprecated)"
                }
            }
        },
        "wolflink": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "device": {
                        "data": {
                            "device_name": "Device"
                        },
                        "title": "Select WOLF device"
                    },
                    "user": {
                        "data": {
                            "password": "Password",
                            "username": "Username"
                        },
                        "title": "WOLF SmartSet connection"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "state": {
                        "state": {
                            "1_x_warmwasser": "1 x DHW",
                            "abgasklappe": "Flue gas damper",
                            "absenkbetrieb": "Setback mode",
                            "absenkstop": "Setback stop",
                            "aktiviert": "Activated",
                            "antilegionellenfunktion": "Anti-legionella Function",
                            "at_abschaltung": "OT shutdown",
                            "at_frostschutz": "OT frost protection",
                            "aus": "Disabled",
                            "auto": "Auto",
                            "auto_off_cool": "AutoOffCool",
                            "auto_on_cool": "AutoOnCool",
                            "automatik_aus": "Automatic OFF",
                            "automatik_ein": "Automatic ON",
                            "bereit_keine_ladung": "Ready, not loading",
                            "betrieb_ohne_brenner": "Working without burner",
                            "cooling": "Cooling",
                            "deaktiviert": "Inactive",
                            "dhw_prior": "DHWPrior",
                            "eco": "Eco",
                            "ein": "Enabled",
                            "estrichtrocknung": "Screed drying",
                            "externe_deaktivierung": "External deactivation",
                            "fernschalter_ein": "Remote control enabled",
                            "frost_heizkreis": "Heating circuit frost",
                            "frost_warmwasser": "DHW frost",
                            "frostschutz": "Frost protection",
                            "gasdruck": "Gas pressure",
                            "glt_betrieb": "BMS mode",
                            "gradienten_uberwachung": "Gradient monitoring",
                            "heizbetrieb": "Heating mode",
                            "heizgerat_mit_speicher": "Boiler with cylinder",
                            "heizung": "Heating",
                            "initialisierung": "Initialization",
                            "kalibration": "Calibration",
                            "kalibration_heizbetrieb": "Heating mode calibration",
                            "kalibration_kombibetrieb": "Combi mode calibration",
                            "kalibration_warmwasserbetrieb": "DHW calibration",
                            "kaskadenbetrieb": "Cascade operation",
                            "kombibetrieb": "Combi mode",
                            "kombigerat": "Combi boiler",
                            "kombigerat_mit_solareinbindung": "Combi boiler with solar integration",
                            "mindest_kombizeit": "Minimum combi time",
                            "nachlauf_heizkreispumpe": "Heating circuit pump run-on",
                            "nachspulen": "Post-flush",
                            "nur_heizgerat": "Boiler only",
                            "parallelbetrieb": "Parallel mode",
                            "partymodus": "Party mode",
                            "perm_cooling": "PermCooling",
                            "permanent": "Permanent",
                            "permanentbetrieb": "Permanent mode",
                            "reduzierter_betrieb": "Limited mode",
                            "rt_abschaltung": "RT shutdown",
                            "rt_frostschutz": "RT frost protection",
                            "ruhekontakt": "Rest contact",
                            "schornsteinfeger": "Emissions test",
                            "smart_grid": "SmartGrid",
                            "smart_home": "SmartHome",
                            "softstart": "Soft start",
                            "solarbetrieb": "Solar mode",
                            "sparbetrieb": "Economy mode",
                            "sparen": "Economy",
                            "spreizung_hoch": "dT too wide",
                            "spreizung_kf": "Spread KF",
                            "stabilisierung": "Stabilization",
                            "standby": "Standby",
                            "start": "Start",
                            "storung": "Fault",
                            "taktsperre": "Anti-cycle",
                            "telefonfernschalter": "Telephone remote switch",
                            "test": "Test",
                            "tpw": "TPW",
                            "urlaubsmodus": "Holiday mode",
                            "ventilprufung": "Valve test",
                            "vorspulen": "Entry rinsing",
                            "warmwasser": "DHW",
                            "warmwasser_schnellstart": "DHW quick start",
                            "warmwasserbetrieb": "DHW mode",
                            "warmwassernachlauf": "DHW run-on",
                            "warmwasservorrang": "DHW priority",
                            "zunden": "Ignition"
                        }
                    }
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "wolflink__state": {
                            "1_x_warmwasser": "1 x DHW",
                            "abgasklappe": "Flue gas damper",
                            "absenkbetrieb": "Setback mode",
                            "absenkstop": "Setback stop",
                            "aktiviert": "Activated",
                            "antilegionellenfunktion": "Anti-legionella Function",
                            "at_abschaltung": "OT shutdown",
                            "at_frostschutz": "OT frost protection",
                            "aus": "Disabled",
                            "auto": "Auto",
                            "auto_off_cool": "AutoOffCool",
                            "auto_on_cool": "AutoOnCool",
                            "automatik_aus": "Automatic OFF",
                            "automatik_ein": "Automatic ON",
                            "bereit_keine_ladung": "Ready, not loading",
                            "betrieb_ohne_brenner": "Working without burner",
                            "cooling": "Cooling",
                            "deaktiviert": "Inactive",
                            "dhw_prior": "DHWPrior",
                            "eco": "Eco",
                            "ein": "Enabled",
                            "estrichtrocknung": "Screed drying",
                            "externe_deaktivierung": "External deactivation",
                            "fernschalter_ein": "Remote control enabled",
                            "frost_heizkreis": "Heating circuit frost",
                            "frost_warmwasser": "DHW frost",
                            "frostschutz": "Frost protection",
                            "gasdruck": "Gas pressure",
                            "glt_betrieb": "BMS mode",
                            "gradienten_uberwachung": "Gradient monitoring",
                            "heizbetrieb": "Heating mode",
                            "heizgerat_mit_speicher": "Boiler with cylinder",
                            "heizung": "Heating",
                            "initialisierung": "Initialization",
                            "kalibration": "Calibration",
                            "kalibration_heizbetrieb": "Heating mode calibration",
                            "kalibration_kombibetrieb": "Combi mode calibration",
                            "kalibration_warmwasserbetrieb": "DHW calibration",
                            "kaskadenbetrieb": "Cascade operation",
                            "kombibetrieb": "Combi mode",
                            "kombigerat": "Combi boiler",
                            "kombigerat_mit_solareinbindung": "Combi boiler with solar integration",
                            "mindest_kombizeit": "Minimum combi time",
                            "nachlauf_heizkreispumpe": "Heating circuit pump run-on",
                            "nachspulen": "Post-flush",
                            "nur_heizgerat": "Boiler only",
                            "parallelbetrieb": "Parallel mode",
                            "partymodus": "Party mode",
                            "perm_cooling": "PermCooling",
                            "permanent": "Permanent",
                            "permanentbetrieb": "Permanent mode",
                            "reduzierter_betrieb": "Limited mode",
                            "rt_abschaltung": "RT shutdown",
                            "rt_frostschutz": "RT frost protection",
                            "ruhekontakt": "Rest contact",
                            "schornsteinfeger": "Emissions test",
                            "smart_grid": "SmartGrid",
                            "smart_home": "SmartHome",
                            "softstart": "Soft start",
                            "solarbetrieb": "Solar mode",
                            "sparbetrieb": "Economy mode",
                            "sparen": "Economy",
                            "spreizung_hoch": "dT too wide",
                            "spreizung_kf": "Spread KF",
                            "stabilisierung": "Stabilization",
                            "standby": "Standby",
                            "start": "Start",
                            "storung": "Fault",
                            "taktsperre": "Anti-cycle",
                            "telefonfernschalter": "Telephone remote switch",
                            "test": "Test",
                            "tpw": "TPW",
                            "urlaubsmodus": "Holiday mode",
                            "ventilprufung": "Valve test",
                            "vorspulen": "Entry rinsing",
                            "warmwasser": "DHW",
                            "warmwasser_schnellstart": "DHW quick start",
                            "warmwasserbetrieb": "DHW mode",
                            "warmwassernachlauf": "DHW run-on",
                            "warmwasservorrang": "DHW priority",
                            "zunden": "Ignition"
                        }
                    }
                }
            }
        },
        "workday": {
            "config": {
                "abort": {
                    "already_configured": "Workday has already been setup with chosen configuration",
                    "incorrect_province": "Incorrect subdivision from yaml import"
                },
                "error": {
                    "add_holiday_error": "Incorrect format on date (YYYY-MM-DD)",
                    "add_holiday_range_error": "Incorrect format on date range (YYYY-MM-DD,YYYY-MM-DD)",
                    "already_configured": "Service is already configured",
                    "remove_holiday_error": "Incorrect format on date (YYYY-MM-DD) or holiday name not found",
                    "remove_holiday_range_error": "Incorrect format on date range (YYYY-MM-DD,YYYY-MM-DD)"
                },
                "step": {
                    "options": {
                        "data": {
                            "add_holidays": "Add holidays",
                            "days_offset": "Offset",
                            "excludes": "Excludes",
                            "province": "Subdivision of country",
                            "remove_holidays": "Remove Holidays",
                            "workdays": "Workdays"
                        },
                        "data_description": {
                            "add_holidays": "Add custom holidays as YYYY-MM-DD or as range using `,` as separator",
                            "days_offset": "Days offset",
                            "excludes": "List of workdays to exclude",
                            "province": "State, Territory, Province, Region of Country",
                            "remove_holidays": "Remove holidays as YYYY-MM-DD, as range using `,` as separator or by using partial of name",
                            "workdays": "List of workdays"
                        },
                        "description": "Set additional options for {name} configured for country {country}"
                    },
                    "user": {
                        "data": {
                            "country": "Country",
                            "name": "Name"
                        }
                    }
                }
            },
            "issues": {
                "bad_country": {
                    "fix_flow": {
                        "step": {
                            "country": {
                                "data": {
                                    "country": "Country"
                                },
                                "description": "Select a country to use for your Workday sensor.",
                                "title": "Select country for {title}"
                            },
                            "province": {
                                "data": {
                                    "province": "Subdivision of country"
                                },
                                "data_description": {
                                    "province": "State, Territory, Province, Region of Country"
                                },
                                "description": "Select a province in country {country} to use for your Workday sensor.",
                                "title": "Select province for {title}"
                            }
                        }
                    },
                    "title": "Configured Country for {title} does not exist"
                },
                "bad_province": {
                    "fix_flow": {
                        "step": {
                            "province": {
                                "data": {
                                    "province": "Subdivision of country"
                                },
                                "data_description": {
                                    "province": "State, Territory, Province, Region of Country"
                                },
                                "description": "Select a province in country {country} to use for your Workday sensor.",
                                "title": "Select province for {title}"
                            }
                        }
                    },
                    "title": "Configured province in country {country} for {title} does not exist"
                },
                "deprecated_yaml": {
                    "description": "Configuring Workday using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Workday YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Workday YAML configuration is being removed"
                }
            },
            "options": {
                "error": {
                    "add_holiday_error": "Incorrect format on date (YYYY-MM-DD)",
                    "add_holiday_range_error": "Incorrect format on date range (YYYY-MM-DD,YYYY-MM-DD)",
                    "already_configured": "Service with this configuration already exist",
                    "remove_holiday_error": "Incorrect format on date (YYYY-MM-DD) or holiday name not found",
                    "remove_holiday_range_error": "Incorrect format on date range (YYYY-MM-DD,YYYY-MM-DD)"
                },
                "step": {
                    "init": {
                        "data": {
                            "add_holidays": "Add holidays",
                            "days_offset": "Offset",
                            "excludes": "Excludes",
                            "province": "Subdivision of country",
                            "remove_holidays": "Remove Holidays",
                            "workdays": "Workdays"
                        },
                        "data_description": {
                            "add_holidays": "Add custom holidays as YYYY-MM-DD or as range using `,` as separator",
                            "days_offset": "Days offset",
                            "excludes": "List of workdays to exclude",
                            "province": "State, Territory, Province, Region of Country",
                            "remove_holidays": "Remove holidays as YYYY-MM-DD, as range using `,` as separator or by using partial of name",
                            "workdays": "List of workdays"
                        },
                        "description": "Change additional options for {name} configured for country {country}"
                    }
                }
            },
            "selector": {
                "country": {
                    "options": {
                        "none": "No country"
                    }
                },
                "days": {
                    "options": {
                        "fri": "Friday",
                        "holiday": "Holidays",
                        "mon": "Monday",
                        "sat": "Saturday",
                        "sun": "Sunday",
                        "thu": "Thursday",
                        "tue": "Tuesday",
                        "wed": "Wednesday"
                    }
                },
                "province": {
                    "options": {
                        "none": "No subdivision"
                    }
                }
            },
            "title": "Workday"
        },
        "ws66i": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "ip_address": "IP Address"
                        },
                        "title": "Connect to the device"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "source_1": "Name of source #1",
                            "source_2": "Name of source #2",
                            "source_3": "Name of source #3",
                            "source_4": "Name of source #4",
                            "source_5": "Name of source #5",
                            "source_6": "Name of source #6"
                        },
                        "title": "Configure sources"
                    }
                }
            }
        },
        "wyoming": {
            "config": {
                "abort": {
                    "already_configured": "Service is already configured",
                    "no_services": "No services found at endpoint"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "hassio_confirm": {
                        "description": "Do you want to configure Home Assistant to connect to the Wyoming service provided by the add-on: {addon}?"
                    },
                    "user": {
                        "data": {
                            "host": "Host",
                            "port": "Port"
                        }
                    }
                }
            }
        },
        "xbox": {
            "config": {
                "abort": {
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring the Xbox in configuration.yaml is being removed in Home Assistant 2022.9.\n\nYour existing OAuth Application Credentials and access settings have been imported into the UI automatically. Remove the YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Xbox YAML configuration is being removed"
                }
            }
        },
        "xbox_live": {
            "issues": {
                "pending_removal": {
                    "description": "The Xbox Live integration is pending removal from Home Assistant and will no longer be available as of Home Assistant 2023.2.\n\nThe integration is being removed, because it is only useful for the legacy device Xbox 360 and the upstream API now requires a paid subscription. Newer consoles are supported by the Xbox integration for free.\n\nRemove the Xbox Live YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Xbox Live integration is being removed"
                }
            }
        },
        "xiaomi_aqara": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "not_xiaomi_aqara": "Not a Xiaomi Aqara Gateway, discovered device did not match known gateways"
                },
                "error": {
                    "discovery_error": "Failed to discover a Xiaomi Aqara Gateway, try using the IP of the device running HomeAssistant as interface",
                    "invalid_host": "Invalid hostname or IP address, see https:\/\/www.home-assistant.io\/integrations\/xiaomi_aqara\/#connection-problem",
                    "invalid_interface": "Invalid network interface",
                    "invalid_key": "Invalid gateway key",
                    "invalid_mac": "Invalid Mac Address"
                },
                "flow_title": "{name}",
                "step": {
                    "select": {
                        "data": {
                            "select_ip": "IP Address"
                        },
                        "description": "Select the Xiaomi Aqara Gateway that you wish to connect"
                    },
                    "settings": {
                        "data": {
                            "key": "The key of your gateway",
                            "name": "Name of the Gateway"
                        },
                        "description": "The key (password) can be retrieved using this tutorial: https:\/\/www.domoticz.com\/wiki\/Xiaomi_Gateway_(Aqara)#Adding_the_Xiaomi_Gateway_to_Domoticz. If the key is not provided only sensors will be accessible",
                        "title": "Optional settings"
                    },
                    "user": {
                        "data": {
                            "host": "IP address (optional)",
                            "interface": "The network interface to use",
                            "mac": "Mac Address (optional)"
                        },
                        "description": "If the IP and MAC addresses are left empty, auto-discovery is used"
                    }
                }
            },
            "services": {
                "add_device": {
                    "description": "Enables the join permission of the Xiaomi Aqara Gateway for 30 seconds. A new device can be added afterwards by pressing the pairing button once.",
                    "fields": {
                        "gw_mac": {
                            "description": "MAC address of the Xiaomi Aqara Gateway.",
                            "name": "Gateway MAC"
                        }
                    },
                    "name": "Add device"
                },
                "play_ringtone": {
                    "description": "Plays a specific ringtone. The version of the gateway firmware must be 1.4.1_145 at least.",
                    "fields": {
                        "gw_mac": {
                            "description": "MAC address of the Xiaomi Aqara Gateway.",
                            "name": "Gateway MAC"
                        },
                        "ringtone_id": {
                            "description": "One of the allowed ringtone ids.",
                            "name": "Ringtone ID"
                        },
                        "ringtone_vol": {
                            "description": "The volume in percent.",
                            "name": "Ringtone volume"
                        }
                    },
                    "name": "Play ringtone"
                },
                "remove_device": {
                    "description": "Removes a specific device. The removal is required if a device shall be paired with another gateway.",
                    "fields": {
                        "device_id": {
                            "description": "Hardware address of the device to remove.",
                            "name": "Device ID"
                        },
                        "gw_mac": {
                            "description": "MAC address of the Xiaomi Aqara Gateway.",
                            "name": "Gateway MAC"
                        }
                    },
                    "name": "Remove device"
                },
                "stop_ringtone": {
                    "description": "Stops a playing ringtone immediately.",
                    "fields": {
                        "gw_mac": {
                            "description": "MAC address of the Xiaomi Aqara Gateway.",
                            "name": "Gateway MAC"
                        }
                    },
                    "name": "Stop ringtone"
                }
            }
        },
        "xiaomi_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "decryption_failed": "The provided bindkey did not work, sensor data could not be decrypted. Please check it and try again.",
                    "expected_24_characters": "Expected a 24 character hexadecimal bindkey.",
                    "expected_32_characters": "Expected a 32 character hexadecimal bindkey."
                },
                "flow_title": "{name}",
                "step": {
                    "bluetooth_confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "confirm_slow": {
                        "description": "There hasn't been a broadcast from this device in the last minute so we aren't sure if this device uses encryption or not. This may be because the device uses a slow broadcast interval. Confirm to add this device anyway, then the next time a broadcast is received you will be prompted to enter its bindkey if it's needed."
                    },
                    "get_encryption_key_4_5": {
                        "data": {
                            "bindkey": "Bindkey"
                        },
                        "description": "The sensor data broadcast by the sensor is encrypted. In order to decrypt it we need a 32 character hexadecimal bindkey."
                    },
                    "get_encryption_key_legacy": {
                        "data": {
                            "bindkey": "Bindkey"
                        },
                        "description": "The sensor data broadcast by the sensor is encrypted. In order to decrypt it we need a 24 character hexadecimal bindkey."
                    },
                    "user": {
                        "data": {
                            "address": "Device"
                        },
                        "description": "Choose a device to set up"
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "motion_detected": "Motion detected"
                }
            }
        },
        "xiaomi_miio": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "incomplete_info": "Incomplete information to set up device, no host or token supplied.",
                    "not_xiaomi_miio": "Device is not (yet) supported by Xiaomi Miio.",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "cloud_credentials_incomplete": "Cloud credentials incomplete, please fill in username, password and country",
                    "cloud_login_error": "Could not login to Xiaomi Miio Cloud, check the credentials.",
                    "cloud_no_devices": "No devices found in this Xiaomi Miio cloud account.",
                    "unknown_device": "The device model is not known, not able to set up the device using config flow.",
                    "wrong_token": "Checksum error, wrong token"
                },
                "flow_title": "{name}",
                "step": {
                    "cloud": {
                        "data": {
                            "cloud_country": "Cloud server country",
                            "cloud_password": "Cloud password",
                            "cloud_username": "Cloud username",
                            "manual": "Configure manually (not recommended)"
                        },
                        "description": "Log in to the Xiaomi Miio cloud, see https:\/\/www.openhab.org\/addons\/bindings\/miio\/#country-servers for the cloud server to use."
                    },
                    "connect": {
                        "data": {
                            "model": "Device model"
                        }
                    },
                    "manual": {
                        "data": {
                            "host": "IP Address",
                            "token": "API Token"
                        },
                        "description": "You will need the 32 character API token, see https:\/\/www.home-assistant.io\/integrations\/xiaomi_miio#retrieving-the-access-token for instructions. Please note, that this API token is different from the key used by the Xiaomi Aqara integration."
                    },
                    "reauth_confirm": {
                        "description": "The Xiaomi Miio integration needs to re-authenticate your account in order to update the tokens or add missing cloud credentials.",
                        "title": "Reauthenticate Integration"
                    },
                    "select": {
                        "data": {
                            "select_device": "Miio device"
                        },
                        "description": "Select the Xiaomi Miio device to set up."
                    }
                }
            },
            "entity": {
                "select": {
                    "airpurifier_mode": {
                        "state": {
                            "auto": "Auto",
                            "favorite": "Favorite",
                            "silent": "Silent"
                        }
                    },
                    "display_orientation": {
                        "state": {
                            "forward": "Forward",
                            "left": "Left",
                            "right": "Right"
                        }
                    },
                    "led_brightness": {
                        "state": {
                            "bright": "Bright",
                            "dim": "Dim",
                            "off": "Off"
                        }
                    },
                    "ptc_level": {
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium"
                        }
                    }
                }
            },
            "options": {
                "error": {
                    "cloud_credentials_incomplete": "Cloud credentials incomplete, please fill in username, password and country"
                },
                "step": {
                    "init": {
                        "data": {
                            "cloud_subdevices": "Use cloud to get connected subdevices"
                        }
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "xiaomi_miio__display_orientation": {
                            "forward": "Forward",
                            "left": "Left",
                            "right": "Right"
                        },
                        "xiaomi_miio__led_brightness": {
                            "bright": "Bright",
                            "dim": "Dim",
                            "off": "Off"
                        },
                        "xiaomi_miio__ptc_level": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium"
                        }
                    }
                }
            },
            "services": {
                "fan_reset_filter": {
                    "description": "Resets the filter lifetime and usage.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the xiaomi miio entity.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Fan reset filter"
                },
                "fan_set_extra_features": {
                    "description": "Manipulates a storage register which advertises extra features. The Mi Home app evaluates the value. A feature called \"turbo mode\" is unlocked in the app on value 1.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the xiaomi miio entity.",
                            "name": "Entity ID"
                        },
                        "features": {
                            "description": "Integer, known values are 0 (default) and 1 (turbo mode).",
                            "name": "Features"
                        }
                    },
                    "name": "Fan set extra features"
                },
                "light_eyecare_mode_off": {
                    "description": "Disables the eye fatigue reminder\/notification (EYECARE SMART LAMP 2 ONLY).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity to act on.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Light eyecare mode off"
                },
                "light_eyecare_mode_on": {
                    "description": "Enables the eye fatigue reminder\/notification (EYECARE SMART LAMP 2 ONLY).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity to act on.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Light eyecare mode on"
                },
                "light_night_light_mode_off": {
                    "description": "Turns the eyecare mode fan_set_dry_off (EYECARE SMART LAMP 2 ONLY).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity to act on.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Night light mode off"
                },
                "light_night_light_mode_on": {
                    "description": "Turns the eyecare mode on (EYECARE SMART LAMP 2 ONLY).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity to act on.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Night light mode on"
                },
                "light_reminder_off": {
                    "description": "Disables the eye fatigue reminder\/notification (EYECARE SMART LAMP 2 ONLY).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity to act on.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Light reminder off"
                },
                "light_reminder_on": {
                    "description": "Enables the eye fatigue reminder\/notification (EYECARE SMART LAMP 2 ONLY).",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the entity to act on.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Light reminder on"
                },
                "light_set_delayed_turn_off": {
                    "description": "Delayed turn off.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the light entity.",
                            "name": "Entity ID"
                        },
                        "time_period": {
                            "description": "Time period for the delayed turn off.",
                            "name": "Time period"
                        }
                    },
                    "name": "Light set delayed turn off"
                },
                "light_set_scene": {
                    "description": "Sets a fixed scene.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the light entity.",
                            "name": "Entity ID"
                        },
                        "scene": {
                            "description": "Number of the fixed scene.",
                            "name": "Scene"
                        }
                    },
                    "name": "Light set scene"
                },
                "remote_learn_command": {
                    "description": "Learns an IR command, press \"Call Service\", point the remote at the IR device, and the learned command will be shown as a notification in Overview.",
                    "fields": {
                        "slot": {
                            "description": "Define the slot used to save the IR command.",
                            "name": "Slot"
                        },
                        "timeout": {
                            "description": "Define the timeout, before which the command must be learned.",
                            "name": "Timeout"
                        }
                    },
                    "name": "Remote learn command"
                },
                "remote_set_led_off": {
                    "description": "Turns off blue LED.",
                    "name": "Remote set LED off"
                },
                "remote_set_led_on": {
                    "description": "Turns on blue LED.",
                    "name": "Remote set LED on"
                },
                "switch_set_power_mode": {
                    "description": "Sets the power mode.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the xiaomi miio entity.",
                            "name": "Entity ID"
                        },
                        "mode": {
                            "description": "Power mode.",
                            "name": "Mode"
                        }
                    },
                    "name": "Switch set power mode"
                },
                "switch_set_power_price": {
                    "description": "Sets the power price.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the xiaomi miio entity.",
                            "name": "Entity ID"
                        },
                        "mode": {
                            "description": "Power price.",
                            "name": "Mode"
                        }
                    },
                    "name": "Switch set power price"
                },
                "switch_set_wifi_led_off": {
                    "description": "Turn the Wi-Fi led off.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the xiaomi miio entity.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Switch set Wi-Fi LED off"
                },
                "switch_set_wifi_led_on": {
                    "description": "Turns the wifi led on.",
                    "fields": {
                        "entity_id": {
                            "description": "Name of the xiaomi miio entity.",
                            "name": "Entity ID"
                        }
                    },
                    "name": "Switch set Wi-Fi LED on"
                },
                "vacuum_clean_segment": {
                    "description": "Starts cleaning of the specified segment(s).",
                    "fields": {
                        "segments": {
                            "description": "Segments.",
                            "name": "Segments"
                        }
                    },
                    "name": "Vacuum clean segment"
                },
                "vacuum_clean_zone": {
                    "description": "Starts the cleaning operation in the selected areas for the number of repeats indicated.",
                    "fields": {
                        "repeats": {
                            "description": "Number of cleaning repeats for each zone.",
                            "name": "Repeats"
                        },
                        "zone": {
                            "description": "Array of zones. Each zone is an array of 4 integer values.",
                            "name": "Zone"
                        }
                    },
                    "name": "Vacuum clean zone"
                },
                "vacuum_goto": {
                    "description": "Go to the specified coordinates.",
                    "fields": {
                        "x_coord": {
                            "description": "X-coordinate.",
                            "name": "X coordinate"
                        },
                        "y_coord": {
                            "description": "Y-coordinate.",
                            "name": "Y coordinate"
                        }
                    },
                    "name": "Vacuum go to"
                },
                "vacuum_remote_control_move": {
                    "description": "Remote controls the vacuum cleaner, make sure you first set it in remote control mode with `remote_control_start`.",
                    "fields": {
                        "duration": {
                            "description": "Duration of the movement.",
                            "name": "Duration"
                        },
                        "rotation": {
                            "description": "Rotation, between -179 degrees and 179 degrees.",
                            "name": "Rotation"
                        },
                        "velocity": {
                            "description": "Speed.",
                            "name": "Velocity"
                        }
                    },
                    "name": "Vacuum remote control move"
                },
                "vacuum_remote_control_move_step": {
                    "description": "Remote controls the vacuum cleaner, only makes one move and then stops.",
                    "fields": {
                        "duration": {
                            "description": "Duration of the movement.",
                            "name": "Duration"
                        },
                        "rotation": {
                            "description": "Rotation.",
                            "name": "Rotation"
                        },
                        "velocity": {
                            "description": "Speed.",
                            "name": "Velocity"
                        }
                    },
                    "name": "Vacuum remote control move step"
                },
                "vacuum_remote_control_start": {
                    "description": "Starts remote control of the vacuum cleaner. You can then move it with `remote_control_move`, when done call `remote_control_stop`.",
                    "name": "Vacuum remote control start"
                },
                "vacuum_remote_control_stop": {
                    "description": "Stops remote control mode of the vacuum cleaner.",
                    "name": "Vacuum remote control stop"
                }
            }
        },
        "yale_smart_alarm": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "reauth_confirm": {
                        "data": {
                            "area_id": "Area ID",
                            "name": "Name",
                            "password": "Password",
                            "username": "Username"
                        }
                    },
                    "user": {
                        "data": {
                            "area_id": "Area ID",
                            "name": "Name",
                            "password": "Password",
                            "username": "Username"
                        }
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "battery": {
                        "name": "Battery"
                    },
                    "jam": {
                        "name": "Jam"
                    },
                    "power_loss": {
                        "name": "Power loss"
                    },
                    "tamper": {
                        "name": "Tamper"
                    }
                },
                "button": {
                    "panic": {
                        "name": "Panic button"
                    }
                }
            },
            "options": {
                "error": {
                    "code_format_mismatch": "The code does not match the required number of digits"
                },
                "step": {
                    "init": {
                        "data": {
                            "code": "Default code for locks, used if none is given",
                            "lock_code_digits": "Number of digits in PIN code for locks"
                        }
                    }
                }
            }
        },
        "yalexs_ble": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "no_devices_found": "No devices found on the network",
                    "reauth_successful": "Re-authentication was successful"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "invalid_key_format": "The offline key must be a 32-byte hex string.",
                    "invalid_key_index": "The offline key slot must be an integer between 0 and 255.",
                    "no_longer_in_range": "The lock is no longer in Bluetooth range. Move the lock or adapter and try again.",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "step": {
                    "integration_discovery_confirm": {
                        "description": "Do you want to set up {name} over Bluetooth with address {address}?"
                    },
                    "reauth_validate": {
                        "data": {
                            "key": "Offline Key (32-byte hex string)",
                            "slot": "Offline Key Slot (Integer between 0 and 255)"
                        },
                        "description": "Enter the updated key for the {title} lock with address {address}. If you are using the August cloud integration to obtain the key, you may be able to avoid manual reauthentication by reloading the August cloud integration while the lock is in Bluetooth range."
                    },
                    "user": {
                        "data": {
                            "address": "Bluetooth address",
                            "key": "Offline Key (32-byte hex string)",
                            "slot": "Offline Key Slot (Integer between 0 and 255)"
                        },
                        "description": "Check the documentation for how to find the offline key. If you are using the August cloud integration to obtain the key, you may need to reload the August cloud integration while the lock is in Bluetooth range."
                    }
                }
            },
            "entity": {
                "sensor": {
                    "battery_voltage": {
                        "name": "Battery voltage"
                    }
                }
            },
            "options": {
                "step": {
                    "device_options": {
                        "data": {
                            "always_connected": "Always connected"
                        },
                        "description": "If the lock does not support push updates via advertisements or you want lock operation to be more responsive, you can enable always connected mode. Always connected will cause the lock to stay connected to Home Assistant via Bluetooth, which will use more battery."
                    }
                }
            }
        },
        "yamaha": {
            "services": {
                "enable_output": {
                    "description": "Enables or disables an output port.",
                    "fields": {
                        "enabled": {
                            "description": "Indicate if port should be enabled or not.",
                            "name": "Enabled"
                        },
                        "port": {
                            "description": "Name of port to enable\/disable.",
                            "name": "Port"
                        }
                    },
                    "name": "Enable output"
                },
                "menu_cursor": {
                    "description": "Controls the cursor in a menu.",
                    "fields": {
                        "cursor": {
                            "description": "Name of the cursor key to press ('up', 'down', 'left', 'right', 'select', 'return').",
                            "name": "Cursor"
                        }
                    },
                    "name": "Menu cursor"
                },
                "select_scene": {
                    "description": "Selects a scene on the receiver.",
                    "fields": {
                        "scene": {
                            "description": "Name of the scene. Standard for RX-V437 is 'BD\/DVD Movie Viewing', 'TV Viewing', 'NET Audio Listening' or 'Radio Listening'.",
                            "name": "Scene"
                        }
                    },
                    "name": "Select scene"
                }
            }
        },
        "yamaha_musiccast": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "yxc_control_url_missing": "The control URL is not given in the ssdp description."
                },
                "error": {
                    "no_musiccast_device": "This device seems to be no MusicCast Device."
                },
                "flow_title": "MusicCast: {name}",
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "Set up MusicCast to integrate with Home Assistant."
                    }
                }
            },
            "entity": {
                "select": {
                    "dimmer": {
                        "state": {
                            "auto": "Auto"
                        }
                    },
                    "zone_equalizer_mode": {
                        "state": {
                            "auto": "Auto",
                            "bypass": "Bypass",
                            "manual": "Manual"
                        }
                    },
                    "zone_link_audio_delay": {
                        "state": {
                            "audio_sync": "Audio Synchronization",
                            "audio_sync_off": "Audio Synchronization Off",
                            "audio_sync_on": "Audio Synchronization On",
                            "balanced": "Balanced",
                            "lip_sync": "Lip Synchronization"
                        }
                    },
                    "zone_link_audio_quality": {
                        "state": {
                            "compressed": "Compressed",
                            "uncompressed": "Uncompressed"
                        }
                    },
                    "zone_link_control": {
                        "state": {
                            "speed": "Speed",
                            "stability": "Stability",
                            "standard": "Standard"
                        }
                    },
                    "zone_sleep": {
                        "state": {
                            "120_min": "120 Minutes",
                            "30_min": "30 Minutes",
                            "60_min": "60 Minutes",
                            "90_min": "90 Minutes",
                            "off": "Off"
                        }
                    },
                    "zone_surr_decoder_type": {
                        "state": {
                            "auto": "Auto",
                            "dolby_pl": "Dolby ProLogic",
                            "dolby_pl2x_game": "Dolby ProLogic 2x Game",
                            "dolby_pl2x_movie": "Dolby ProLogic 2x Movie",
                            "dolby_pl2x_music": "Dolby ProLogic 2x Music",
                            "dolby_surround": "Dolby Surround",
                            "dts_neo6_cinema": "DTS Neo:6 Cinema",
                            "dts_neo6_music": "DTS Neo:6 Music",
                            "dts_neural_x": "DTS Neural:X",
                            "toggle": "Toggle"
                        }
                    },
                    "zone_tone_control_mode": {
                        "state": {
                            "auto": "Auto",
                            "bypass": "Bypass",
                            "manual": "Manual"
                        }
                    }
                }
            },
            "platform": {
                "select": {
                    "state": {
                        "yamaha_musiccast__dimmer": {
                            "auto": "Auto"
                        },
                        "yamaha_musiccast__zone_equalizer_mode": {
                            "auto": "Auto",
                            "bypass": "Bypass",
                            "manual": "Manual"
                        },
                        "yamaha_musiccast__zone_link_audio_delay": {
                            "audio_sync": "Audio Synchronization",
                            "audio_sync_off": "Audio Synchronization Off",
                            "audio_sync_on": "Audio Synchronization On",
                            "balanced": "Balanced",
                            "lip_sync": "Lip Synchronization"
                        },
                        "yamaha_musiccast__zone_link_audio_quality": {
                            "compressed": "Compressed",
                            "uncompressed": "Uncompressed"
                        },
                        "yamaha_musiccast__zone_link_control": {
                            "speed": "Speed",
                            "stability": "Stability",
                            "standard": "Standard"
                        },
                        "yamaha_musiccast__zone_sleep": {
                            "120 min": "120 Minutes",
                            "30 min": "30 Minutes",
                            "60 min": "60 Minutes",
                            "90 min": "90 Minutes",
                            "off": "Off"
                        },
                        "yamaha_musiccast__zone_surr_decoder_type": {
                            "auto": "Auto",
                            "dolby_pl": "Dolby ProLogic",
                            "dolby_pl2x_game": "Dolby ProLogic 2x Game",
                            "dolby_pl2x_movie": "Dolby ProLogic 2x Movie",
                            "dolby_pl2x_music": "Dolby ProLogic 2x Music",
                            "dolby_surround": "Dolby Surround",
                            "dts_neo6_cinema": "DTS Neo:6 Cinema",
                            "dts_neo6_music": "DTS Neo:6 Music",
                            "dts_neural_x": "DTS Neural:X",
                            "toggle": "Toggle"
                        },
                        "yamaha_musiccast__zone_tone_control_mode": {
                            "auto": "Auto",
                            "bypass": "Bypass",
                            "manual": "Manual"
                        }
                    }
                }
            }
        },
        "yardian": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "access_token": "Access Token",
                            "host": "Host"
                        }
                    }
                }
            },
            "services": {
                "start_irrigation": {
                    "description": "Starts the irrigation.",
                    "fields": {
                        "duration": {
                            "description": "Duration for the target to be turned on.",
                            "name": "Duration"
                        }
                    },
                    "name": "Start irrigation"
                }
            }
        },
        "yeelight": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_devices_found": "No devices found on the network"
                },
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "flow_title": "{model} {id} ({host})",
                "step": {
                    "discovery_confirm": {
                        "description": "Do you want to set up {model} ({host})?"
                    },
                    "pick_device": {
                        "data": {
                            "device": "Device"
                        }
                    },
                    "user": {
                        "data": {
                            "host": "Host"
                        },
                        "description": "If you leave the host empty, discovery will be used to find devices."
                    }
                }
            },
            "entity": {
                "binary_sensor": {
                    "nightlight": {
                        "name": "Nightlight"
                    }
                },
                "light": {
                    "ambilight": {
                        "name": "Ambilight"
                    },
                    "nightlight": {
                        "name": "Nightlight"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "model": "Model",
                            "nightlight_switch": "Use Nightlight Switch",
                            "save_on_change": "Save Status On Change",
                            "transition": "Transition Time (ms)",
                            "use_music_mode": "Enable Music Mode"
                        }
                    }
                }
            },
            "selector": {
                "action": {
                    "options": {
                        "off": "Off",
                        "recover": "Recover",
                        "stay": "Stay"
                    }
                },
                "mode": {
                    "options": {
                        "color_flow": "Color Flow",
                        "hsv": "HSV",
                        "last": "Last",
                        "moonlight": "Moonlight",
                        "normal": "Normal",
                        "rgb": "RGB"
                    }
                }
            },
            "services": {
                "set_auto_delay_off_scene": {
                    "description": "Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.",
                    "fields": {
                        "brightness": {
                            "description": "The brightness value to set.",
                            "name": "Brightness"
                        },
                        "minutes": {
                            "description": "The time to wait before automatically turning the light off.",
                            "name": "Minutes"
                        }
                    },
                    "name": "Set auto delay off scene"
                },
                "set_color_flow_scene": {
                    "description": "Starts a color flow. If the light is off, it will be turned on.",
                    "fields": {
                        "action": {
                            "description": "The action to take after the flow stops.",
                            "name": "Action"
                        },
                        "count": {
                            "description": "The number of times to run this flow (0 to run forever).",
                            "name": "Count"
                        },
                        "transitions": {
                            "description": "Array of transitions, for desired effect. Examples https:\/\/yeelight.readthedocs.io\/en\/stable\/flow.html.",
                            "name": "Transitions"
                        }
                    },
                    "name": "Set color flow scene"
                },
                "set_color_scene": {
                    "description": "Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.",
                    "fields": {
                        "brightness": {
                            "description": "The brightness value to set.",
                            "name": "Brightness"
                        },
                        "rgb_color": {
                            "description": "Color for the light in RGB-format.",
                            "name": "RGB color"
                        }
                    },
                    "name": "Set color scene"
                },
                "set_color_temp_scene": {
                    "description": "Changes the light to the specified color temperature. If the light is off, it will be turned on.",
                    "fields": {
                        "brightness": {
                            "description": "The brightness value to set.",
                            "name": "Brightness"
                        },
                        "kelvin": {
                            "description": "Color temperature for the light in Kelvin.",
                            "name": "Kelvin"
                        }
                    },
                    "name": "Set color temperature scene"
                },
                "set_hsv_scene": {
                    "description": "Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.",
                    "fields": {
                        "brightness": {
                            "description": "The brightness value to set.",
                            "name": "Brightness"
                        },
                        "hs_color": {
                            "description": "Color for the light in hue\/sat format. Hue is 0-359 and Sat is 0-100.",
                            "name": "Hue\/sat color"
                        }
                    },
                    "name": "Set HSV scene"
                },
                "set_mode": {
                    "description": "Sets a operation mode.",
                    "fields": {
                        "mode": {
                            "description": "Operation mode.",
                            "name": "Mode"
                        }
                    },
                    "name": "Set mode"
                },
                "set_music_mode": {
                    "description": "Enables or disables music_mode.",
                    "fields": {
                        "music_mode": {
                            "description": "Use true or false to enable \/ disable music_mode.",
                            "name": "Music mode"
                        }
                    },
                    "name": "Set music mode"
                },
                "start_flow": {
                    "description": "Start a custom flow, using transitions from https:\/\/yeelight.readthedocs.io\/en\/stable\/yeelight.html#flow-objects.",
                    "fields": {
                        "action": {
                            "description": "The action to take after the flow stops.",
                            "name": "Action"
                        },
                        "count": {
                            "description": "The number of times to run this flow (0 to run forever).",
                            "name": "Count"
                        },
                        "transitions": {
                            "description": "Array of transitions, for desired effect. Examples https:\/\/yeelight.readthedocs.io\/en\/stable\/flow.html.",
                            "name": "Transitions"
                        }
                    },
                    "name": "Start flow"
                }
            }
        },
        "yolink": {
            "config": {
                "abort": {
                    "already_configured": "Account is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "authorize_url_timeout": "Timeout generating authorize URL.",
                    "missing_configuration": "The component is not configured. Please follow the documentation.",
                    "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
                    "oauth_error": "Received invalid token data.",
                    "reauth_successful": "Re-authentication was successful"
                },
                "create_entry": {
                    "default": "Successfully authenticated"
                },
                "step": {
                    "pick_implementation": {
                        "title": "Pick Authentication Method"
                    },
                    "reauth_confirm": {
                        "description": "The yolink integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "device_automation": {
                "trigger_type": {
                    "button_1_long_press": "Button_1 (long press)",
                    "button_1_short_press": "Button_1 (short press)",
                    "button_2_long_press": "Button_2 (long press)",
                    "button_2_short_press": "Button_2 (short press)",
                    "button_3_long_press": "Button_3 (long press)",
                    "button_3_short_press": "Button_3 (short press)",
                    "button_4_long_press": "Button_4 (long press)",
                    "button_4_short_press": "Button_4 (short press)"
                }
            },
            "entity": {
                "sensor": {
                    "power_failure_alarm": {
                        "name": "Power failure alarm",
                        "state": {
                            "alert": "Alert",
                            "normal": "Normal",
                            "off": "Off"
                        }
                    },
                    "power_failure_alarm_beep": {
                        "name": "Power failure alarm beep",
                        "state": {
                            "disabled": "Disabled",
                            "enabled": "Enabled"
                        }
                    },
                    "power_failure_alarm_mute": {
                        "name": "Power failure alarm mute",
                        "state": {
                            "muted": "Muted",
                            "unmuted": "Unmuted"
                        }
                    },
                    "power_failure_alarm_volume": {
                        "name": "Power failure alarm volume",
                        "state": {
                            "high": "High",
                            "low": "Low",
                            "medium": "Medium"
                        }
                    }
                },
                "switch": {
                    "plug_1": {
                        "name": "Plug 1"
                    },
                    "plug_2": {
                        "name": "Plug 2"
                    },
                    "plug_3": {
                        "name": "Plug 3"
                    },
                    "plug_4": {
                        "name": "Plug 4"
                    },
                    "usb_ports": {
                        "name": "USB ports"
                    }
                }
            }
        },
        "youless": {
            "config": {
                "error": {
                    "cannot_connect": "Failed to connect"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host",
                            "name": "Name"
                        }
                    }
                }
            }
        },
        "youtube": {
            "config": {
                "abort": {
                    "access_not_configured": "Please read the below message we got from Google:\n\n{message}",
                    "already_configured": "Account is already configured",
                    "no_channel": "Please create a YouTube channel to be able to use the integration. Instructions can be found at {support_url}.",
                    "no_subscriptions": "You need to be subscribed to YouTube channels in order to add them.",
                    "reauth_successful": "Re-authentication was successful",
                    "unknown": "Unexpected error"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_auth": "Invalid authentication"
                },
                "step": {
                    "channels": {
                        "data": {
                            "channels": "YouTube channels"
                        },
                        "description": "Select the channels you want to add."
                    },
                    "reauth_confirm": {
                        "description": "The YouTube integration needs to re-authenticate your account",
                        "title": "Reauthenticate Integration"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "latest_upload": {
                        "name": "Latest upload",
                        "state_attributes": {
                            "published_at": {
                                "name": "Published at"
                            },
                            "video_id": {
                                "name": "Video ID"
                            }
                        }
                    },
                    "subscribers": {
                        "name": "Subscribers"
                    }
                }
            },
            "options": {
                "step": {
                    "init": {
                        "data": {
                            "channels": "YouTube channels"
                        },
                        "description": "Select the channels you want to add."
                    }
                }
            }
        },
        "zamg": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "station_not_found": "Station ID not found at zamg"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "station_not_found": "Station ID not found at zamg"
                },
                "flow_title": "{name}",
                "step": {
                    "user": {
                        "data": {
                            "station_id": "Station ID (Defaults to nearest station)"
                        },
                        "description": "Set up ZAMG to integrate with Home Assistant."
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring ZAMG using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the ZAMG YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The ZAMG YAML configuration is being removed"
                }
            }
        },
        "zerproc": {
            "config": {
                "abort": {
                    "no_devices_found": "No devices found on the network",
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "confirm": {
                        "description": "Do you want to start setup?"
                    }
                }
            }
        },
        "zeversolar": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured"
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_host": "Invalid hostname or IP address",
                    "timeout_connect": "Timeout establishing connection",
                    "unknown": "Unexpected error"
                },
                "step": {
                    "user": {
                        "data": {
                            "host": "Host"
                        }
                    }
                }
            },
            "entity": {
                "sensor": {
                    "energy_today": {
                        "name": "Energy today"
                    }
                }
            }
        },
        "zha": {
            "config": {
                "abort": {
                    "not_zha_device": "This device is not a zha device",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "usb_probe_failed": "Failed to probe the usb device",
                    "wrong_firmware_installed": "Your device is running the wrong firmware and cannot be used with ZHA until the correct firmware is installed. [A repair has been created]({repair_url}) with more information and instructions for how to fix this."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_backup_json": "Invalid backup JSON"
                },
                "flow_title": "{name}",
                "step": {
                    "choose_automatic_backup": {
                        "data": {
                            "choose_automatic_backup": "Choose an automatic backup"
                        },
                        "description": "Restore your network settings from an automatic backup",
                        "title": "Restore Automatic Backup"
                    },
                    "choose_formation_strategy": {
                        "description": "Choose the network settings for your radio.",
                        "menu_options": {
                            "choose_automatic_backup": "Restore an automatic backup",
                            "form_initial_network": "Create a network",
                            "form_new_network": "Erase network settings and create a new network",
                            "reuse_settings": "Keep radio network settings",
                            "upload_manual_backup": "Upload a manual backup"
                        },
                        "title": "Network Formation"
                    },
                    "choose_serial_port": {
                        "data": {
                            "path": "Serial Device Path"
                        },
                        "description": "Select the serial port for your Zigbee radio",
                        "title": "Select a Serial Port"
                    },
                    "confirm": {
                        "description": "Do you want to set up {name}?"
                    },
                    "confirm_hardware": {
                        "description": "Do you want to set up {name}?"
                    },
                    "manual_pick_radio_type": {
                        "data": {
                            "radio_type": "Radio Type"
                        },
                        "description": "Pick your Zigbee radio type",
                        "title": "Radio Type"
                    },
                    "manual_port_config": {
                        "data": {
                            "baudrate": "Port speed",
                            "flow_control": "Data flow control",
                            "path": "Serial device path"
                        },
                        "description": "Enter the serial port settings",
                        "title": "Serial Port Settings"
                    },
                    "maybe_confirm_ezsp_restore": {
                        "data": {
                            "overwrite_coordinator_ieee": "Permanently replace the radio IEEE address"
                        },
                        "description": "Your backup has a different IEEE address than your radio. For your network to function properly, the IEEE address of your radio should also be changed.\n\nThis is a permanent operation.",
                        "title": "Overwrite Radio IEEE Address"
                    },
                    "upload_manual_backup": {
                        "data": {
                            "uploaded_backup_file": "Upload a file"
                        },
                        "description": "Restore your network settings from an uploaded backup JSON file. You can download one from a different ZHA installation from **Network Settings**, or use a Zigbee2MQTT `coordinator_backup.json` file.",
                        "title": "Upload a Manual Backup"
                    },
                    "verify_radio": {
                        "description": "The radio you are using ({name}) is not recommended and support for it may be removed in the future. Please see the Zigbee Home Automation integration's documentation for [a list of recommended adapters]({docs_recommended_adapters_url}).",
                        "title": "Radio is not recommended"
                    }
                }
            },
            "config_panel": {
                "zha_alarm_options": {
                    "alarm_arm_requires_code": "Code required for arming actions",
                    "alarm_failed_tries": "The number of consecutive failed code entries to trigger an alarm",
                    "alarm_master_code": "Master code for the alarm control panel(s)",
                    "title": "Alarm Control Panel Options"
                },
                "zha_options": {
                    "always_prefer_xy_color_mode": "Always prefer XY color mode",
                    "consider_unavailable_battery": "Consider battery powered devices unavailable after (seconds)",
                    "consider_unavailable_mains": "Consider mains powered devices unavailable after (seconds)",
                    "default_light_transition": "Default light transition time (seconds)",
                    "enable_identify_on_join": "Enable identify effect when devices join the network",
                    "enhanced_light_transition": "Enable enhanced light color\/temperature transition from an off-state",
                    "group_members_assume_state": "Group members assume state of group",
                    "light_transitioning_flag": "Enable enhanced brightness slider during light transition",
                    "title": "Global Options"
                }
            },
            "device_automation": {
                "action_type": {
                    "issue_all_led_effect": "Issue effect for all LEDs",
                    "issue_individual_led_effect": "Issue effect for individual LED",
                    "squawk": "Squawk",
                    "warn": "Warn"
                },
                "trigger_subtype": {
                    "both_buttons": "Both buttons",
                    "button": "Button",
                    "button_1": "First button",
                    "button_2": "Second button",
                    "button_3": "Third button",
                    "button_4": "Fourth button",
                    "button_5": "Fifth button",
                    "button_6": "Sixth button",
                    "close": "Close",
                    "dim_down": "Dim down",
                    "dim_up": "Dim up",
                    "face_1": "With face 1 activated",
                    "face_2": "With face 2 activated",
                    "face_3": "With face 3 activated",
                    "face_4": "With face 4 activated",
                    "face_5": "With face 5 activated",
                    "face_6": "With face 6 activated",
                    "face_any": "With any\/specified face(s) activated",
                    "left": "Left",
                    "open": "Open",
                    "right": "Right",
                    "turn_off": "Turn off",
                    "turn_on": "Turn on"
                },
                "trigger_type": {
                    "device_dropped": "Device dropped",
                    "device_flipped": "Device flipped \"{subtype}\"",
                    "device_knocked": "Device knocked \"{subtype}\"",
                    "device_offline": "Device offline",
                    "device_rotated": "Device rotated \"{subtype}\"",
                    "device_shaken": "Device shaken",
                    "device_slid": "Device slid \"{subtype}\"",
                    "device_tilted": "Device tilted",
                    "remote_button_alt_double_press": "\"{subtype}\" double clicked (Alternate mode)",
                    "remote_button_alt_long_press": "\"{subtype}\" continuously pressed (Alternate mode)",
                    "remote_button_alt_long_release": "\"{subtype}\" released after long press (Alternate mode)",
                    "remote_button_alt_quadruple_press": "\"{subtype}\" quadruple clicked (Alternate mode)",
                    "remote_button_alt_quintuple_press": "\"{subtype}\" quintuple clicked (Alternate mode)",
                    "remote_button_alt_short_press": "\"{subtype}\" pressed (Alternate mode)",
                    "remote_button_alt_short_release": "\"{subtype}\" released (Alternate mode)",
                    "remote_button_alt_triple_press": "\"{subtype}\" triple clicked (Alternate mode)",
                    "remote_button_double_press": "\"{subtype}\" double clicked",
                    "remote_button_long_press": "\"{subtype}\" continuously pressed",
                    "remote_button_long_release": "\"{subtype}\" released after long press",
                    "remote_button_quadruple_press": "\"{subtype}\" quadruple clicked",
                    "remote_button_quintuple_press": "\"{subtype}\" quintuple clicked",
                    "remote_button_short_press": "\"{subtype}\" pressed",
                    "remote_button_short_release": "\"{subtype}\" released",
                    "remote_button_triple_press": "\"{subtype}\" triple clicked"
                }
            },
            "issues": {
                "inconsistent_network_settings": {
                    "fix_flow": {
                        "step": {
                            "init": {
                                "description": "Your Zigbee radio's network settings are inconsistent with the most recent network backup. This usually happens if another Zigbee integration (e.g. Zigbee2MQTT or deCONZ) has overwritten them.\n\n{diff}\n\nIf you did not intentionally change your network settings, restore from the most recent backup: your devices will not work otherwise.",
                                "menu_options": {
                                    "restore_old_settings": "Restore backup (recommended)",
                                    "use_new_settings": "Keep the new settings"
                                },
                                "title": "Zigbee network settings have changed"
                            }
                        }
                    },
                    "title": "Zigbee network settings have changed"
                },
                "wrong_silabs_firmware_installed_nabucasa": {
                    "description": "Your Zigbee radio was previously used with multiprotocol (Zigbee and Thread) and still has multiprotocol firmware installed: ({firmware_type}). \n Option 1: To run your radio exclusively with ZHA, you need to install the Zigbee firmware:\n - Open the documentation by selecting the link under \"Learn More\".\n - Follow the instructions described in Step 2 (and Step 2 only) to 'Flash the Silicon Labs radio Zigbee firmware'.\n Option 2: To run your radio with multiprotocol, follow these steps: \n - Go to Settings > System > Hardware, select the device and select Configure. \n - Select the Configure IEEE 802.15.4 radio multiprotocol support option. \n - Select the checkbox and select Submit. \n - Once installed, configure the newly discovered ZHA integration.",
                    "title": "Zigbee radio with multiprotocol firmware detected"
                },
                "wrong_silabs_firmware_installed_other": {
                    "description": "Your Zigbee radio was previously used with multiprotocol (Zigbee and Thread) and still has multiprotocol firmware installed: ({firmware_type}). To run your radio exclusively with ZHA, you need to install Zigbee firmware. Follow your Zigbee radio manufacturer's instructions for how to do this.",
                    "title": "Zigbee radio with multiprotocol firmware detected"
                }
            },
            "options": {
                "abort": {
                    "not_zha_device": "This device is not a zha device",
                    "single_instance_allowed": "Already configured. Only a single configuration possible.",
                    "usb_probe_failed": "Failed to probe the usb device",
                    "wrong_firmware_installed": "Your device is running the wrong firmware and cannot be used with ZHA until the correct firmware is installed. [A repair has been created]({repair_url}) with more information and instructions for how to fix this."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_backup_json": "Invalid backup JSON"
                },
                "flow_title": "{name}",
                "step": {
                    "choose_automatic_backup": {
                        "data": {
                            "choose_automatic_backup": "Choose an automatic backup"
                        },
                        "description": "Restore your network settings from an automatic backup",
                        "title": "Restore Automatic Backup"
                    },
                    "choose_formation_strategy": {
                        "description": "Choose the network settings for your radio.",
                        "menu_options": {
                            "choose_automatic_backup": "Restore an automatic backup",
                            "form_initial_network": "Create a network",
                            "form_new_network": "Erase network settings and create a new network",
                            "reuse_settings": "Keep radio network settings",
                            "upload_manual_backup": "Upload a manual backup"
                        },
                        "title": "Network Formation"
                    },
                    "choose_serial_port": {
                        "data": {
                            "path": "Serial Device Path"
                        },
                        "description": "Select the serial port for your Zigbee radio",
                        "title": "Select a Serial Port"
                    },
                    "init": {
                        "description": "ZHA will be stopped. Do you wish to continue?",
                        "title": "Reconfigure ZHA"
                    },
                    "instruct_unplug": {
                        "description": "Your old radio has been reset. If the hardware is no longer needed, you can now unplug it.\n\nYou can now plug in your new radio.",
                        "title": "Unplug your old radio"
                    },
                    "intent_migrate": {
                        "description": "Before plugging in your new radio, your old radio needs to be reset. An automatic backup will be performed. If you are using a combined Z-Wave and Zigbee adapter like the HUSBZB-1, this will only reset the Zigbee portion.\n\n*Note: if you are migrating from a **ConBee\/RaspBee**, make sure it is running firmware `0x26720700` or newer! Otherwise, some devices may not be controllable after migrating until they are power cycled.*\n\nDo you wish to continue?",
                        "title": "Migrate to a new radio"
                    },
                    "manual_pick_radio_type": {
                        "data": {
                            "radio_type": "Radio Type"
                        },
                        "description": "Pick your Zigbee radio type",
                        "title": "Radio Type"
                    },
                    "manual_port_config": {
                        "data": {
                            "baudrate": "Port speed",
                            "flow_control": "Data flow control",
                            "path": "Serial device path"
                        },
                        "description": "Enter the serial port settings",
                        "title": "Serial Port Settings"
                    },
                    "maybe_confirm_ezsp_restore": {
                        "data": {
                            "overwrite_coordinator_ieee": "Permanently replace the radio IEEE address"
                        },
                        "description": "Your backup has a different IEEE address than your radio. For your network to function properly, the IEEE address of your radio should also be changed.\n\nThis is a permanent operation.",
                        "title": "Overwrite Radio IEEE Address"
                    },
                    "prompt_migrate_or_reconfigure": {
                        "description": "Are you migrating to a new radio or re-configuring the current radio?",
                        "menu_options": {
                            "intent_migrate": "Migrate to a new radio",
                            "intent_reconfigure": "Re-configure the current radio"
                        },
                        "title": "Migrate or re-configure"
                    },
                    "upload_manual_backup": {
                        "data": {
                            "uploaded_backup_file": "Upload a file"
                        },
                        "description": "Restore your network settings from an uploaded backup JSON file. You can download one from a different ZHA installation from **Network Settings**, or use a Zigbee2MQTT `coordinator_backup.json` file.",
                        "title": "Upload a Manual Backup"
                    },
                    "verify_radio": {
                        "description": "The radio you are using ({name}) is not recommended and support for it may be removed in the future. Please see the Zigbee Home Automation integration's documentation for [a list of recommended adapters]({docs_recommended_adapters_url}).",
                        "title": "Radio is not recommended"
                    }
                }
            },
            "services": {
                "clear_lock_user_code": {
                    "description": "Clears a user code from a lock.",
                    "fields": {
                        "code_slot": {
                            "description": "Code slot to clear code from.",
                            "name": "Code slot"
                        }
                    },
                    "name": "Clear lock user"
                },
                "disable_lock_user_code": {
                    "description": "Disables a user code on a lock.",
                    "fields": {
                        "code_slot": {
                            "description": "Code slot to disable.",
                            "name": "Code slot"
                        }
                    },
                    "name": "Disable lock user"
                },
                "enable_lock_user_code": {
                    "description": "Enables a user code on a lock.",
                    "fields": {
                        "code_slot": {
                            "description": "Code slot to enable.",
                            "name": "Code slot"
                        }
                    },
                    "name": "Enable lock user"
                },
                "issue_zigbee_cluster_command": {
                    "description": "Issues a command on the specified cluster on the specified entity.",
                    "fields": {
                        "args": {
                            "description": "Arguments to pass to the command.",
                            "name": "Args"
                        },
                        "cluster_id": {
                            "description": "ZCL cluster to retrieve attributes for.",
                            "name": "Cluster ID"
                        },
                        "cluster_type": {
                            "description": "Type of the cluster.",
                            "name": "Cluster Type"
                        },
                        "command": {
                            "description": "ID of the command to execute.",
                            "name": "Command"
                        },
                        "command_type": {
                            "description": "Type of the command to execute.",
                            "name": "Command Type"
                        },
                        "endpoint_id": {
                            "description": "Endpoint ID for the cluster.",
                            "name": "Endpoint ID"
                        },
                        "ieee": {
                            "description": "IEEE address for the device.",
                            "name": "IEEE"
                        },
                        "manufacturer": {
                            "description": "Manufacturer code.",
                            "name": "Manufacturer"
                        },
                        "params": {
                            "description": "Parameters to pass to the command.",
                            "name": "Params"
                        }
                    },
                    "name": "Issue zigbee cluster command"
                },
                "issue_zigbee_group_command": {
                    "description": "Issue command on the specified cluster on the specified group.",
                    "fields": {
                        "args": {
                            "description": "Arguments to pass to the command.",
                            "name": "Args"
                        },
                        "cluster_id": {
                            "description": "ZCL cluster to send command to.",
                            "name": "Cluster ID"
                        },
                        "cluster_type": {
                            "description": "Type of the cluster.",
                            "name": "Cluster type"
                        },
                        "command": {
                            "description": "ID of the command to execute.",
                            "name": "Command"
                        },
                        "group": {
                            "description": "Hexadecimal address of the group.",
                            "name": "Group"
                        },
                        "manufacturer": {
                            "description": "Manufacturer code.",
                            "name": "Manufacturer"
                        }
                    },
                    "name": "Issue zigbee group command"
                },
                "permit": {
                    "description": "Allows nodes to join the Zigbee network.",
                    "fields": {
                        "duration": {
                            "description": "Time to permit joins.",
                            "name": "Duration"
                        },
                        "ieee": {
                            "description": "IEEE address of the node permitting new joins.",
                            "name": "IEEE"
                        },
                        "install_code": {
                            "description": "Install code of the joining device (must be used with the source_ieee).",
                            "name": "Install code"
                        },
                        "qr_code": {
                            "description": "Value of the QR install code (different between vendors).",
                            "name": "QR code"
                        },
                        "source_ieee": {
                            "description": "IEEE address of the joining device (must be used with the install code).",
                            "name": "Source IEEE"
                        }
                    },
                    "name": "Permit"
                },
                "reconfigure_device": {
                    "description": "Reconfigures a ZHA device (heal device). Use this if you are having issues with the device. If the device in question is a battery-powered device, ensure it is awake and accepting commands when you use this service.",
                    "fields": {
                        "ieee": {
                            "description": "IEEE address of the device to reconfigure.",
                            "name": "IEEE"
                        }
                    },
                    "name": "Reconfigure device"
                },
                "remove": {
                    "description": "Removes a node from the Zigbee network.",
                    "fields": {
                        "ieee": {
                            "description": "IEEE address of the node to remove.",
                            "name": "IEEE"
                        }
                    },
                    "name": "Remove"
                },
                "set_lock_user_code": {
                    "description": "Sets a user code on a lock.",
                    "fields": {
                        "code_slot": {
                            "description": "Code slot to set the code in.",
                            "name": "Code slot"
                        },
                        "user_code": {
                            "description": "Code to set.",
                            "name": "Code"
                        }
                    },
                    "name": "Set lock user code"
                },
                "set_zigbee_cluster_attribute": {
                    "description": "Sets an attribute value for the specified cluster on the specified entity.",
                    "fields": {
                        "attribute": {
                            "description": "ID of the attribute to set.",
                            "name": "Attribute"
                        },
                        "cluster_id": {
                            "description": "ZCL cluster to retrieve attributes for.",
                            "name": "Cluster ID"
                        },
                        "cluster_type": {
                            "description": "Type of the cluster.",
                            "name": "Cluster Type"
                        },
                        "endpoint_id": {
                            "description": "Endpoint ID for the cluster.",
                            "name": "Endpoint ID"
                        },
                        "ieee": {
                            "description": "IEEE address for the device.",
                            "name": "IEEE"
                        },
                        "manufacturer": {
                            "description": "Manufacturer code.",
                            "name": "Manufacturer"
                        },
                        "value": {
                            "description": "Value to write to the attribute.",
                            "name": "Value"
                        }
                    },
                    "name": "Set zigbee cluster attribute"
                },
                "warning_device_squawk": {
                    "description": "This service uses the WD capabilities to emit a quick audible\/visible pulse called a \"squawk\". The squawk command has no effect if the WD is currently active (warning in progress).",
                    "fields": {
                        "ieee": {
                            "description": "IEEE address for the device.",
                            "name": "IEEE"
                        },
                        "level": {
                            "description": "The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.",
                            "name": "Level"
                        },
                        "mode": {
                            "description": "The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.",
                            "name": "Mode"
                        },
                        "strobe": {
                            "description": "The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.",
                            "name": "Strobe"
                        }
                    },
                    "name": "Warning device squawk"
                },
                "warning_device_warn": {
                    "description": "This service starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.",
                    "fields": {
                        "duration": {
                            "description": "Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are \"0\" this field is ignored.",
                            "name": "Duration"
                        },
                        "duty_cycle": {
                            "description": "Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4\/10ths of a second and then turns OFF for 6\/10ths of a second.",
                            "name": "Duty cycle"
                        },
                        "ieee": {
                            "description": "IEEE address for the device.",
                            "name": "IEEE"
                        },
                        "intensity": {
                            "description": "Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.",
                            "name": "Intensity"
                        },
                        "level": {
                            "description": "The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.",
                            "name": "Level"
                        },
                        "mode": {
                            "description": "The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.",
                            "name": "Mode"
                        },
                        "strobe": {
                            "description": "The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. \"0\" means no strobe, \"1\" means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.",
                            "name": "Strobe"
                        }
                    },
                    "name": "Warning device starts alert"
                }
            }
        },
        "zodiac": {
            "config": {
                "abort": {
                    "single_instance_allowed": "Already configured. Only a single configuration possible."
                },
                "step": {
                    "user": {
                        "description": "Do you want to start setup?"
                    }
                }
            },
            "entity": {
                "sensor": {
                    "sign": {
                        "state": {
                            "aquarius": "Aquarius",
                            "aries": "Aries",
                            "cancer": "Cancer",
                            "capricorn": "Capricorn",
                            "gemini": "Gemini",
                            "leo": "Leo",
                            "libra": "Libra",
                            "pisces": "Pisces",
                            "sagittarius": "Sagittarius",
                            "scorpio": "Scorpio",
                            "taurus": "Taurus",
                            "virgo": "Virgo"
                        }
                    }
                }
            },
            "issues": {
                "deprecated_yaml": {
                    "description": "Configuring Zodiac using YAML is being removed.\n\nYour existing YAML configuration has been imported into the UI automatically.\n\nRemove the Zodiac YAML configuration from your configuration.yaml file and restart Home Assistant to fix this issue.",
                    "title": "The Zodiac YAML configuration is being removed"
                }
            },
            "platform": {
                "sensor": {
                    "state": {
                        "zodiac__sign": {
                            "aquarius": "Aquarius",
                            "aries": "Aries",
                            "cancer": "Cancer",
                            "capricorn": "Capricorn",
                            "gemini": "Gemini",
                            "leo": "Leo",
                            "libra": "Libra",
                            "pisces": "Pisces",
                            "sagittarius": "Sagittarius",
                            "scorpio": "Scorpio",
                            "taurus": "Taurus",
                            "virgo": "Virgo"
                        }
                    }
                }
            },
            "title": "Zodiac"
        },
        "zone": {
            "config": {
                "error": {
                    "name_exists": "Name already exists"
                },
                "step": {
                    "init": {
                        "data": {
                            "icon": "Icon",
                            "latitude": "Latitude",
                            "longitude": "Longitude",
                            "name": "Name",
                            "passive": "Passive",
                            "radius": "Radius"
                        },
                        "title": "Define zone parameters"
                    }
                },
                "title": "Zone"
            },
            "services": {
                "reload": {
                    "description": "Reloads zones from the YAML-configuration.",
                    "name": "Reload"
                }
            }
        },
        "zoneminder": {
            "config": {
                "abort": {
                    "auth_fail": "Username or password is incorrect.",
                    "cannot_connect": "Failed to connect",
                    "connection_error": "Failed to connect to a ZoneMinder server.",
                    "invalid_auth": "Invalid authentication"
                },
                "create_entry": {
                    "default": "ZoneMinder server added."
                },
                "error": {
                    "auth_fail": "Username or password is incorrect.",
                    "cannot_connect": "Failed to connect",
                    "connection_error": "Failed to connect to a ZoneMinder server.",
                    "invalid_auth": "Invalid authentication"
                },
                "flow_title": "ZoneMinder",
                "step": {
                    "user": {
                        "data": {
                            "host": "Host and Port (ex 10.10.0.4:8010)",
                            "password": "Password",
                            "path": "ZM Path",
                            "path_zms": "ZMS Path",
                            "ssl": "Uses an SSL certificate",
                            "username": "Username",
                            "verify_ssl": "Verify SSL certificate"
                        },
                        "title": "Add ZoneMinder Server."
                    }
                }
            },
            "services": {
                "set_run_state": {
                    "description": "Sets the ZoneMinder run state.",
                    "fields": {
                        "name": {
                            "description": "The string name of the ZoneMinder run state to set as active.",
                            "name": "Name"
                        }
                    },
                    "name": "Set run state"
                }
            }
        },
        "zwave_js": {
            "config": {
                "abort": {
                    "addon_get_discovery_info_failed": "Failed to get Z-Wave JS add-on discovery info.",
                    "addon_info_failed": "Failed to get Z-Wave JS add-on info.",
                    "addon_install_failed": "Failed to install the Z-Wave JS add-on.",
                    "addon_set_config_failed": "Failed to set Z-Wave JS configuration.",
                    "addon_start_failed": "Failed to start the Z-Wave JS add-on.",
                    "already_configured": "Device is already configured",
                    "already_in_progress": "Configuration flow is already in progress",
                    "cannot_connect": "Failed to connect",
                    "discovery_requires_supervisor": "Discovery requires the supervisor.",
                    "not_zwave_device": "Discovered device is not a Z-Wave device.",
                    "not_zwave_js_addon": "Discovered add-on is not the official Z-Wave JS add-on."
                },
                "error": {
                    "addon_start_failed": "Failed to start the Z-Wave JS add-on. Check the configuration.",
                    "cannot_connect": "Failed to connect",
                    "invalid_ws_url": "Invalid websocket URL",
                    "unknown": "Unexpected error"
                },
                "flow_title": "{name}",
                "progress": {
                    "install_addon": "Please wait while the Z-Wave JS add-on installation finishes. This can take several minutes.",
                    "start_addon": "Please wait while the Z-Wave JS add-on start completes. This may take some seconds."
                },
                "step": {
                    "configure_addon": {
                        "data": {
                            "s0_legacy_key": "S0 Key (Legacy)",
                            "s2_access_control_key": "S2 Access Control Key",
                            "s2_authenticated_key": "S2 Authenticated Key",
                            "s2_unauthenticated_key": "S2 Unauthenticated Key",
                            "usb_path": "USB Device Path"
                        },
                        "description": "The add-on will generate security keys if those fields are left empty.",
                        "title": "Enter the Z-Wave JS add-on configuration"
                    },
                    "hassio_confirm": {
                        "title": "Set up Z-Wave JS integration with the Z-Wave JS add-on"
                    },
                    "install_addon": {
                        "title": "The Z-Wave JS add-on installation has started"
                    },
                    "manual": {
                        "data": {
                            "url": "URL"
                        }
                    },
                    "on_supervisor": {
                        "data": {
                            "use_addon": "Use the Z-Wave JS Supervisor add-on"
                        },
                        "description": "Do you want to use the Z-Wave JS Supervisor add-on?",
                        "title": "Select connection method"
                    },
                    "start_addon": {
                        "title": "The Z-Wave JS add-on is starting."
                    },
                    "usb_confirm": {
                        "description": "Do you want to set up {name} with the Z-Wave JS add-on?"
                    },
                    "zeroconf_confirm": {
                        "description": "Do you want to add the Z-Wave JS Server with home ID {home_id} found at {url} to Home Assistant?",
                        "title": "Discovered Z-Wave JS Server"
                    }
                }
            },
            "device_automation": {
                "action_type": {
                    "clear_lock_usercode": "Clear usercode on {entity_name}",
                    "ping": "Ping device",
                    "refresh_value": "Refresh the value(s) for {entity_name}",
                    "reset_meter": "Reset meters on {subtype}",
                    "set_config_parameter": "Set value of config parameter {subtype}",
                    "set_lock_usercode": "Set a usercode on {entity_name}",
                    "set_value": "Set value of a Z-Wave Value"
                },
                "condition_type": {
                    "config_parameter": "Config parameter {subtype} value",
                    "node_status": "Node status",
                    "value": "Current value of a Z-Wave Value"
                },
                "trigger_type": {
                    "event.notification.entry_control": "Sent an Entry Control notification",
                    "event.notification.notification": "Sent a notification",
                    "event.value_notification.basic": "Basic CC event on {subtype}",
                    "event.value_notification.central_scene": "Central Scene action on {subtype}",
                    "event.value_notification.scene_activation": "Scene Activation on {subtype}",
                    "state.node_status": "Node status changed",
                    "zwave_js.value_updated.config_parameter": "Value change on config parameter {subtype}",
                    "zwave_js.value_updated.value": "Value change on a Z-Wave JS Value"
                }
            },
            "issues": {
                "device_config_file_changed": {
                    "fix_flow": {
                        "abort": {
                            "cannot_connect": "Cannot connect to {device_name}. Please try again later after confirming that your Z-Wave network is up and connected to Home Assistant."
                        },
                        "step": {
                            "confirm": {
                                "description": "Z-Wave JS discovers a lot of device metadata by interviewing the device. However, some of the information has to be loaded from a configuration file. Some of this information is only evaluated once, during the device interview.\n\nWhen a device config file is updated, this information may be stale and and the device must be re-interviewed to pick up the changes.\n\n This is not a required operation and device functionality will be impacted during the re-interview process, but you may see improvements for your device once it is complete.\n\nIf you'd like to proceed, click on SUBMIT below. The re-interview will take place in the background.",
                                "title": "Z-Wave device configuration file changed: {device_name}"
                            }
                        }
                    },
                    "title": "Z-Wave device configuration file changed: {device_name}"
                },
                "dry_fan_presets_deprecation": {
                    "fix_flow": {
                        "step": {
                            "confirm": {
                                "description": "You are using the Dry or Fan preset modes in your entity `{entity_id}`.\n\nDry and Fan preset modes are deprecated and will be removed. Please update your automations to use the corresponding Dry and Fan **HVAC modes** instead.\n\nClick on SUBMIT below once you have manually fixed this issue.",
                                "title": "Dry and Fan preset modes will be removed: {entity_id}"
                            }
                        }
                    },
                    "title": "Dry and Fan preset modes will be removed: {entity_id}"
                },
                "invalid_server_version": {
                    "description": "The version of Z-Wave JS Server you are currently running is too old for this version of Home Assistant. Please update the Z-Wave JS Server to the latest version to fix this issue.",
                    "title": "Newer version of Z-Wave JS Server needed"
                }
            },
            "options": {
                "abort": {
                    "addon_get_discovery_info_failed": "Failed to get Z-Wave JS add-on discovery info.",
                    "addon_info_failed": "Failed to get Z-Wave JS add-on info.",
                    "addon_install_failed": "Failed to install the Z-Wave JS add-on.",
                    "addon_set_config_failed": "Failed to set Z-Wave JS configuration.",
                    "addon_start_failed": "Failed to start the Z-Wave JS add-on.",
                    "already_configured": "Device is already configured",
                    "cannot_connect": "Failed to connect",
                    "different_device": "The connected USB device is not the same as previously configured for this config entry. Please instead create a new config entry for the new device."
                },
                "error": {
                    "cannot_connect": "Failed to connect",
                    "invalid_ws_url": "Invalid websocket URL",
                    "unknown": "Unexpected error"
                },
                "progress": {
                    "install_addon": "Please wait while the Z-Wave JS add-on installation finishes. This can take several minutes.",
                    "start_addon": "Please wait while the Z-Wave JS add-on start completes. This may take some seconds."
                },
                "step": {
                    "configure_addon": {
                        "data": {
                            "emulate_hardware": "Emulate Hardware",
                            "log_level": "Log level",
                            "s0_legacy_key": "S0 Key (Legacy)",
                            "s2_access_control_key": "S2 Access Control Key",
                            "s2_authenticated_key": "S2 Authenticated Key",
                            "s2_unauthenticated_key": "S2 Unauthenticated Key",
                            "usb_path": "USB Device Path"
                        },
                        "description": "The add-on will generate security keys if those fields are left empty.",
                        "title": "Enter the Z-Wave JS add-on configuration"
                    },
                    "install_addon": {
                        "title": "The Z-Wave JS add-on installation has started"
                    },
                    "manual": {
                        "data": {
                            "url": "URL"
                        }
                    },
                    "on_supervisor": {
                        "data": {
                            "use_addon": "Use the Z-Wave JS Supervisor add-on"
                        },
                        "description": "Do you want to use the Z-Wave JS Supervisor add-on?",
                        "title": "Select connection method"
                    },
                    "start_addon": {
                        "title": "The Z-Wave JS add-on is starting."
                    }
                }
            },
            "services": {
                "bulk_set_partial_config_parameters": {
                    "description": "Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.",
                    "fields": {
                        "endpoint": {
                            "description": "The configuration parameter's endpoint.",
                            "name": "Endpoint"
                        },
                        "parameter": {
                            "description": "The name (or ID) of the configuration parameter you want to configure.",
                            "name": "Parameter"
                        },
                        "value": {
                            "description": "The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter.",
                            "name": "Value"
                        }
                    },
                    "name": "Bulk set partial configuration parameters (advanced)."
                },
                "clear_lock_usercode": {
                    "description": "Clears a user code from a lock.",
                    "fields": {
                        "code_slot": {
                            "description": "Code slot to clear code from.",
                            "name": "Code slot"
                        }
                    },
                    "name": "Clear lock user code"
                },
                "invoke_cc_api": {
                    "description": "Calls a Command Class API on a node. Some Command Classes can't be fully controlled via the `set_value` service and require direct calls to the Command Class API.",
                    "fields": {
                        "command_class": {
                            "description": "The ID of the command class that you want to issue a command to.",
                            "name": "Command class"
                        },
                        "endpoint": {
                            "description": "The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and\/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted.",
                            "name": "Endpoint"
                        },
                        "method_name": {
                            "description": "The name of the API method to call. Refer to the Z-Wave JS Command Class API documentation (https:\/\/zwave-js.github.io\/node-zwave-js\/#\/api\/CCs\/index) for available methods.",
                            "name": "Method name"
                        },
                        "parameters": {
                            "description": "A list of parameters to pass to the API method. Refer to the Z-Wave JS Command Class API documentation (https:\/\/zwave-js.github.io\/node-zwave-js\/#\/api\/CCs\/index) for parameters.",
                            "name": "Parameters"
                        }
                    },
                    "name": "Invoke a Command Class API on a node (advanced)"
                },
                "multicast_set_value": {
                    "description": "Changes any value that Z-Wave JS recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This service has minimal validation so only use this service if you know what you are doing.",
                    "fields": {
                        "broadcast": {
                            "description": "Whether command should be broadcast to all devices on the network.",
                            "name": "Broadcast?"
                        },
                        "command_class": {
                            "description": "The ID of the command class for the value.",
                            "name": "Command class"
                        },
                        "endpoint": {
                            "description": "The endpoint for the value.",
                            "name": "Endpoint"
                        },
                        "options": {
                            "description": "Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.",
                            "name": "Options"
                        },
                        "property": {
                            "description": "The ID of the property for the value.",
                            "name": "Property"
                        },
                        "property_key": {
                            "description": "The ID of the property key for the value.",
                            "name": "Property key"
                        },
                        "value": {
                            "description": "The new value to set.",
                            "name": "Value"
                        }
                    },
                    "name": "Set a value on multiple devices via multicast (advanced)"
                },
                "ping": {
                    "description": "Forces Z-Wave JS to try to reach a node. This can be used to update the status of the node in Z-Wave JS when you think it doesn't accurately reflect reality, e.g. reviving a failed\/dead node or marking the node as asleep.",
                    "name": "Ping a node"
                },
                "refresh_value": {
                    "description": "Force updates the values of a Z-Wave entity.",
                    "fields": {
                        "entity_id": {
                            "description": "Entities to refresh.",
                            "name": "Entities"
                        },
                        "refresh_all_values": {
                            "description": "Whether to refresh all values (true) or just the primary value (false).",
                            "name": "Refresh all values?"
                        }
                    },
                    "name": "Refresh values"
                },
                "reset_meter": {
                    "description": "Resets the meters on a node.",
                    "fields": {
                        "meter_type": {
                            "description": "The type of meter to reset. Not all meters support the ability to pick a meter type to reset.",
                            "name": "Meter type"
                        },
                        "value": {
                            "description": "The value that meters should be reset to. Not all meters support the ability to be reset to a specific value.",
                            "name": "Target value"
                        }
                    },
                    "name": "Reset meters on a node"
                },
                "set_config_parameter": {
                    "description": "Changes the configuration parameters of your Z-Wave devices.",
                    "fields": {
                        "bitmask": {
                            "description": "Target a specific bitmask (see the documentation for more information).",
                            "name": "Bitmask"
                        },
                        "endpoint": {
                            "description": "The configuration parameter's endpoint.",
                            "name": "Endpoint"
                        },
                        "parameter": {
                            "description": "The name (or ID) of the configuration parameter you want to configure.",
                            "name": "Parameter"
                        },
                        "value": {
                            "description": "The new value to set for this configuration parameter.",
                            "name": "Value"
                        }
                    },
                    "name": "Set device configuration parameter"
                },
                "set_lock_usercode": {
                    "description": "Sets a user code on a lock.",
                    "fields": {
                        "code_slot": {
                            "description": "Code slot to set the code.",
                            "name": "Code slot"
                        },
                        "usercode": {
                            "description": "Lock code to set.",
                            "name": "Code"
                        }
                    },
                    "name": "Set lock user code"
                },
                "set_value": {
                    "description": "Changes any value that Z-Wave JS recognizes on a Z-Wave device. This service has minimal validation so only use this service if you know what you are doing.",
                    "fields": {
                        "command_class": {
                            "description": "The ID of the command class for the value.",
                            "name": "Command class"
                        },
                        "endpoint": {
                            "description": "The endpoint for the value.",
                            "name": "Endpoint"
                        },
                        "options": {
                            "description": "Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.",
                            "name": "Options"
                        },
                        "property": {
                            "description": "The ID of the property for the value.",
                            "name": "Property"
                        },
                        "property_key": {
                            "description": "The ID of the property key for the value.",
                            "name": "Property key"
                        },
                        "value": {
                            "description": "The new value to set.",
                            "name": "Value"
                        },
                        "wait_for_result": {
                            "description": "Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to `true`, note that the service call can take a while if setting a value on an asleep battery device.",
                            "name": "Wait for result?"
                        }
                    },
                    "name": "Set a value (advanced)"
                }
            }
        },
        "zwave_me": {
            "config": {
                "abort": {
                    "already_configured": "Device is already configured",
                    "no_valid_uuid_set": "No valid UUID set"
                },
                "error": {
                    "no_valid_uuid_set": "No valid UUID set"
                },
                "step": {
                    "user": {
                        "data": {
                            "token": "API Token",
                            "url": "URL"
                        },
                        "description": "Input IP address with port and access token of Z-Way server. To get the token go to the Z-Way user interface Smart Home UI > Menu > Settings > Users > Administrator > API token.\n\nExample of connecting to Z-Way running as an add-on:\nURL: {add_on_url}\nToken: {local_token}\n\nExample of connecting to Z-Way in the local network:\nURL: {local_url}\nToken: {local_token}\n\nExample of connecting to Z-Way via remote access find.z-wave.me:\nURL: {find_url}\nToken: {find_token}\n\nExample of connecting to Z-Way with a static public IP address:\nURL: {remote_url}\nToken: {local_token}\n\nWhen connecting via find.z-wave.me you need to use a token with a global scope (log-in to Z-Way via find.z-wave.me for this)."
                    }
                }
            }
        }
    }
}